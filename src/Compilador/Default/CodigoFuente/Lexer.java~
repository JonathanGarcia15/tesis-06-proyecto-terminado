/* The following code was generated by JFlex 1.7.0 */

package Compilador.Default.AnalizadorLexico;
import static Compilador.Default.AnalizadorLexico.Tokens.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>C:/Users/JoGarWeb/IdeaProjects/Tesis/src/Compilador/Default/CodigoFuente/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\41\1\17\1\62\1\62\1\41\22\0\1\41\1\6\1\13"+
    "\3\0\1\4\1\0\1\24\1\40\1\10\1\12\1\14\1\2\1\16"+
    "\1\11\12\20\1\60\1\15\1\1\1\5\1\7\2\0\32\21\4\0"+
    "\1\50\1\0\1\31\1\35\1\55\1\53\1\37\1\51\1\30\1\54"+
    "\1\34\1\57\1\56\1\36\1\32\1\42\1\27\1\25\1\52\1\26"+
    "\1\46\1\45\1\47\1\33\1\44\1\21\1\61\1\43\1\22\1\3"+
    "\1\23\7\0\1\62\u1fa2\0\1\62\1\62\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\2\1\1\5\1\2"+
    "\2\6\1\7\1\1\1\10\1\11\1\1\1\12\1\13"+
    "\1\4\1\14\1\15\1\16\12\4\1\17\1\20\10\4"+
    "\1\21\1\4\1\22\1\2\2\23\2\0\1\24\1\0"+
    "\24\4\1\25\14\4\1\25\4\4\1\26\10\4\1\27"+
    "\1\0\12\4\1\30\11\4\1\31\7\4\1\32\15\4"+
    "\1\33\1\4\1\32\13\4\1\0\16\4\1\34\7\4"+
    "\1\35\1\4\1\36\2\4\1\37\23\4\1\40\2\4"+
    "\1\0\1\4\1\41\25\4\1\42\6\4\1\35\11\4"+
    "\1\26\11\4\1\43\26\4\1\44\1\4\1\45\10\4"+
    "\1\46\3\4\1\47\30\4\1\50\4\4\1\51\2\4"+
    "\1\52\1\46\3\4\1\53\5\4\1\31\23\4\1\54"+
    "\20\4\1\55\30\4\1\56\11\4\1\57\5\4\1\60"+
    "\32\4\1\61\10\4\1\62\1\4\1\63\3\4\1\64"+
    "\1\4\1\65\2\4\1\54\7\4\1\66\15\4";

  private static int [] zzUnpackAction() {
    int [] result = new int[488];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\63\0\231\0\314\0\377\0\377"+
    "\0\377\0\63\0\u0132\0\63\0\u0165\0\63\0\63\0\u0198"+
    "\0\63\0\u01cb\0\u01fe\0\63\0\63\0\63\0\u0231\0\u0264"+
    "\0\u0297\0\u02ca\0\u02fd\0\u0330\0\u0363\0\u0396\0\u03c9\0\u03fc"+
    "\0\63\0\u042f\0\u0462\0\u0495\0\u04c8\0\u04fb\0\u052e\0\u0561"+
    "\0\u0594\0\u05c7\0\63\0\u05fa\0\63\0\63\0\u062d\0\63"+
    "\0\u0660\0\u0165\0\63\0\u0693\0\u06c6\0\u06f9\0\u072c\0\u075f"+
    "\0\u0792\0\u07c5\0\u07f8\0\u082b\0\u085e\0\u0891\0\u08c4\0\u08f7"+
    "\0\u092a\0\u095d\0\u0990\0\u09c3\0\u09f6\0\u0a29\0\u0a5c\0\u0a8f"+
    "\0\u01fe\0\u0ac2\0\u0af5\0\u0b28\0\u0b5b\0\u0b8e\0\u0bc1\0\u0bf4"+
    "\0\u0c27\0\u0c5a\0\u0c8d\0\u0cc0\0\u0cf3\0\u0d26\0\u0d59\0\u0d8c"+
    "\0\u0dbf\0\u0df2\0\u0e25\0\u0e58\0\u0e8b\0\u0ebe\0\u0ef1\0\u0f24"+
    "\0\u0f57\0\u0f8a\0\u062d\0\63\0\u0fbd\0\u0ff0\0\u1023\0\u1056"+
    "\0\u1089\0\u10bc\0\u10ef\0\u1122\0\u1155\0\u1188\0\u11bb\0\u01fe"+
    "\0\u11ee\0\u1221\0\u1254\0\u1287\0\u12ba\0\u12ed\0\u1320\0\u1353"+
    "\0\u1386\0\u13b9\0\u13ec\0\u141f\0\u1452\0\u1485\0\u14b8\0\u14eb"+
    "\0\u151e\0\u01fe\0\u1551\0\u1584\0\u15b7\0\u15ea\0\u161d\0\u1650"+
    "\0\u1683\0\u16b6\0\u16e9\0\u171c\0\u174f\0\u1782\0\u17b5\0\u01fe"+
    "\0\u17e8\0\u181b\0\u184e\0\u1881\0\u18b4\0\u18e7\0\u191a\0\u194d"+
    "\0\u1980\0\u19b3\0\u19e6\0\u1a19\0\u1a4c\0\u1a7f\0\u1ab2\0\u1ae5"+
    "\0\u1b18\0\u1b4b\0\u1b7e\0\u1bb1\0\u1be4\0\u1c17\0\u1c4a\0\u1c7d"+
    "\0\u1cb0\0\u1ce3\0\u1d16\0\u1d49\0\u01fe\0\u1d7c\0\u1daf\0\u1de2"+
    "\0\u1e15\0\u1e48\0\u1e7b\0\u1eae\0\u1ee1\0\u1f14\0\u01fe\0\u1f47"+
    "\0\u1f7a\0\u01fe\0\u1fad\0\u1fe0\0\u2013\0\u2046\0\u2079\0\u20ac"+
    "\0\u20df\0\u2112\0\u2145\0\u2178\0\u21ab\0\u21de\0\u2211\0\u2244"+
    "\0\u2277\0\u22aa\0\u22dd\0\u2310\0\u2343\0\u01fe\0\u2376\0\u23a9"+
    "\0\u23dc\0\u240f\0\u2442\0\u2475\0\u24a8\0\u24db\0\u250e\0\u2541"+
    "\0\u2574\0\u25a7\0\u25da\0\u260d\0\u2640\0\u2673\0\u26a6\0\u26d9"+
    "\0\u270c\0\u273f\0\u2772\0\u27a5\0\u27d8\0\u280b\0\u283e\0\u2871"+
    "\0\u01fe\0\u28a4\0\u28d7\0\u290a\0\u293d\0\u2970\0\u29a3\0\u01fe"+
    "\0\u29d6\0\u2a09\0\u2a3c\0\u2a6f\0\u2aa2\0\u2ad5\0\u2b08\0\u2b3b"+
    "\0\u2b6e\0\u01fe\0\u2ba1\0\u2bd4\0\u2c07\0\u2c3a\0\u2c6d\0\u2ca0"+
    "\0\u2cd3\0\u2d06\0\u2d39\0\u01fe\0\u2d6c\0\u2d9f\0\u2dd2\0\u2e05"+
    "\0\u2e38\0\u2e6b\0\u2e9e\0\u2ed1\0\u2f04\0\u2f37\0\u2f6a\0\u2f9d"+
    "\0\u2fd0\0\u3003\0\u3036\0\u3069\0\u309c\0\u30cf\0\u3102\0\u3135"+
    "\0\u3168\0\u319b\0\u01fe\0\u31ce\0\u01fe\0\u3201\0\u3234\0\u3267"+
    "\0\u329a\0\u32cd\0\u3300\0\u3333\0\u3366\0\u3399\0\u33cc\0\u33ff"+
    "\0\u3432\0\u01fe\0\u3465\0\u3498\0\u34cb\0\u34fe\0\u3531\0\u3564"+
    "\0\u3597\0\u35ca\0\u35fd\0\u3630\0\u3663\0\u3696\0\u36c9\0\u36fc"+
    "\0\u372f\0\u3762\0\u3795\0\u37c8\0\u37fb\0\u382e\0\u3861\0\u3894"+
    "\0\u38c7\0\u38fa\0\u01fe\0\u392d\0\u3960\0\u3993\0\u39c6\0\u01fe"+
    "\0\u39f9\0\u3a2c\0\u01fe\0\u01fe\0\u3a5f\0\u3a92\0\u3ac5\0\u01fe"+
    "\0\u3af8\0\u3b2b\0\u3b5e\0\u3b91\0\u3bc4\0\u01fe\0\u3bf7\0\u3c2a"+
    "\0\u3c5d\0\u3c90\0\u3cc3\0\u3cf6\0\u3d29\0\u3d5c\0\u3d8f\0\u3dc2"+
    "\0\u3df5\0\u3e28\0\u3e5b\0\u3e8e\0\u3ec1\0\u3ef4\0\u3f27\0\u3f5a"+
    "\0\u3f8d\0\u3fc0\0\u3ff3\0\u4026\0\u4059\0\u408c\0\u40bf\0\u40f2"+
    "\0\u4125\0\u4158\0\u418b\0\u41be\0\u41f1\0\u4224\0\u4257\0\u428a"+
    "\0\u42bd\0\u42f0\0\u01fe\0\u4323\0\u4356\0\u4389\0\u43bc\0\u43ef"+
    "\0\u4422\0\u4455\0\u4488\0\u44bb\0\u44ee\0\u4521\0\u4554\0\u4587"+
    "\0\u45ba\0\u45ed\0\u4620\0\u4653\0\u4686\0\u46b9\0\u46ec\0\u471f"+
    "\0\u4752\0\u4785\0\u47b8\0\u01fe\0\u47eb\0\u481e\0\u4851\0\u4884"+
    "\0\u48b7\0\u48ea\0\u491d\0\u4950\0\u4983\0\u01fe\0\u49b6\0\u49e9"+
    "\0\u4a1c\0\u4a4f\0\u4a82\0\u01fe\0\u4ab5\0\u4ae8\0\u4b1b\0\u4b4e"+
    "\0\u4b81\0\u4bb4\0\u4be7\0\u4c1a\0\u4c4d\0\u4c80\0\u4cb3\0\u4ce6"+
    "\0\u4d19\0\u4d4c\0\u4d7f\0\u4db2\0\u4de5\0\u4e18\0\u4e4b\0\u4e7e"+
    "\0\u4eb1\0\u4ee4\0\u4f17\0\u4f4a\0\u4f7d\0\u4fb0\0\u01fe\0\u4fe3"+
    "\0\u5016\0\u5049\0\u507c\0\u50af\0\u50e2\0\u5115\0\u5148\0\u01fe"+
    "\0\u517b\0\u01fe\0\u51ae\0\u51e1\0\u5214\0\u01fe\0\u5247\0\u01fe"+
    "\0\u527a\0\u52ad\0\u01fe\0\u52e0\0\u5313\0\u5346\0\u5379\0\u53ac"+
    "\0\u53df\0\u5412\0\u01fe\0\u5445\0\u5478\0\u54ab\0\u54de\0\u5511"+
    "\0\u5544\0\u5577\0\u55aa\0\u55dd\0\u5610\0\u5643\0\u5676\0\u56a9";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[488];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\23\1\40"+
    "\1\41\1\42\2\23\1\43\1\44\1\45\2\23\1\46"+
    "\1\23\1\47\1\50\1\51\1\52\1\23\1\53\1\54"+
    "\66\0\1\55\2\0\1\56\60\0\1\57\14\0\2\23"+
    "\3\0\13\23\1\0\1\42\16\23\1\0\1\23\5\0"+
    "\1\60\63\0\1\56\66\0\1\61\51\0\13\62\1\63"+
    "\47\62\16\0\1\64\64\0\1\22\45\0\1\23\14\0"+
    "\2\23\3\0\13\23\2\0\16\23\1\0\1\23\4\0"+
    "\1\23\14\0\2\23\3\0\1\23\1\65\2\23\1\66"+
    "\2\23\1\67\3\23\2\0\5\23\1\70\10\23\1\0"+
    "\1\23\4\0\1\23\14\0\2\23\3\0\2\23\1\71"+
    "\1\23\1\72\5\23\1\73\2\0\16\23\1\0\1\23"+
    "\4\0\1\23\14\0\2\23\3\0\10\23\1\74\2\23"+
    "\2\0\16\23\1\0\1\23\4\0\1\23\14\0\2\23"+
    "\3\0\1\23\1\75\5\23\1\76\3\23\2\0\16\23"+
    "\1\0\1\23\4\0\1\23\14\0\2\23\3\0\5\23"+
    "\1\77\1\100\2\23\1\101\1\23\2\0\1\23\1\102"+
    "\14\23\1\0\1\23\4\0\1\23\14\0\2\23\3\0"+
    "\2\23\1\103\4\23\1\104\3\23\2\0\16\23\1\0"+
    "\1\23\4\0\1\23\14\0\2\23\3\0\4\23\1\105"+
    "\5\23\1\106\2\0\16\23\1\0\1\23\4\0\1\23"+
    "\14\0\2\23\3\0\5\23\1\107\5\23\2\0\1\110"+
    "\6\23\1\111\6\23\1\0\1\23\4\0\1\23\14\0"+
    "\2\23\3\0\2\23\1\112\6\23\1\113\1\23\2\0"+
    "\16\23\1\0\1\23\4\0\1\23\14\0\2\23\3\0"+
    "\11\23\1\114\1\23\2\0\1\115\3\23\1\116\11\23"+
    "\1\0\1\23\4\0\1\42\35\0\1\42\24\0\1\23"+
    "\14\0\2\23\3\0\4\23\1\117\6\23\2\0\12\23"+
    "\1\120\3\23\1\0\1\23\4\0\1\23\14\0\2\23"+
    "\3\0\1\23\1\121\1\122\7\23\1\123\2\0\5\23"+
    "\1\124\10\23\1\0\1\23\4\0\1\23\14\0\2\23"+
    "\3\0\2\23\1\125\4\23\1\126\3\23\2\0\3\23"+
    "\1\127\12\23\1\0\1\23\4\0\1\23\14\0\2\23"+
    "\3\0\2\23\1\130\1\23\1\131\2\23\1\132\3\23"+
    "\2\0\16\23\1\0\1\23\4\0\1\23\14\0\2\23"+
    "\3\0\2\23\1\133\4\23\1\134\2\23\1\135\2\0"+
    "\16\23\1\0\1\23\4\0\1\23\14\0\2\23\3\0"+
    "\4\23\1\136\6\23\2\0\16\23\1\0\1\23\4\0"+
    "\1\23\14\0\2\23\3\0\2\23\1\137\1\23\1\140"+
    "\6\23\2\0\16\23\1\0\1\23\4\0\1\23\14\0"+
    "\2\23\3\0\4\23\1\141\6\23\2\0\16\23\1\0"+
    "\1\23\4\0\1\23\14\0\2\23\3\0\12\23\1\142"+
    "\2\0\16\23\1\0\1\23\4\0\1\143\14\0\2\23"+
    "\3\0\13\23\1\0\1\42\16\23\1\0\1\23\1\0"+
    "\17\61\1\144\43\61\16\0\1\145\47\0\1\23\14\0"+
    "\2\23\3\0\2\23\1\146\4\23\1\147\3\23\2\0"+
    "\16\23\1\0\1\23\4\0\1\23\14\0\2\23\3\0"+
    "\1\23\1\150\5\23\1\151\3\23\2\0\16\23\1\0"+
    "\1\23\4\0\1\23\14\0\2\23\3\0\13\23\2\0"+
    "\1\152\12\23\1\153\2\23\1\0\1\23\4\0\1\23"+
    "\14\0\2\23\3\0\13\23\2\0\3\23\1\154\12\23"+
    "\1\0\1\23\4\0\1\23\14\0\2\23\3\0\13\23"+
    "\2\0\15\23\1\155\1\0\1\23\4\0\1\23\14\0"+
    "\2\23\3\0\13\23\2\0\1\156\15\23\1\0\1\23"+
    "\4\0\1\23\14\0\2\23\3\0\1\157\12\23\2\0"+
    "\11\23\1\160\4\23\1\0\1\23\4\0\1\23\14\0"+
    "\2\23\3\0\13\23\2\0\15\23\1\161\1\0\1\23"+
    "\4\0\1\23\14\0\2\23\3\0\12\23\1\162\2\0"+
    "\16\23\1\0\1\23\4\0\1\23\14\0\2\23\3\0"+
    "\1\23\1\163\11\23\2\0\16\23\1\0\1\23\4\0"+
    "\1\23\14\0\2\23\3\0\4\23\1\164\6\23\2\0"+
    "\16\23\1\0\1\23\4\0\1\23\14\0\2\23\3\0"+
    "\4\23\1\165\6\23\2\0\16\23\1\0\1\23\4\0"+
    "\1\23\14\0\2\23\3\0\12\23\1\166\2\0\16\23"+
    "\1\0\1\23\4\0\1\23\14\0\2\23\3\0\13\23"+
    "\2\0\5\23\1\167\10\23\1\0\1\23\4\0\1\23"+
    "\14\0\2\23\3\0\6\23\1\170\4\23\2\0\16\23"+
    "\1\0\1\23\4\0\1\23\14\0\2\23\3\0\12\23"+
    "\1\171\2\0\16\23\1\0\1\23\4\0\1\23\14\0"+
    "\2\23\3\0\1\23\1\172\11\23\2\0\16\23\1\0"+
    "\1\23\4\0\1\23\14\0\2\23\3\0\1\23\1\173"+
    "\11\23\2\0\16\23\1\0\1\23\4\0\1\23\14\0"+
    "\2\23\3\0\1\174\12\23\2\0\16\23\1\0\1\23"+
    "\4\0\1\23\14\0\2\23\3\0\13\23\2\0\6\23"+
    "\1\175\7\23\1\0\1\23\4\0\1\23\14\0\2\23"+
    "\3\0\5\23\1\176\5\23\2\0\16\23\1\0\1\23"+
    "\4\0\1\23\14\0\2\23\3\0\13\23\2\0\5\23"+
    "\1\177\10\23\1\0\1\23\4\0\1\23\14\0\2\23"+
    "\3\0\7\23\1\200\3\23\2\0\4\23\1\201\11\23"+
    "\1\0\1\23\4\0\1\23\14\0\2\23\3\0\13\23"+
    "\2\0\11\23\1\202\4\23\1\0\1\23\4\0\1\23"+
    "\14\0\2\23\3\0\1\203\12\23\2\0\16\23\1\0"+
    "\1\23\4\0\1\23\14\0\2\23\3\0\7\23\1\204"+
    "\1\23\1\205\1\23\2\0\16\23\1\0\1\23\4\0"+
    "\1\23\14\0\2\23\3\0\7\23\1\206\3\23\2\0"+
    "\16\23\1\0\1\23\4\0\1\23\14\0\2\23\3\0"+
    "\13\23\2\0\5\23\1\207\10\23\1\0\1\23\4\0"+
    "\1\23\14\0\2\23\3\0\5\23\1\210\5\23\2\0"+
    "\16\23\1\0\1\23\4\0\1\23\14\0\2\23\3\0"+
    "\1\23\1\211\11\23\2\0\1\212\15\23\1\0\1\23"+
    "\4\0\1\23\14\0\2\23\3\0\1\23\1\213\11\23"+
    "\2\0\16\23\1\0\1\23\4\0\1\23\14\0\2\23"+
    "\3\0\11\23\1\214\1\23\2\0\16\23\1\0\1\23"+
    "\4\0\1\23\14\0\2\23\3\0\13\23\2\0\1\215"+
    "\5\23\1\216\7\23\1\0\1\23\4\0\1\23\14\0"+
    "\2\23\3\0\2\23\1\217\10\23\2\0\16\23\1\0"+
    "\1\23\4\0\1\23\14\0\2\23\3\0\1\23\1\220"+
    "\11\23\2\0\16\23\1\0\1\23\4\0\1\23\14\0"+
    "\2\23\3\0\11\23\1\221\1\23\2\0\16\23\1\0"+
    "\1\23\4\0\1\23\14\0\2\23\3\0\13\23\2\0"+
    "\1\222\15\23\1\0\1\23\4\0\1\23\14\0\2\23"+
    "\3\0\13\23\2\0\6\23\1\223\7\23\1\0\1\23"+
    "\4\0\1\23\14\0\2\23\3\0\13\23\2\0\4\23"+
    "\1\224\11\23\1\0\1\23\4\0\1\23\14\0\2\23"+
    "\3\0\11\23\1\225\1\23\2\0\4\23\1\226\2\23"+
    "\1\227\5\23\1\230\1\0\1\23\4\0\1\23\14\0"+
    "\2\23\3\0\13\23\2\0\13\23\1\231\2\23\1\0"+
    "\1\23\4\0\1\23\14\0\2\23\3\0\5\23\1\232"+
    "\5\23\2\0\16\23\1\0\1\23\4\0\1\23\14\0"+
    "\2\23\3\0\13\23\2\0\4\23\1\233\11\23\1\0"+
    "\1\23\4\0\1\23\14\0\2\23\3\0\10\23\1\234"+
    "\2\23\2\0\16\23\1\0\1\23\4\0\1\23\14\0"+
    "\2\23\3\0\11\23\1\235\1\23\2\0\16\23\1\0"+
    "\1\23\1\0\16\145\1\236\44\145\3\0\1\23\14\0"+
    "\2\23\3\0\3\23\1\237\7\23\2\0\16\23\1\0"+
    "\1\23\4\0\1\23\14\0\2\23\3\0\13\23\2\0"+
    "\1\240\15\23\1\0\1\23\4\0\1\23\14\0\2\23"+
    "\3\0\4\23\1\220\6\23\2\0\16\23\1\0\1\23"+
    "\4\0\1\23\14\0\2\23\3\0\13\23\2\0\1\241"+
    "\15\23\1\0\1\23\4\0\1\23\14\0\2\23\3\0"+
    "\13\23\2\0\3\23\1\242\12\23\1\0\1\23\4\0"+
    "\1\23\14\0\2\23\3\0\13\23\2\0\14\23\1\243"+
    "\1\23\1\0\1\23\4\0\1\23\14\0\2\23\3\0"+
    "\13\23\2\0\6\23\1\244\7\23\1\0\1\23\4\0"+
    "\1\23\14\0\2\23\3\0\2\23\1\160\10\23\2\0"+
    "\16\23\1\0\1\23\4\0\1\23\14\0\2\23\3\0"+
    "\13\23\2\0\11\23\1\245\4\23\1\0\1\23\4\0"+
    "\1\23\14\0\2\23\3\0\7\23\1\246\3\23\2\0"+
    "\16\23\1\0\1\23\4\0\1\23\14\0\2\23\3\0"+
    "\12\23\1\247\2\0\16\23\1\0\1\23\4\0\1\23"+
    "\14\0\2\23\3\0\12\23\1\250\2\0\16\23\1\0"+
    "\1\23\4\0\1\23\14\0\2\23\3\0\4\23\1\251"+
    "\6\23\2\0\16\23\1\0\1\23\4\0\1\23\14\0"+
    "\2\23\3\0\1\23\1\252\11\23\2\0\16\23\1\0"+
    "\1\23\4\0\1\23\14\0\2\23\3\0\13\23\2\0"+
    "\1\253\15\23\1\0\1\23\4\0\1\23\14\0\2\23"+
    "\3\0\4\23\1\254\6\23\2\0\16\23\1\0\1\23"+
    "\4\0\1\23\14\0\2\23\3\0\11\23\1\160\1\23"+
    "\2\0\16\23\1\0\1\23\4\0\1\23\14\0\2\23"+
    "\3\0\12\23\1\255\2\0\16\23\1\0\1\23\4\0"+
    "\1\23\14\0\2\23\3\0\13\23\2\0\1\256\15\23"+
    "\1\0\1\23\4\0\1\23\14\0\2\23\3\0\7\23"+
    "\1\257\3\23\2\0\16\23\1\0\1\23\4\0\1\23"+
    "\14\0\2\23\3\0\13\23\2\0\11\23\1\260\4\23"+
    "\1\0\1\23\4\0\1\23\14\0\2\23\3\0\1\23"+
    "\1\261\11\23\2\0\16\23\1\0\1\23\4\0\1\23"+
    "\14\0\2\23\3\0\13\23\2\0\7\23\1\262\6\23"+
    "\1\0\1\23\4\0\1\23\14\0\2\23\3\0\10\23"+
    "\1\263\2\23\2\0\16\23\1\0\1\23\4\0\1\23"+
    "\14\0\2\23\3\0\12\23\1\160\2\0\16\23\1\0"+
    "\1\23\4\0\1\23\14\0\2\23\3\0\5\23\1\264"+
    "\5\23\2\0\16\23\1\0\1\23\4\0\1\23\14\0"+
    "\2\23\3\0\12\23\1\265\2\0\16\23\1\0\1\23"+
    "\4\0\1\23\14\0\2\23\3\0\12\23\1\266\2\0"+
    "\16\23\1\0\1\23\4\0\1\23\14\0\2\23\3\0"+
    "\13\23\2\0\3\23\1\267\12\23\1\0\1\23\4\0"+
    "\1\23\14\0\2\23\3\0\11\23\1\270\1\23\2\0"+
    "\16\23\1\0\1\23\4\0\1\23\14\0\2\23\3\0"+
    "\11\23\1\271\1\23\2\0\16\23\1\0\1\23\4\0"+
    "\1\23\14\0\2\23\3\0\12\23\1\272\2\0\16\23"+
    "\1\0\1\23\4\0\1\23\14\0\2\23\3\0\4\23"+
    "\1\273\6\23\2\0\16\23\1\0\1\23\4\0\1\23"+
    "\14\0\2\23\3\0\5\23\1\274\5\23\2\0\16\23"+
    "\1\0\1\23\4\0\1\23\14\0\2\23\3\0\3\23"+
    "\1\275\7\23\2\0\16\23\1\0\1\23\4\0\1\23"+
    "\14\0\2\23\3\0\13\23\2\0\1\276\15\23\1\0"+
    "\1\23\4\0\1\23\14\0\2\23\3\0\13\23\2\0"+
    "\3\23\1\277\12\23\1\0\1\23\4\0\1\23\14\0"+
    "\2\23\3\0\2\23\1\300\10\23\2\0\16\23\1\0"+
    "\1\23\4\0\1\23\14\0\2\23\3\0\13\23\2\0"+
    "\1\301\15\23\1\0\1\23\4\0\1\23\14\0\2\23"+
    "\3\0\1\302\12\23\2\0\16\23\1\0\1\23\4\0"+
    "\1\23\14\0\2\23\3\0\13\23\2\0\4\23\1\303"+
    "\11\23\1\0\1\23\4\0\1\23\14\0\2\23\3\0"+
    "\7\23\1\304\3\23\2\0\16\23\1\0\1\23\4\0"+
    "\1\23\14\0\2\23\3\0\2\23\1\305\10\23\2\0"+
    "\16\23\1\0\1\23\4\0\1\23\14\0\2\23\3\0"+
    "\4\23\1\306\6\23\2\0\16\23\1\0\1\23\4\0"+
    "\1\23\14\0\2\23\3\0\4\23\1\307\5\23\1\310"+
    "\2\0\16\23\1\0\1\23\4\0\1\23\14\0\2\23"+
    "\3\0\4\23\1\311\6\23\2\0\16\23\1\0\1\23"+
    "\4\0\1\23\14\0\2\23\3\0\4\23\1\312\6\23"+
    "\2\0\16\23\1\0\1\23\4\0\1\23\14\0\2\23"+
    "\3\0\4\23\1\313\6\23\2\0\16\23\1\0\1\23"+
    "\4\0\1\23\14\0\2\23\3\0\12\23\1\314\2\0"+
    "\16\23\1\0\1\23\4\0\1\23\14\0\2\23\3\0"+
    "\1\315\12\23\2\0\16\23\1\0\1\23\4\0\1\23"+
    "\14\0\2\23\3\0\2\23\1\316\7\23\1\316\2\0"+
    "\16\23\1\0\1\23\4\0\1\23\14\0\2\23\3\0"+
    "\2\23\1\317\10\23\2\0\16\23\1\0\1\23\4\0"+
    "\1\23\14\0\2\23\3\0\11\23\1\320\1\23\2\0"+
    "\16\23\1\0\1\23\17\0\1\321\47\0\1\23\14\0"+
    "\2\23\3\0\1\23\1\322\11\23\2\0\16\23\1\0"+
    "\1\23\4\0\1\23\14\0\2\23\3\0\13\23\2\0"+
    "\3\23\1\323\12\23\1\0\1\23\4\0\1\23\14\0"+
    "\2\23\3\0\13\23\2\0\3\23\1\324\12\23\1\0"+
    "\1\23\4\0\1\23\14\0\2\23\3\0\4\23\1\325"+
    "\6\23\2\0\16\23\1\0\1\23\4\0\1\23\14\0"+
    "\2\23\3\0\13\23\2\0\6\23\1\326\7\23\1\0"+
    "\1\23\4\0\1\23\14\0\2\23\3\0\13\23\2\0"+
    "\11\23\1\327\4\23\1\0\1\23\4\0\1\23\14\0"+
    "\2\23\3\0\2\23\1\330\10\23\2\0\16\23\1\0"+
    "\1\23\4\0\1\23\14\0\2\23\3\0\13\23\2\0"+
    "\3\23\1\331\12\23\1\0\1\23\4\0\1\23\14\0"+
    "\2\23\3\0\13\23\2\0\13\23\1\332\2\23\1\0"+
    "\1\23\4\0\1\23\14\0\2\23\3\0\13\23\2\0"+
    "\1\160\15\23\1\0\1\23\4\0\1\23\14\0\2\23"+
    "\3\0\13\23\2\0\6\23\1\333\7\23\1\0\1\23"+
    "\4\0\1\23\14\0\2\23\3\0\7\23\1\334\3\23"+
    "\2\0\16\23\1\0\1\23\4\0\1\23\14\0\2\23"+
    "\3\0\13\23\2\0\1\23\1\335\14\23\1\0\1\23"+
    "\4\0\1\23\14\0\2\23\3\0\13\23\2\0\3\23"+
    "\1\336\12\23\1\0\1\23\4\0\1\23\14\0\2\23"+
    "\3\0\13\23\2\0\3\23\1\337\12\23\1\0\1\23"+
    "\4\0\1\23\14\0\2\23\3\0\4\23\1\340\6\23"+
    "\2\0\16\23\1\0\1\23\4\0\1\23\14\0\2\23"+
    "\3\0\4\23\1\341\5\23\1\160\2\0\16\23\1\0"+
    "\1\23\4\0\1\23\14\0\2\23\3\0\7\23\1\342"+
    "\3\23\2\0\16\23\1\0\1\23\4\0\1\23\14\0"+
    "\2\23\3\0\1\23\1\343\11\23\2\0\16\23\1\0"+
    "\1\23\4\0\1\23\14\0\2\23\3\0\13\23\2\0"+
    "\6\23\1\344\7\23\1\0\1\23\4\0\1\23\14\0"+
    "\2\23\3\0\7\23\1\345\3\23\2\0\16\23\1\0"+
    "\1\23\4\0\1\23\14\0\2\23\3\0\13\23\2\0"+
    "\6\23\1\346\7\23\1\0\1\23\4\0\1\23\14\0"+
    "\2\23\3\0\1\23\1\347\11\23\2\0\16\23\1\0"+
    "\1\23\4\0\1\23\14\0\2\23\3\0\13\23\2\0"+
    "\6\23\1\350\7\23\1\0\1\23\4\0\1\23\14\0"+
    "\2\23\3\0\12\23\1\351\2\0\16\23\1\0\1\23"+
    "\4\0\1\23\14\0\2\23\3\0\13\23\2\0\6\23"+
    "\1\352\7\23\1\0\1\23\4\0\1\23\14\0\2\23"+
    "\3\0\7\23\1\353\3\23\2\0\16\23\1\0\1\23"+
    "\4\0\1\23\14\0\2\23\3\0\2\23\1\354\10\23"+
    "\2\0\16\23\1\0\1\23\4\0\1\23\14\0\2\23"+
    "\3\0\13\23\2\0\6\23\1\355\7\23\1\0\1\23"+
    "\4\0\1\23\14\0\2\23\3\0\4\23\1\356\6\23"+
    "\2\0\16\23\1\0\1\23\4\0\1\23\14\0\2\23"+
    "\3\0\13\23\2\0\4\23\1\357\11\23\1\0\1\23"+
    "\4\0\1\23\14\0\2\23\3\0\2\23\1\360\10\23"+
    "\2\0\16\23\1\0\1\23\4\0\1\23\14\0\2\23"+
    "\3\0\13\23\2\0\6\23\1\361\7\23\1\0\1\23"+
    "\4\0\1\23\14\0\2\23\3\0\2\23\1\272\7\23"+
    "\1\272\2\0\16\23\1\0\1\23\4\0\1\23\14\0"+
    "\2\23\3\0\13\23\2\0\4\23\1\362\11\23\1\0"+
    "\1\23\4\0\1\23\14\0\2\23\3\0\6\23\1\363"+
    "\4\23\2\0\16\23\1\0\1\23\4\0\1\23\14\0"+
    "\2\23\3\0\10\23\1\364\2\23\2\0\16\23\1\0"+
    "\1\23\4\0\1\23\14\0\2\23\3\0\13\23\2\0"+
    "\1\365\15\23\1\0\1\23\4\0\1\23\14\0\2\23"+
    "\3\0\13\23\2\0\3\23\1\366\12\23\1\0\1\23"+
    "\4\0\1\23\14\0\2\23\3\0\13\23\2\0\13\23"+
    "\1\367\2\23\1\0\1\23\4\0\1\23\14\0\2\23"+
    "\3\0\13\23\2\0\5\23\1\370\10\23\1\0\1\23"+
    "\4\0\1\23\14\0\2\23\3\0\1\23\1\371\11\23"+
    "\2\0\16\23\1\0\1\23\4\0\1\23\14\0\2\23"+
    "\3\0\1\23\1\372\11\23\2\0\16\23\1\0\1\23"+
    "\4\0\1\23\14\0\2\23\3\0\4\23\1\373\6\23"+
    "\2\0\16\23\1\0\1\23\4\0\1\23\14\0\2\23"+
    "\3\0\2\23\1\374\10\23\2\0\16\23\1\0\1\23"+
    "\4\0\1\23\14\0\2\23\3\0\2\23\1\375\10\23"+
    "\2\0\16\23\1\0\1\23\17\0\1\144\47\0\1\23"+
    "\14\0\2\23\3\0\4\23\1\376\6\23\2\0\16\23"+
    "\1\0\1\23\4\0\1\23\14\0\2\23\3\0\13\23"+
    "\2\0\6\23\1\377\7\23\1\0\1\23\4\0\1\23"+
    "\14\0\2\23\3\0\13\23\2\0\6\23\1\u0100\7\23"+
    "\1\0\1\23\4\0\1\23\14\0\2\23\3\0\1\23"+
    "\1\u0101\11\23\2\0\16\23\1\0\1\23\4\0\1\23"+
    "\14\0\2\23\3\0\13\23\2\0\5\23\1\u0102\10\23"+
    "\1\0\1\23\4\0\1\23\14\0\2\23\3\0\2\23"+
    "\1\u0103\10\23\2\0\16\23\1\0\1\23\4\0\1\23"+
    "\14\0\2\23\3\0\5\23\1\u0104\5\23\2\0\16\23"+
    "\1\0\1\23\4\0\1\23\14\0\2\23\3\0\12\23"+
    "\1\u0105\2\0\16\23\1\0\1\23\4\0\1\23\14\0"+
    "\2\23\3\0\13\23\2\0\3\23\1\u0106\12\23\1\0"+
    "\1\23\4\0\1\23\14\0\2\23\3\0\7\23\1\u0107"+
    "\3\23\2\0\11\23\1\u0108\4\23\1\0\1\23\4\0"+
    "\1\23\14\0\2\23\3\0\11\23\1\u0109\1\23\2\0"+
    "\16\23\1\0\1\23\4\0\1\23\14\0\2\23\3\0"+
    "\4\23\1\u010a\6\23\2\0\16\23\1\0\1\23\4\0"+
    "\1\23\14\0\2\23\3\0\2\23\1\u010b\10\23\2\0"+
    "\16\23\1\0\1\23\4\0\1\23\14\0\2\23\3\0"+
    "\1\23\1\u010c\11\23\2\0\16\23\1\0\1\23\4\0"+
    "\1\23\14\0\2\23\3\0\10\23\1\u010d\2\23\2\0"+
    "\16\23\1\0\1\23\4\0\1\23\14\0\2\23\3\0"+
    "\13\23\2\0\11\23\1\u010e\4\23\1\0\1\23\4\0"+
    "\1\23\14\0\2\23\3\0\5\23\1\u010f\5\23\2\0"+
    "\16\23\1\0\1\23\4\0\1\23\14\0\2\23\3\0"+
    "\2\23\1\u0110\10\23\2\0\16\23\1\0\1\23\4\0"+
    "\1\23\14\0\2\23\3\0\7\23\1\u0111\3\23\2\0"+
    "\16\23\1\0\1\23\4\0\1\23\14\0\2\23\3\0"+
    "\13\23\2\0\1\u0112\15\23\1\0\1\23\4\0\1\23"+
    "\14\0\2\23\3\0\7\23\1\u0113\3\23\2\0\16\23"+
    "\1\0\1\23\4\0\1\23\14\0\2\23\3\0\4\23"+
    "\1\267\6\23\2\0\16\23\1\0\1\23\4\0\1\23"+
    "\14\0\2\23\3\0\7\23\1\u0114\3\23\2\0\16\23"+
    "\1\0\1\23\4\0\1\23\14\0\2\23\3\0\2\23"+
    "\1\u0115\10\23\2\0\16\23\1\0\1\23\4\0\1\23"+
    "\14\0\2\23\3\0\13\23\2\0\1\u0116\15\23\1\0"+
    "\1\23\4\0\1\23\14\0\2\23\3\0\13\23\2\0"+
    "\6\23\1\u0117\7\23\1\0\1\23\4\0\1\23\14\0"+
    "\2\23\3\0\1\23\1\u0118\7\23\1\u0119\1\23\2\0"+
    "\16\23\1\0\1\23\4\0\1\23\14\0\2\23\3\0"+
    "\1\23\1\u011a\11\23\2\0\16\23\1\0\1\23\4\0"+
    "\1\23\14\0\2\23\3\0\7\23\1\u011b\3\23\2\0"+
    "\16\23\1\0\1\23\4\0\1\23\14\0\2\23\3\0"+
    "\1\u011c\12\23\2\0\16\23\1\0\1\23\4\0\1\23"+
    "\14\0\2\23\3\0\13\23\2\0\12\23\1\u011d\3\23"+
    "\1\0\1\23\4\0\1\23\14\0\2\23\3\0\12\23"+
    "\1\u011e\2\0\16\23\1\0\1\23\4\0\1\23\14\0"+
    "\2\23\3\0\11\23\1\u011f\1\23\2\0\16\23\1\0"+
    "\1\23\4\0\1\23\14\0\2\23\3\0\13\23\2\0"+
    "\3\23\1\u0120\12\23\1\0\1\23\4\0\1\23\14\0"+
    "\2\23\3\0\12\23\1\u0121\2\0\16\23\1\0\1\23"+
    "\4\0\1\23\14\0\2\23\3\0\13\23\2\0\3\23"+
    "\1\u0122\12\23\1\0\1\23\4\0\1\23\14\0\2\23"+
    "\3\0\11\23\1\u0123\1\23\2\0\16\23\1\0\1\23"+
    "\4\0\1\23\14\0\2\23\3\0\13\23\2\0\6\23"+
    "\1\u0124\7\23\1\0\1\23\4\0\1\23\14\0\2\23"+
    "\3\0\1\23\1\u0125\11\23\2\0\16\23\1\0\1\23"+
    "\4\0\1\23\14\0\2\23\3\0\5\23\1\263\5\23"+
    "\2\0\16\23\1\0\1\23\4\0\1\23\14\0\2\23"+
    "\3\0\13\23\2\0\2\23\1\160\13\23\1\0\1\23"+
    "\4\0\1\23\14\0\2\23\3\0\5\23\1\u0126\5\23"+
    "\2\0\16\23\1\0\1\23\4\0\1\23\14\0\2\23"+
    "\3\0\6\23\1\u0127\4\23\2\0\16\23\1\0\1\23"+
    "\4\0\1\23\14\0\2\23\3\0\13\23\2\0\7\23"+
    "\1\u0128\6\23\1\0\1\23\4\0\1\23\14\0\2\23"+
    "\3\0\13\23\2\0\6\23\1\u0129\7\23\1\0\1\23"+
    "\4\0\1\23\14\0\2\23\3\0\1\u012a\12\23\2\0"+
    "\16\23\1\0\1\23\4\0\1\23\14\0\2\23\3\0"+
    "\13\23\2\0\2\23\1\u012b\13\23\1\0\1\23\4\0"+
    "\1\23\14\0\2\23\3\0\13\23\2\0\6\23\1\u012c"+
    "\7\23\1\0\1\23\4\0\1\23\14\0\2\23\3\0"+
    "\13\23\2\0\6\23\1\u012d\7\23\1\0\1\23\4\0"+
    "\1\23\14\0\2\23\3\0\13\23\2\0\1\23\1\u012e"+
    "\14\23\1\0\1\23\4\0\1\23\14\0\2\23\3\0"+
    "\12\23\1\u012f\2\0\16\23\1\0\1\23\4\0\1\23"+
    "\14\0\2\23\3\0\11\23\1\155\1\23\2\0\16\23"+
    "\1\0\1\23\4\0\1\23\14\0\2\23\3\0\1\23"+
    "\1\255\11\23\2\0\16\23\1\0\1\23\4\0\1\23"+
    "\14\0\2\23\3\0\1\23\1\u0130\11\23\2\0\16\23"+
    "\1\0\1\23\4\0\1\23\14\0\2\23\3\0\4\23"+
    "\1\u0131\6\23\2\0\16\23\1\0\1\23\4\0\1\23"+
    "\14\0\2\23\3\0\11\23\1\u0132\1\23\2\0\16\23"+
    "\1\0\1\23\4\0\1\23\14\0\2\23\3\0\12\23"+
    "\1\u0133\2\0\16\23\1\0\1\23\4\0\1\23\14\0"+
    "\2\23\3\0\7\23\1\u0134\3\23\2\0\16\23\1\0"+
    "\1\23\4\0\1\23\14\0\2\23\3\0\13\23\2\0"+
    "\1\u0135\15\23\1\0\1\23\4\0\1\23\14\0\2\23"+
    "\3\0\13\23\2\0\1\u0136\15\23\1\0\1\23\4\0"+
    "\1\23\14\0\2\23\3\0\4\23\1\u0137\6\23\2\0"+
    "\16\23\1\0\1\23\4\0\1\23\14\0\2\23\3\0"+
    "\13\23\2\0\7\23\1\u011b\6\23\1\0\1\23\4\0"+
    "\1\23\14\0\2\23\3\0\13\23\2\0\1\u0138\15\23"+
    "\1\0\1\23\4\0\1\23\14\0\2\23\3\0\10\23"+
    "\1\u0139\2\23\2\0\16\23\1\0\1\23\4\0\1\23"+
    "\14\0\2\23\3\0\4\23\1\u013a\6\23\2\0\16\23"+
    "\1\0\1\23\4\0\1\23\14\0\2\23\3\0\2\23"+
    "\1\u013b\2\23\1\u013c\2\23\1\u013d\2\23\2\0\14\23"+
    "\1\u013e\1\23\1\0\1\23\4\0\1\23\14\0\2\23"+
    "\3\0\7\23\1\u013f\3\23\2\0\16\23\1\0\1\23"+
    "\4\0\1\23\14\0\2\23\3\0\12\23\1\u0140\2\0"+
    "\16\23\1\0\1\23\4\0\1\23\14\0\2\23\3\0"+
    "\13\23\2\0\6\23\1\u0141\7\23\1\0\1\23\4\0"+
    "\1\23\14\0\2\23\3\0\4\23\1\u0142\6\23\2\0"+
    "\16\23\1\0\1\23\4\0\1\23\14\0\2\23\3\0"+
    "\1\23\1\u0143\11\23\2\0\16\23\1\0\1\23\4\0"+
    "\1\23\14\0\2\23\3\0\12\23\1\u0144\2\0\16\23"+
    "\1\0\1\23\4\0\1\23\14\0\2\23\3\0\12\23"+
    "\1\u0145\2\0\16\23\1\0\1\23\4\0\1\23\14\0"+
    "\2\23\3\0\13\23\2\0\6\23\1\u0146\7\23\1\0"+
    "\1\23\4\0\1\23\14\0\2\23\3\0\7\23\1\u0147"+
    "\3\23\2\0\16\23\1\0\1\23\4\0\1\23\14\0"+
    "\2\23\3\0\13\23\2\0\3\23\1\u0148\12\23\1\0"+
    "\1\23\4\0\1\23\14\0\2\23\3\0\13\23\2\0"+
    "\11\23\1\u0149\4\23\1\0\1\23\4\0\1\23\14\0"+
    "\2\23\3\0\4\23\1\u014a\5\23\1\u014b\2\0\16\23"+
    "\1\0\1\23\4\0\1\23\14\0\2\23\3\0\4\23"+
    "\1\u014c\6\23\2\0\16\23\1\0\1\23\4\0\1\23"+
    "\14\0\2\23\3\0\4\23\1\u014d\6\23\2\0\16\23"+
    "\1\0\1\23\4\0\1\23\14\0\2\23\3\0\11\23"+
    "\1\u014e\1\23\2\0\16\23\1\0\1\23\4\0\1\23"+
    "\14\0\2\23\3\0\13\23\2\0\4\23\1\u014f\11\23"+
    "\1\0\1\23\4\0\1\23\14\0\2\23\3\0\13\23"+
    "\2\0\1\u0150\15\23\1\0\1\23\4\0\1\23\14\0"+
    "\2\23\3\0\13\23\2\0\12\23\1\u0151\3\23\1\0"+
    "\1\23\4\0\1\23\14\0\2\23\3\0\7\23\1\u0152"+
    "\3\23\2\0\16\23\1\0\1\23\4\0\1\23\14\0"+
    "\2\23\3\0\13\23\2\0\10\23\1\u0153\5\23\1\0"+
    "\1\23\4\0\1\23\14\0\2\23\3\0\1\23\1\u0154"+
    "\11\23\2\0\16\23\1\0\1\23\4\0\1\23\14\0"+
    "\2\23\3\0\7\23\1\u0155\3\23\2\0\16\23\1\0"+
    "\1\23\4\0\1\23\14\0\2\23\3\0\13\23\2\0"+
    "\4\23\1\351\11\23\1\0\1\23\4\0\1\23\14\0"+
    "\2\23\3\0\12\23\1\u0156\2\0\16\23\1\0\1\23"+
    "\4\0\1\23\14\0\2\23\3\0\1\23\1\u0157\11\23"+
    "\2\0\16\23\1\0\1\23\4\0\1\23\14\0\2\23"+
    "\3\0\1\23\1\323\11\23\2\0\16\23\1\0\1\23"+
    "\4\0\1\23\14\0\2\23\3\0\13\23\2\0\3\23"+
    "\1\u0158\12\23\1\0\1\23\4\0\1\23\14\0\2\23"+
    "\3\0\13\23\2\0\6\23\1\u0159\7\23\1\0\1\23"+
    "\4\0\1\23\14\0\2\23\3\0\1\23\1\u015a\11\23"+
    "\2\0\16\23\1\0\1\23\4\0\1\23\14\0\2\23"+
    "\3\0\13\23\2\0\6\23\1\u015b\7\23\1\0\1\23"+
    "\4\0\1\23\14\0\2\23\3\0\13\23\2\0\15\23"+
    "\1\u015c\1\0\1\23\4\0\1\23\14\0\2\23\3\0"+
    "\1\23\1\u011d\11\23\2\0\16\23\1\0\1\23\4\0"+
    "\1\23\14\0\2\23\3\0\10\23\1\u015d\2\23\2\0"+
    "\16\23\1\0\1\23\4\0\1\23\14\0\2\23\3\0"+
    "\13\23\2\0\5\23\1\u015e\10\23\1\0\1\23\4\0"+
    "\1\23\14\0\2\23\3\0\2\23\1\u015f\10\23\2\0"+
    "\16\23\1\0\1\23\4\0\1\23\14\0\2\23\3\0"+
    "\4\23\1\u0160\6\23\2\0\16\23\1\0\1\23\4\0"+
    "\1\23\14\0\2\23\3\0\3\23\1\u0161\7\23\2\0"+
    "\16\23\1\0\1\23\4\0\1\23\14\0\2\23\3\0"+
    "\13\23\2\0\7\23\1\u0162\6\23\1\0\1\23\4\0"+
    "\1\23\14\0\2\23\3\0\2\23\1\u0163\10\23\2\0"+
    "\16\23\1\0\1\23\4\0\1\23\14\0\2\23\3\0"+
    "\7\23\1\u0164\3\23\2\0\16\23\1\0\1\23\4\0"+
    "\1\23\14\0\2\23\3\0\13\23\2\0\6\23\1\u0165"+
    "\7\23\1\0\1\23\4\0\1\23\14\0\2\23\3\0"+
    "\13\23\2\0\6\23\1\u0166\7\23\1\0\1\23\4\0"+
    "\1\23\14\0\2\23\3\0\2\23\1\u0167\10\23\2\0"+
    "\16\23\1\0\1\23\4\0\1\23\14\0\2\23\3\0"+
    "\6\23\1\u0168\4\23\2\0\16\23\1\0\1\23\4\0"+
    "\1\23\14\0\2\23\3\0\12\23\1\u0169\2\0\16\23"+
    "\1\0\1\23\4\0\1\23\14\0\2\23\3\0\1\23"+
    "\1\u014b\11\23\2\0\16\23\1\0\1\23\4\0\1\23"+
    "\14\0\2\23\3\0\1\23\1\u016a\11\23\2\0\16\23"+
    "\1\0\1\23\4\0\1\23\14\0\2\23\3\0\2\23"+
    "\1\u016b\10\23\2\0\16\23\1\0\1\23\4\0\1\23"+
    "\14\0\2\23\3\0\13\23\2\0\5\23\1\u016c\10\23"+
    "\1\0\1\23\4\0\1\23\14\0\2\23\3\0\4\23"+
    "\1\u016d\6\23\2\0\16\23\1\0\1\23\4\0\1\23"+
    "\14\0\2\23\3\0\13\23\2\0\1\u016e\15\23\1\0"+
    "\1\23\4\0\1\23\14\0\2\23\3\0\13\23\2\0"+
    "\5\23\1\u016f\10\23\1\0\1\23\4\0\1\23\14\0"+
    "\2\23\3\0\12\23\1\u0170\2\0\16\23\1\0\1\23"+
    "\4\0\1\23\14\0\2\23\3\0\2\23\1\u0104\10\23"+
    "\2\0\16\23\1\0\1\23\4\0\1\23\14\0\2\23"+
    "\3\0\2\23\1\272\10\23\2\0\16\23\1\0\1\23"+
    "\4\0\1\23\14\0\2\23\3\0\13\23\2\0\6\23"+
    "\1\u0171\7\23\1\0\1\23\4\0\1\23\14\0\2\23"+
    "\3\0\13\23\2\0\7\23\1\u0172\6\23\1\0\1\23"+
    "\4\0\1\23\14\0\2\23\3\0\13\23\2\0\6\23"+
    "\1\u0173\7\23\1\0\1\23\4\0\1\23\14\0\2\23"+
    "\3\0\13\23\2\0\7\23\1\u0174\6\23\1\0\1\23"+
    "\4\0\1\23\14\0\2\23\3\0\12\23\1\u0175\2\0"+
    "\16\23\1\0\1\23\4\0\1\23\14\0\2\23\3\0"+
    "\13\23\2\0\15\23\1\u0176\1\0\1\23\4\0\1\23"+
    "\14\0\2\23\3\0\1\23\1\u0177\11\23\2\0\16\23"+
    "\1\0\1\23\4\0\1\23\14\0\2\23\3\0\5\23"+
    "\1\u0178\5\23\2\0\16\23\1\0\1\23\4\0\1\23"+
    "\14\0\2\23\3\0\10\23\1\u0179\2\23\2\0\16\23"+
    "\1\0\1\23\4\0\1\23\14\0\2\23\3\0\13\23"+
    "\2\0\12\23\1\u017a\3\23\1\0\1\23\4\0\1\23"+
    "\14\0\2\23\3\0\13\23\2\0\3\23\1\u017b\12\23"+
    "\1\0\1\23\4\0\1\23\14\0\2\23\3\0\10\23"+
    "\1\u017c\2\23\2\0\16\23\1\0\1\23\4\0\1\23"+
    "\14\0\2\23\3\0\13\23\2\0\1\u017d\15\23\1\0"+
    "\1\23\4\0\1\23\14\0\2\23\3\0\10\23\1\u017e"+
    "\2\23\2\0\14\23\1\u017f\1\23\1\0\1\23\4\0"+
    "\1\23\14\0\2\23\3\0\13\23\2\0\11\23\1\u0180"+
    "\4\23\1\0\1\23\4\0\1\23\14\0\2\23\3\0"+
    "\10\23\1\u0181\2\23\2\0\16\23\1\0\1\23\4\0"+
    "\1\23\14\0\2\23\3\0\4\23\1\u0182\6\23\2\0"+
    "\16\23\1\0\1\23\4\0\1\23\14\0\2\23\3\0"+
    "\13\23\2\0\6\23\1\u0183\7\23\1\0\1\23\4\0"+
    "\1\23\14\0\2\23\3\0\7\23\1\u0184\3\23\2\0"+
    "\16\23\1\0\1\23\4\0\1\23\14\0\2\23\3\0"+
    "\2\23\1\u0185\10\23\2\0\16\23\1\0\1\23\4\0"+
    "\1\23\14\0\2\23\3\0\12\23\1\u0186\2\0\16\23"+
    "\1\0\1\23\4\0\1\23\14\0\2\23\3\0\13\23"+
    "\2\0\4\23\1\u0187\11\23\1\0\1\23\4\0\1\23"+
    "\14\0\2\23\3\0\13\23\2\0\6\23\1\u0188\7\23"+
    "\1\0\1\23\4\0\1\23\14\0\2\23\3\0\7\23"+
    "\1\u0189\3\23\2\0\16\23\1\0\1\23\4\0\1\23"+
    "\14\0\2\23\3\0\13\23\2\0\13\23\1\u018a\2\23"+
    "\1\0\1\23\4\0\1\23\14\0\2\23\3\0\5\23"+
    "\1\u018b\5\23\2\0\16\23\1\0\1\23\4\0\1\23"+
    "\14\0\2\23\3\0\1\23\1\u018c\11\23\2\0\16\23"+
    "\1\0\1\23\4\0\1\23\14\0\2\23\3\0\2\23"+
    "\1\u018d\10\23\2\0\16\23\1\0\1\23\4\0\1\23"+
    "\14\0\2\23\3\0\1\23\1\u018e\11\23\2\0\16\23"+
    "\1\0\1\23\4\0\1\23\14\0\2\23\3\0\13\23"+
    "\2\0\3\23\1\u018f\12\23\1\0\1\23\4\0\1\23"+
    "\14\0\2\23\3\0\12\23\1\u0190\2\0\16\23\1\0"+
    "\1\23\4\0\1\23\14\0\2\23\3\0\2\23\1\u0191"+
    "\10\23\2\0\16\23\1\0\1\23\4\0\1\23\14\0"+
    "\2\23\3\0\10\23\1\u0192\2\23\2\0\16\23\1\0"+
    "\1\23\4\0\1\23\14\0\2\23\3\0\2\23\1\u0193"+
    "\10\23\2\0\16\23\1\0\1\23\4\0\1\23\14\0"+
    "\2\23\3\0\13\23\2\0\3\23\1\u0194\12\23\1\0"+
    "\1\23\4\0\1\23\14\0\2\23\3\0\13\23\2\0"+
    "\15\23\1\u0195\1\0\1\23\4\0\1\23\14\0\2\23"+
    "\3\0\13\23\2\0\3\23\1\u0196\12\23\1\0\1\23"+
    "\4\0\1\23\14\0\2\23\3\0\2\23\1\u0197\10\23"+
    "\2\0\16\23\1\0\1\23\4\0\1\23\14\0\2\23"+
    "\3\0\4\23\1\u0198\6\23\2\0\16\23\1\0\1\23"+
    "\4\0\1\23\14\0\2\23\3\0\12\23\1\u0199\2\0"+
    "\16\23\1\0\1\23\4\0\1\23\14\0\2\23\3\0"+
    "\13\23\2\0\15\23\1\u019a\1\0\1\23\4\0\1\23"+
    "\14\0\2\23\3\0\1\23\1\u019b\11\23\2\0\16\23"+
    "\1\0\1\23\4\0\1\23\14\0\2\23\3\0\1\u019c"+
    "\12\23\2\0\16\23\1\0\1\23\4\0\1\23\14\0"+
    "\2\23\3\0\4\23\1\u019d\6\23\2\0\16\23\1\0"+
    "\1\23\4\0\1\23\14\0\2\23\3\0\1\23\1\u019e"+
    "\11\23\2\0\16\23\1\0\1\23\4\0\1\23\14\0"+
    "\2\23\3\0\11\23\1\u019f\1\23\2\0\16\23\1\0"+
    "\1\23\4\0\1\23\14\0\2\23\3\0\13\23\2\0"+
    "\3\23\1\u01a0\12\23\1\0\1\23\4\0\1\23\14\0"+
    "\2\23\3\0\13\23\2\0\7\23\1\u01a1\6\23\1\0"+
    "\1\23\4\0\1\23\14\0\2\23\3\0\12\23\1\u01a2"+
    "\2\0\16\23\1\0\1\23\4\0\1\23\14\0\2\23"+
    "\3\0\13\23\2\0\12\23\1\u01a3\3\23\1\0\1\23"+
    "\4\0\1\23\14\0\2\23\3\0\12\23\1\u01a4\2\0"+
    "\16\23\1\0\1\23\4\0\1\23\14\0\2\23\3\0"+
    "\2\23\1\u01a5\10\23\2\0\16\23\1\0\1\23\4\0"+
    "\1\23\14\0\2\23\3\0\10\23\1\u01a6\2\23\2\0"+
    "\16\23\1\0\1\23\4\0\1\23\14\0\2\23\3\0"+
    "\2\23\1\u01a7\10\23\2\0\16\23\1\0\1\23\4\0"+
    "\1\23\14\0\2\23\3\0\2\23\1\u012a\10\23\2\0"+
    "\16\23\1\0\1\23\4\0\1\23\14\0\2\23\3\0"+
    "\13\23\2\0\3\23\1\u01a8\12\23\1\0\1\23\4\0"+
    "\1\23\14\0\2\23\3\0\13\23\2\0\6\23\1\u01a9"+
    "\7\23\1\0\1\23\4\0\1\23\14\0\2\23\3\0"+
    "\4\23\1\u01aa\6\23\2\0\16\23\1\0\1\23\4\0"+
    "\1\23\14\0\2\23\3\0\2\23\1\u01ab\10\23\2\0"+
    "\16\23\1\0\1\23\4\0\1\23\14\0\2\23\3\0"+
    "\12\23\1\u01ac\2\0\16\23\1\0\1\23\4\0\1\23"+
    "\14\0\2\23\3\0\7\23\1\u01ad\3\23\2\0\16\23"+
    "\1\0\1\23\4\0\1\23\14\0\2\23\3\0\5\23"+
    "\1\u01ae\5\23\2\0\16\23\1\0\1\23\4\0\1\23"+
    "\14\0\2\23\3\0\10\23\1\u01af\2\23\2\0\16\23"+
    "\1\0\1\23\4\0\1\23\14\0\2\23\3\0\13\23"+
    "\2\0\6\23\1\u01b0\7\23\1\0\1\23\4\0\1\23"+
    "\14\0\2\23\3\0\12\23\1\u01b1\2\0\16\23\1\0"+
    "\1\23\4\0\1\23\14\0\2\23\3\0\13\23\2\0"+
    "\6\23\1\u01b2\7\23\1\0\1\23\4\0\1\23\14\0"+
    "\2\23\3\0\7\23\1\u01b3\3\23\2\0\16\23\1\0"+
    "\1\23\4\0\1\23\14\0\2\23\3\0\10\23\1\u01b4"+
    "\2\23\2\0\16\23\1\0\1\23\4\0\1\23\14\0"+
    "\2\23\3\0\2\23\1\u019e\10\23\2\0\16\23\1\0"+
    "\1\23\4\0\1\23\14\0\2\23\3\0\4\23\1\u0143"+
    "\6\23\2\0\16\23\1\0\1\23\4\0\1\23\14\0"+
    "\2\23\3\0\1\23\1\u01b5\11\23\2\0\16\23\1\0"+
    "\1\23\4\0\1\23\14\0\2\23\3\0\1\23\1\u01b6"+
    "\11\23\2\0\16\23\1\0\1\23\4\0\1\23\14\0"+
    "\2\23\3\0\4\23\1\u0194\6\23\2\0\16\23\1\0"+
    "\1\23\4\0\1\23\14\0\2\23\3\0\13\23\2\0"+
    "\1\u01b7\15\23\1\0\1\23\4\0\1\23\14\0\2\23"+
    "\3\0\13\23\2\0\15\23\1\u01b8\1\0\1\23\4\0"+
    "\1\23\14\0\2\23\3\0\13\23\2\0\1\u01b9\15\23"+
    "\1\0\1\23\4\0\1\23\14\0\2\23\3\0\2\23"+
    "\1\u01ba\10\23\2\0\16\23\1\0\1\23\4\0\1\23"+
    "\14\0\2\23\3\0\13\23\2\0\11\23\1\u01bb\4\23"+
    "\1\0\1\23\4\0\1\23\14\0\2\23\3\0\13\23"+
    "\2\0\6\23\1\u01bc\7\23\1\0\1\23\4\0\1\23"+
    "\14\0\2\23\3\0\5\23\1\u01aa\5\23\2\0\16\23"+
    "\1\0\1\23\4\0\1\23\14\0\2\23\3\0\13\23"+
    "\2\0\3\23\1\u01bd\12\23\1\0\1\23\4\0\1\23"+
    "\14\0\2\23\3\0\13\23\2\0\1\u01be\15\23\1\0"+
    "\1\23\4\0\1\23\14\0\2\23\3\0\10\23\1\u01bf"+
    "\2\23\2\0\16\23\1\0\1\23\4\0\1\23\14\0"+
    "\2\23\3\0\2\23\1\u01c0\10\23\2\0\16\23\1\0"+
    "\1\23\4\0\1\23\14\0\2\23\3\0\5\23\1\u01c1"+
    "\5\23\2\0\16\23\1\0\1\23\4\0\1\23\14\0"+
    "\2\23\3\0\13\23\2\0\13\23\1\u01c2\2\23\1\0"+
    "\1\23\4\0\1\23\14\0\2\23\3\0\10\23\1\u01c3"+
    "\2\23\2\0\14\23\1\u017f\1\23\1\0\1\23\4\0"+
    "\1\23\14\0\2\23\3\0\13\23\2\0\1\u01c4\15\23"+
    "\1\0\1\23\4\0\1\23\14\0\2\23\3\0\11\23"+
    "\1\u01c5\1\23\2\0\16\23\1\0\1\23\4\0\1\23"+
    "\14\0\2\23\3\0\2\23\1\u01c6\10\23\2\0\16\23"+
    "\1\0\1\23\4\0\1\23\14\0\2\23\3\0\13\23"+
    "\2\0\11\23\1\u01c7\4\23\1\0\1\23\4\0\1\23"+
    "\14\0\2\23\3\0\13\23\2\0\3\23\1\u01c8\12\23"+
    "\1\0\1\23\4\0\1\23\14\0\2\23\3\0\12\23"+
    "\1\u01c9\2\0\16\23\1\0\1\23\4\0\1\23\14\0"+
    "\2\23\3\0\13\23\2\0\3\23\1\u01ca\12\23\1\0"+
    "\1\23\4\0\1\23\14\0\2\23\3\0\13\23\2\0"+
    "\6\23\1\u01cb\7\23\1\0\1\23\4\0\1\23\14\0"+
    "\2\23\3\0\12\23\1\u01cc\2\0\16\23\1\0\1\23"+
    "\4\0\1\23\14\0\2\23\3\0\13\23\2\0\11\23"+
    "\1\u01cd\4\23\1\0\1\23\4\0\1\23\14\0\2\23"+
    "\3\0\2\23\1\u0150\10\23\2\0\16\23\1\0\1\23"+
    "\4\0\1\23\14\0\2\23\3\0\3\23\1\u01ce\7\23"+
    "\2\0\16\23\1\0\1\23\4\0\1\23\14\0\2\23"+
    "\3\0\2\23\1\u01cf\10\23\2\0\16\23\1\0\1\23"+
    "\4\0\1\23\14\0\2\23\3\0\7\23\1\u01a4\3\23"+
    "\2\0\16\23\1\0\1\23\4\0\1\23\14\0\2\23"+
    "\3\0\13\23\2\0\3\23\1\u01d0\12\23\1\0\1\23"+
    "\4\0\1\23\14\0\2\23\3\0\2\23\1\u01d1\10\23"+
    "\2\0\16\23\1\0\1\23\4\0\1\23\14\0\2\23"+
    "\3\0\13\23\2\0\3\23\1\u01d2\12\23\1\0\1\23"+
    "\4\0\1\23\14\0\2\23\3\0\12\23\1\u01d3\2\0"+
    "\16\23\1\0\1\23\4\0\1\23\14\0\2\23\3\0"+
    "\13\23\2\0\1\u01d4\15\23\1\0\1\23\4\0\1\23"+
    "\14\0\2\23\3\0\4\23\1\u017b\6\23\2\0\16\23"+
    "\1\0\1\23\4\0\1\23\14\0\2\23\3\0\13\23"+
    "\2\0\3\23\1\u01d5\12\23\1\0\1\23\4\0\1\23"+
    "\14\0\2\23\3\0\13\23\2\0\11\23\1\u01d6\4\23"+
    "\1\0\1\23\4\0\1\23\14\0\2\23\3\0\11\23"+
    "\1\u01d7\1\23\2\0\16\23\1\0\1\23\4\0\1\23"+
    "\14\0\2\23\3\0\12\23\1\u01d8\2\0\16\23\1\0"+
    "\1\23\4\0\1\23\14\0\2\23\3\0\5\23\1\u01bf"+
    "\5\23\2\0\16\23\1\0\1\23\4\0\1\23\14\0"+
    "\2\23\3\0\5\23\1\u01d9\5\23\2\0\16\23\1\0"+
    "\1\23\4\0\1\23\14\0\2\23\3\0\4\23\1\u01da"+
    "\6\23\2\0\16\23\1\0\1\23\4\0\1\23\14\0"+
    "\2\23\3\0\13\23\2\0\3\23\1\u01db\12\23\1\0"+
    "\1\23\4\0\1\23\14\0\2\23\3\0\2\23\1\u01d0"+
    "\10\23\2\0\16\23\1\0\1\23\4\0\1\23\14\0"+
    "\2\23\3\0\12\23\1\u01dc\2\0\16\23\1\0\1\23"+
    "\4\0\1\23\14\0\2\23\3\0\4\23\1\u01dd\6\23"+
    "\2\0\16\23\1\0\1\23\4\0\1\23\14\0\2\23"+
    "\3\0\11\23\1\u01de\1\23\2\0\16\23\1\0\1\23"+
    "\4\0\1\23\14\0\2\23\3\0\10\23\1\u01df\2\23"+
    "\2\0\16\23\1\0\1\23\4\0\1\23\14\0\2\23"+
    "\3\0\1\23\1\u01ce\11\23\2\0\16\23\1\0\1\23"+
    "\4\0\1\23\14\0\2\23\3\0\11\23\1\u01e0\1\23"+
    "\2\0\16\23\1\0\1\23\4\0\1\23\14\0\2\23"+
    "\3\0\13\23\2\0\1\u01e1\15\23\1\0\1\23\4\0"+
    "\1\23\14\0\2\23\3\0\4\23\1\u01e2\6\23\2\0"+
    "\16\23\1\0\1\23\4\0\1\23\14\0\2\23\3\0"+
    "\4\23\1\u01bf\6\23\2\0\16\23\1\0\1\23\4\0"+
    "\1\23\14\0\2\23\3\0\4\23\1\u01e3\6\23\2\0"+
    "\16\23\1\0\1\23\4\0\1\23\14\0\2\23\3\0"+
    "\13\23\2\0\3\23\1\u01e4\12\23\1\0\1\23\4\0"+
    "\1\23\14\0\2\23\3\0\13\23\2\0\1\u01e5\15\23"+
    "\1\0\1\23\4\0\1\23\14\0\2\23\3\0\13\23"+
    "\2\0\1\u01e6\15\23\1\0\1\23\4\0\1\23\14\0"+
    "\2\23\3\0\12\23\1\u01ca\2\0\16\23\1\0\1\23"+
    "\4\0\1\23\14\0\2\23\3\0\13\23\2\0\3\23"+
    "\1\u01e7\12\23\1\0\1\23\4\0\1\23\14\0\2\23"+
    "\3\0\13\23\2\0\3\23\1\u01e8\12\23\1\0\1\23"+
    "\4\0\1\23\14\0\2\23\3\0\12\23\1\u01c8\2\0"+
    "\16\23\1\0\1\23\4\0\1\23\14\0\2\23\3\0"+
    "\12\23\1\u01db\2\0\16\23\1\0\1\23\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[22236];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\5\1\1\11\1\1\1\11"+
    "\1\1\2\11\1\1\1\11\2\1\3\11\12\1\1\11"+
    "\11\1\1\11\1\1\2\11\1\1\1\11\2\0\1\11"+
    "\1\0\57\1\1\11\1\0\70\1\1\0\62\1\1\0"+
    "\u0117\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[488];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 166) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return ERROR;
            } 
            // fall through
          case 55: break;
          case 2: 
            { return OCOMPARACION;
            } 
            // fall through
          case 56: break;
          case 3: 
            { return OPERADORARITMETICORESTA;
            } 
            // fall through
          case 57: break;
          case 4: 
            { return IDENTIFICADOR;
            } 
            // fall through
          case 58: break;
          case 5: 
            { return OPERADORNEGACION;
            } 
            // fall through
          case 59: break;
          case 6: 
            { return OPERADORARITMETICO;
            } 
            // fall through
          case 60: break;
          case 7: 
            { return OPERADORARITMETICOSUMA;
            } 
            // fall through
          case 61: break;
          case 8: 
            { return SEPARADOR;
            } 
            // fall through
          case 62: break;
          case 9: 
            { return PUNTOYCOMA;
            } 
            // fall through
          case 63: break;
          case 10: 
            { /* Salto de Línea */
            } 
            // fall through
          case 64: break;
          case 11: 
            { return NUMERO;
            } 
            // fall through
          case 65: break;
          case 12: 
            { return LLAVEABRE;
            } 
            // fall through
          case 66: break;
          case 13: 
            { return LLAVECIERRA;
            } 
            // fall through
          case 67: break;
          case 14: 
            { return PARENTESISABRE;
            } 
            // fall through
          case 68: break;
          case 15: 
            { return PARENTESISCIERRA;
            } 
            // fall through
          case 69: break;
          case 16: 
            { /* Blanco */
            } 
            // fall through
          case 70: break;
          case 17: 
            { return DOSPUNTOS;
            } 
            // fall through
          case 71: break;
          case 18: 
            { return OPERADORASIGNACION;
            } 
            // fall through
          case 72: break;
          case 19: 
            { return OLOGICO;
            } 
            // fall through
          case 73: break;
          case 20: 
            { return CADENA;
            } 
            // fall through
          case 74: break;
          case 21: 
            { return SI;
            } 
            // fall through
          case 75: break;
          case 22: 
            { return HACER;
            } 
            // fall through
          case 76: break;
          case 23: 
            { return COMENTARIO;
            } 
            // fall through
          case 77: break;
          case 24: 
            { return COLORES;
            } 
            // fall through
          case 78: break;
          case 25: 
            { return VARIABLE;
            } 
            // fall through
          case 79: break;
          case 26: 
            { return FIN;
            } 
            // fall through
          case 80: break;
          case 27: 
            { return PARA;
            } 
            // fall through
          case 81: break;
          case 28: 
            { return AVANZAR;
            } 
            // fall through
          case 82: break;
          case 29: 
            { return SINO;
            } 
            // fall through
          case 83: break;
          case 30: 
            { return ESPERA;
            } 
            // fall through
          case 84: break;
          case 31: 
            { return BOOLEANO;
            } 
            // fall through
          case 85: break;
          case 32: 
            { return CASO;
            } 
            // fall through
          case 86: break;
          case 33: 
            { return IMPRIMIRCADENA;
            } 
            // fall through
          case 87: break;
          case 34: 
            { return REPITE;
            } 
            // fall through
          case 88: break;
          case 35: 
            { return RANDOM;
            } 
            // fall through
          case 89: break;
          case 36: 
            { return SINOSI;
            } 
            // fall through
          case 90: break;
          case 37: 
            { return TERMINARBLOQUE;
            } 
            // fall through
          case 91: break;
          case 38: 
            { return PROGRAMA;
            } 
            // fall through
          case 92: break;
          case 39: 
            { return TOMAR;
            } 
            // fall through
          case 93: break;
          case 40: 
            { return REPITEHASTA;
            } 
            // fall through
          case 94: break;
          case 41: 
            { return DEFAULT;
            } 
            // fall through
          case 95: break;
          case 42: 
            { return COMPARAR;
            } 
            // fall through
          case 96: break;
          case 43: 
            { return SOLTAR;
            } 
            // fall through
          case 97: break;
          case 44: 
            { return IMPRIMIRVARIABLE;
            } 
            // fall through
          case 98: break;
          case 45: 
            { return IZQUIERDA;
            } 
            // fall through
          case 99: break;
          case 46: 
            { return DERECHA;
            } 
            // fall through
          case 100: break;
          case 47: 
            { return PINTAR;
            } 
            // fall through
          case 101: break;
          case 48: 
            { return QUETENGODELANTE;
            } 
            // fall through
          case 102: break;
          case 49: 
            { return DESACTIVARKABOOM;
            } 
            // fall through
          case 103: break;
          case 50: 
            { return KABOOMDEFRENTE;
            } 
            // fall through
          case 104: break;
          case 51: 
            { return MURODELANTE;
            } 
            // fall through
          case 105: break;
          case 52: 
            { return DEJAPINTAR;
            } 
            // fall through
          case 106: break;
          case 53: 
            { return ELIMINAR;
            } 
            // fall through
          case 107: break;
          case 54: 
            { return OBJETODELANTE;
            } 
            // fall through
          case 108: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
