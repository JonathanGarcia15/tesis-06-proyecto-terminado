
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Compilador.Default.Compiler;

import java_cup.runtime.Symbol;
import java.util.Stack;
import org.json.JSONObject;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintax extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\306\000\002\002\004\000\002\076\002\000\002\077" +
    "\002\000\002\002\013\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\003\004\000\002\003\004\000" +
    "\002\003\004\000\002\003\004\000\002\003\004\000\002" +
    "\003\004\000\002\003\004\000\002\003\004\000\002\003" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\003\004\000\002\003\004\000" +
    "\002\003\004\000\002\003\004\000\002\003\004\000\002" +
    "\003\004\000\002\003\002\000\002\004\005\000\002\005" +
    "\003\000\002\005\004\000\002\100\002\000\002\005\005" +
    "\000\002\101\002\000\002\006\006\000\002\102\002\000" +
    "\002\006\007\000\002\006\005\000\002\006\004\000\002" +
    "\007\004\000\002\007\004\000\002\007\004\000\002\007" +
    "\004\000\002\007\006\000\002\010\003\000\002\010\003" +
    "\000\002\067\006\000\002\070\003\000\002\070\002\000" +
    "\002\011\004\000\002\011\004\000\002\011\004\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\004\000\002\012\004\000\002\012\004\000\002\012\004" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\014\005\000\002\015\007\000\002\071\010\000\002" +
    "\071\005\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\002\000\002\017\007" +
    "\000\002\020\007\000\002\021\007\000\002\022\006\000" +
    "\002\023\006\000\002\024\006\000\002\025\006\000\002" +
    "\026\007\000\002\027\003\000\002\027\002\000\002\030" +
    "\006\000\002\031\007\000\002\103\002\000\002\032\010" +
    "\000\002\104\002\000\002\033\005\000\002\105\002\000" +
    "\002\033\005\000\002\106\002\000\002\034\006\000\002" +
    "\107\002\000\002\034\006\000\002\034\002\000\002\035" +
    "\006\000\002\110\002\000\002\036\010\000\002\111\002" +
    "\000\002\037\005\000\002\112\002\000\002\037\005\000" +
    "\002\113\002\000\002\037\005\000\002\114\002\000\002" +
    "\037\005\000\002\037\002\000\002\115\002\000\002\040" +
    "\006\000\002\116\002\000\002\040\006\000\002\117\002" +
    "\000\002\040\006\000\002\120\002\000\002\040\006\000" +
    "\002\040\002\000\002\121\002\000\002\041\013\000\002" +
    "\042\003\000\002\042\003\000\002\042\003\000\002\043" +
    "\004\000\002\043\004\000\002\043\004\000\002\043\006" +
    "\000\002\043\005\000\002\043\005\000\002\043\005\000" +
    "\002\043\003\000\002\044\004\000\002\044\004\000\002" +
    "\044\006\000\002\044\004\000\002\045\006\000\002\046" +
    "\005\000\002\122\002\000\002\047\013\000\002\047\003" +
    "\000\002\123\002\000\002\050\007\000\002\050\002\000" +
    "\002\051\012\000\002\051\014\000\002\124\002\000\002" +
    "\052\011\000\002\052\002\000\002\072\004\000\002\072" +
    "\004\000\002\073\003\000\002\073\002\000\002\125\002" +
    "\000\002\053\007\000\002\074\004\000\002\074\002\000" +
    "\002\126\002\000\002\127\002\000\002\130\002\000\002" +
    "\131\002\000\002\132\002\000\002\054\022\000\002\133" +
    "\002\000\002\055\006\000\002\134\002\000\002\055\007" +
    "\000\002\055\002\000\002\135\002\000\002\056\007\000" +
    "\002\136\002\000\002\056\010\000\002\056\002\000\002" +
    "\137\002\000\002\057\007\000\002\140\002\000\002\057" +
    "\007\000\002\057\002\000\002\141\002\000\002\060\010" +
    "\000\002\142\002\000\002\060\010\000\002\060\002\000" +
    "\002\143\002\000\002\061\014\000\002\144\002\000\002" +
    "\062\012\000\002\075\006\000\002\075\006\000\002\145" +
    "\002\000\002\146\002\000\002\147\002\000\002\150\002" +
    "\000\002\063\016\000\002\063\002\000\002\151\002\000" +
    "\002\064\006\000\002\064\002\000\002\152\002\000\002" +
    "\065\007\000\002\065\002\000\002\066\003\000\002\066" +
    "\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u019e\000\004\004\000\001\002\000\004\004\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\005\010\001\002\000\004\006\011\001\002\000" +
    "\004\007\012\001\002\000\054\010\uffe7\011\050\013\037" +
    "\022\036\023\035\024\026\025\051\026\042\027\046\030" +
    "\016\031\053\032\043\034\065\035\057\036\045\044\063" +
    "\045\021\053\041\060\060\061\056\062\013\001\002\000" +
    "\004\005\u019a\001\002\000\062\010\uffe7\011\050\013\037" +
    "\022\036\023\035\024\026\025\051\026\042\027\046\030" +
    "\016\031\053\032\043\034\065\035\057\036\045\044\063" +
    "\045\021\053\041\054\uffe7\055\uffe7\057\uffe7\060\060\061" +
    "\056\062\013\001\002\000\062\010\uffe7\011\050\013\037" +
    "\022\036\023\035\024\026\025\051\026\042\027\046\030" +
    "\016\031\053\032\043\034\065\035\057\036\045\044\063" +
    "\045\021\053\041\054\uffe7\055\uffe7\057\uffe7\060\060\061" +
    "\056\062\013\001\002\000\004\005\u0195\001\002\000\062" +
    "\010\uffe7\011\050\013\037\022\036\023\035\024\026\025" +
    "\051\026\042\027\046\030\016\031\053\032\043\034\065" +
    "\035\057\036\045\044\063\045\021\053\041\054\uffe7\055" +
    "\uffe7\057\uffe7\060\060\061\056\062\013\001\002\000\004" +
    "\010\uffff\001\002\000\004\005\u0165\001\002\000\062\010" +
    "\uffe7\011\050\013\037\022\036\023\035\024\026\025\051" +
    "\026\042\027\046\030\016\031\053\032\043\034\065\035" +
    "\057\036\045\044\063\045\021\053\041\054\uffe7\055\uffe7" +
    "\057\uffe7\060\060\061\056\062\013\001\002\000\062\010" +
    "\uffe7\011\050\013\037\022\036\023\035\024\026\025\051" +
    "\026\042\027\046\030\016\031\053\032\043\034\065\035" +
    "\057\036\045\044\063\045\021\053\041\054\uffe7\055\uffe7" +
    "\057\uffe7\060\060\061\056\062\013\001\002\000\062\010" +
    "\uffe7\011\050\013\037\022\036\023\035\024\026\025\051" +
    "\026\042\027\046\030\016\031\053\032\043\034\065\035" +
    "\057\036\045\044\063\045\021\053\041\054\uffe7\055\uffe7" +
    "\057\uffe7\060\060\061\056\062\013\001\002\000\062\010" +
    "\uffe7\011\050\013\037\022\036\023\035\024\026\025\051" +
    "\026\042\027\046\030\016\031\053\032\043\034\065\035" +
    "\057\036\045\044\063\045\021\053\041\054\uffe7\055\uffe7" +
    "\057\uffe7\060\060\061\056\062\013\001\002\000\004\005" +
    "\u015d\001\002\000\062\010\uffe7\011\050\013\037\022\036" +
    "\023\035\024\026\025\051\026\042\027\046\030\016\031" +
    "\053\032\043\034\065\035\057\036\045\044\063\045\021" +
    "\053\041\054\uffe7\055\uffe7\057\uffe7\060\060\061\056\062" +
    "\013\001\002\000\062\010\uffe7\011\050\013\037\022\036" +
    "\023\035\024\026\025\051\026\042\027\046\030\016\031" +
    "\053\032\043\034\065\035\057\036\045\044\063\045\021" +
    "\053\041\054\uffe7\055\uffe7\057\uffe7\060\060\061\056\062" +
    "\013\001\002\000\062\010\uffe7\011\050\013\037\022\036" +
    "\023\035\024\026\025\051\026\042\027\046\030\016\031" +
    "\053\032\043\034\065\035\057\036\045\044\063\045\021" +
    "\053\041\054\uffe7\055\uffe7\057\uffe7\060\060\061\056\062" +
    "\013\001\002\000\062\010\uffe7\011\050\013\037\022\036" +
    "\023\035\024\026\025\051\026\042\027\046\030\016\031" +
    "\053\032\043\034\065\035\057\036\045\044\063\045\021" +
    "\053\041\054\uffe7\055\uffe7\057\uffe7\060\060\061\056\062" +
    "\013\001\002\000\062\010\uffe7\011\050\013\037\022\036" +
    "\023\035\024\026\025\051\026\042\027\046\030\016\031" +
    "\053\032\043\034\065\035\057\036\045\044\063\045\021" +
    "\053\041\054\uffe7\055\uffe7\057\uffe7\060\060\061\056\062" +
    "\013\001\002\000\062\010\uffe7\011\050\013\037\022\036" +
    "\023\035\024\026\025\051\026\042\027\046\030\016\031" +
    "\053\032\043\034\065\035\057\036\045\044\063\045\021" +
    "\053\041\054\uffe7\055\uffe7\057\uffe7\060\060\061\056\062" +
    "\013\001\002\000\004\005\u0153\001\002\000\004\005\u014f" +
    "\001\002\000\012\005\u012c\015\105\017\u012b\020\u0129\001" +
    "\002\000\062\010\uffe7\011\050\013\037\022\036\023\035" +
    "\024\026\025\051\026\042\027\046\030\016\031\053\032" +
    "\043\034\065\035\057\036\045\044\063\045\021\053\041" +
    "\054\uffe7\055\uffe7\057\uffe7\060\060\061\056\062\013\001" +
    "\002\000\004\005\u0107\001\002\000\004\005\u0104\001\002" +
    "\000\004\005\377\001\002\000\062\010\uffe7\011\050\013" +
    "\037\022\036\023\035\024\026\025\051\026\042\027\046" +
    "\030\016\031\053\032\043\034\065\035\057\036\045\044" +
    "\063\045\021\053\041\054\uffe7\055\uffe7\057\uffe7\060\060" +
    "\061\056\062\013\001\002\000\004\005\354\001\002\000" +
    "\004\005\351\001\002\000\062\010\uffe7\011\050\013\037" +
    "\022\036\023\035\024\026\025\051\026\042\027\046\030" +
    "\016\031\053\032\043\034\065\035\057\036\045\044\063" +
    "\045\021\053\041\054\uffe7\055\uffe7\057\uffe7\060\060\061" +
    "\056\062\013\001\002\000\004\013\333\001\002\000\004" +
    "\005\323\001\002\000\062\010\uffe7\011\050\013\037\022" +
    "\036\023\035\024\026\025\051\026\042\027\046\030\016" +
    "\031\053\032\043\034\065\035\057\036\045\044\063\045" +
    "\021\053\041\054\uffe7\055\uffe7\057\uffe7\060\060\061\056" +
    "\062\013\001\002\000\004\005\317\001\002\000\062\010" +
    "\uffe7\011\050\013\037\022\036\023\035\024\026\025\051" +
    "\026\042\027\046\030\016\031\053\032\043\034\065\035" +
    "\057\036\045\044\063\045\021\053\041\054\uffe7\055\uffe7" +
    "\057\uffe7\060\060\061\056\062\013\001\002\000\062\010" +
    "\uffe7\011\050\013\037\022\036\023\035\024\026\025\051" +
    "\026\042\027\046\030\016\031\053\032\043\034\065\035" +
    "\057\036\045\044\063\045\021\053\041\054\uffe7\055\uffe7" +
    "\057\uffe7\060\060\061\056\062\013\001\002\000\004\007" +
    "\304\001\002\000\004\005\300\001\002\000\004\005\077" +
    "\001\002\000\062\010\uffe7\011\050\013\037\022\036\023" +
    "\035\024\026\025\051\026\042\027\046\030\016\031\053" +
    "\032\043\034\065\035\057\036\045\044\063\045\021\053" +
    "\041\054\uffe7\055\uffe7\057\uffe7\060\060\061\056\062\013" +
    "\001\002\000\062\010\uffe7\011\050\013\037\022\036\023" +
    "\035\024\026\025\051\026\042\027\046\030\016\031\053" +
    "\032\043\034\065\035\057\036\045\044\063\045\021\053" +
    "\041\054\uffe7\055\uffe7\057\uffe7\060\060\061\056\062\013" +
    "\001\002\000\004\005\072\001\002\000\062\010\uffe7\011" +
    "\050\013\037\022\036\023\035\024\026\025\051\026\042" +
    "\027\046\030\016\031\053\032\043\034\065\035\057\036" +
    "\045\044\063\045\021\053\041\054\uffe7\055\uffe7\057\uffe7" +
    "\060\060\061\056\062\013\001\002\000\004\005\066\001" +
    "\002\000\004\006\067\001\002\000\004\012\070\001\002" +
    "\000\062\010\uffb1\011\uffb1\013\uffb1\022\uffb1\023\uffb1\024" +
    "\uffb1\025\uffb1\026\uffb1\027\uffb1\030\uffb1\031\uffb1\032\uffb1" +
    "\034\uffb1\035\uffb1\036\uffb1\044\uffb1\045\uffb1\053\uffb1\054" +
    "\uffb1\055\uffb1\057\uffb1\060\uffb1\061\uffb1\062\uffb1\001\002" +
    "\000\012\010\ufff1\054\ufff1\055\ufff1\057\ufff1\001\002\000" +
    "\004\006\073\001\002\000\004\012\074\001\002\000\062" +
    "\010\uffa4\011\uffa4\013\uffa4\022\uffa4\023\uffa4\024\uffa4\025" +
    "\uffa4\026\uffa4\027\uffa4\030\uffa4\031\uffa4\032\uffa4\034\uffa4" +
    "\035\uffa4\036\uffa4\044\uffa4\045\uffa4\053\uffa4\054\uffa4\055" +
    "\uffa4\057\uffa4\060\uffa4\061\uffa4\062\uffa4\001\002\000\012" +
    "\010\ufff3\054\ufff3\055\ufff3\057\ufff3\001\002\000\012\010" +
    "\uffef\054\uffef\055\uffef\057\uffef\001\002\000\010\011\uff69" +
    "\012\uff69\013\uff69\001\002\000\010\011\103\012\uff5f\013" +
    "\102\001\002\000\004\012\uff68\001\002\000\004\015\105" +
    "\001\002\000\004\013\104\001\002\000\004\015\105\001" +
    "\002\000\014\005\131\013\133\016\130\042\132\066\125" +
    "\001\002\000\006\012\uff61\014\uff61\001\002\000\006\012" +
    "\uff5a\014\111\001\002\000\004\012\uff60\001\002\000\006" +
    "\011\113\013\112\001\002\000\004\015\105\001\002\000" +
    "\004\013\114\001\002\000\004\015\105\001\002\000\006" +
    "\012\uff5c\014\uff5c\001\002\000\006\012\uff5a\014\111\001" +
    "\002\000\004\012\uff5b\001\002\000\006\012\uff5e\014\uff5e" +
    "\001\002\000\006\012\uff5a\014\111\001\002\000\004\012" +
    "\uff5d\001\002\000\010\006\uffd6\012\uffd6\014\uffd6\001\002" +
    "\000\010\006\uffd5\012\uffd5\014\uffd5\001\002\000\004\005" +
    "\163\001\002\000\014\012\uffd9\014\uffd9\017\137\020\136" +
    "\021\135\001\002\000\006\012\uffd8\014\uffd8\001\002\000" +
    "\014\012\uffdb\014\uffdb\017\137\020\136\021\135\001\002" +
    "\000\012\005\131\013\153\016\152\066\125\001\002\000" +
    "\004\005\150\001\002\000\014\012\uffda\014\uffda\017\137" +
    "\020\136\021\135\001\002\000\010\006\uffd1\012\uffd1\014" +
    "\uffd1\001\002\000\012\005\uffc7\013\uffc7\016\uffc7\066\uffc7" +
    "\001\002\000\012\005\uffc5\013\uffc5\016\uffc5\066\uffc5\001" +
    "\002\000\012\005\uffc6\013\uffc6\016\uffc6\066\uffc6\001\002" +
    "\000\012\005\131\013\142\016\141\066\125\001\002\000" +
    "\016\006\uffc9\012\uffc9\014\uffc9\017\137\020\136\021\135" +
    "\001\002\000\016\006\uffca\012\uffca\014\uffca\017\137\020" +
    "\136\021\135\001\002\000\010\006\uffcb\012\uffcb\014\uffcb" +
    "\001\002\000\016\006\uffc8\012\uffc8\014\uffc8\017\137\020" +
    "\136\021\135\001\002\000\010\006\uffcc\012\uffcc\014\uffcc" +
    "\001\002\000\010\006\uffce\012\uffce\014\uffce\001\002\000" +
    "\010\006\uffcd\012\uffcd\014\uffcd\001\002\000\004\006\151" +
    "\001\002\000\006\012\uffd7\014\uffd7\001\002\000\010\017" +
    "\137\020\136\021\135\001\002\000\010\017\137\020\136" +
    "\021\135\001\002\000\010\017\137\020\136\021\135\001" +
    "\002\000\004\006\156\001\002\000\016\006\uffd2\012\uffd2" +
    "\014\uffd2\017\137\020\136\021\135\001\002\000\010\006" +
    "\uffd3\012\uffd3\014\uffd3\001\002\000\010\006\uffd4\012\uffd4" +
    "\014\uffd4\001\002\000\010\006\uffcf\012\uffcf\014\uffcf\001" +
    "\002\000\010\006\uffd0\012\uffd0\014\uffd0\001\002\000\006" +
    "\006\165\016\164\001\002\000\004\014\166\001\002\000" +
    "\022\006\uffc1\012\uffc1\014\uffc1\017\uffc1\020\uffc1\021\uffc1" +
    "\047\uffc1\056\uffc1\001\002\000\004\016\167\001\002\000" +
    "\004\006\170\001\002\000\022\006\uffc2\012\uffc2\014\uffc2" +
    "\017\uffc2\020\uffc2\021\uffc2\047\uffc2\056\uffc2\001\002\000" +
    "\006\012\uff63\014\uff63\001\002\000\006\012\uff5a\014\111" +
    "\001\002\000\004\012\uff62\001\002\000\004\012\175\001" +
    "\002\000\026\005\uff3c\013\213\016\202\040\206\041\201" +
    "\042\212\043\176\046\177\064\207\066\125\001\002\000" +
    "\004\005\276\001\002\000\006\006\uff83\012\uff83\001\002" +
    "\000\004\047\215\001\002\000\004\005\273\001\002\000" +
    "\004\047\215\001\002\000\006\006\uff8c\012\uff8c\001\002" +
    "\000\006\006\uff8d\012\uff8d\001\002\000\004\005\267\001" +
    "\002\000\004\005\265\001\002\000\004\005\uff3d\001\002" +
    "\000\004\012\231\001\002\000\010\006\uff8b\012\uff8b\050" +
    "\227\001\002\000\004\005\224\001\002\000\004\047\215" +
    "\001\002\000\006\006\uff8a\012\uff8a\001\002\000\012\013" +
    "\217\016\216\042\221\066\125\001\002\000\006\006\uff81" +
    "\012\uff81\001\002\000\006\006\uff82\012\uff82\001\002\000" +
    "\006\006\uff7f\012\uff7f\001\002\000\004\005\222\001\002" +
    "\000\004\006\223\001\002\000\006\006\uff80\012\uff80\001" +
    "\002\000\004\006\225\001\002\000\004\047\215\001\002" +
    "\000\006\006\uff87\012\uff87\001\002\000\006\005\uff3c\064" +
    "\207\001\002\000\006\006\uff7d\012\uff7d\001\002\000\006" +
    "\006\uff67\013\uff67\001\002\000\006\006\uff55\013\233\001" +
    "\002\000\006\017\244\020\243\001\002\000\004\006\uff66" +
    "\001\002\000\004\006\236\001\002\000\004\007\237\001" +
    "\002\000\054\010\uff65\011\uff65\013\uff65\022\uff65\023\uff65" +
    "\024\uff65\025\uff65\026\uff65\027\uff65\030\uff65\031\uff65\032" +
    "\uff65\034\uff65\035\uff65\036\uff65\044\uff65\045\uff65\053\uff65" +
    "\060\uff65\061\uff65\062\uff65\001\002\000\054\010\uffe7\011" +
    "\050\013\037\022\036\023\035\024\026\025\051\026\042" +
    "\027\046\030\016\031\053\032\043\034\065\035\057\036" +
    "\045\044\063\045\021\053\041\060\060\061\056\062\013" +
    "\001\002\000\004\010\242\001\002\000\062\010\uff64\011" +
    "\uff64\013\uff64\022\uff64\023\uff64\024\uff64\025\uff64\026\uff64" +
    "\027\uff64\030\uff64\031\uff64\032\uff64\034\uff64\035\uff64\036" +
    "\uff64\044\uff64\045\uff64\053\uff64\054\uff64\055\uff64\057\uff64" +
    "\060\uff64\061\uff64\062\uff64\001\002\000\004\020\262\001" +
    "\002\000\004\017\245\001\002\000\006\006\uff59\014\uff59" +
    "\001\002\000\006\006\uff50\014\250\001\002\000\004\006" +
    "\uff58\001\002\000\004\013\251\001\002\000\006\017\253" +
    "\020\252\001\002\000\004\020\257\001\002\000\004\017" +
    "\254\001\002\000\006\006\uff54\014\uff54\001\002\000\006" +
    "\006\uff50\014\250\001\002\000\004\006\uff53\001\002\000" +
    "\006\006\uff52\014\uff52\001\002\000\006\006\uff50\014\250" +
    "\001\002\000\004\006\uff51\001\002\000\006\006\uff57\014" +
    "\uff57\001\002\000\006\006\uff50\014\250\001\002\000\004" +
    "\006\uff56\001\002\000\004\006\266\001\002\000\006\006" +
    "\uff84\012\uff84\001\002\000\022\013\213\016\202\040\206" +
    "\041\201\042\212\043\176\046\177\066\125\001\002\000" +
    "\004\006\271\001\002\000\010\006\uff7e\012\uff7e\050\uff7e" +
    "\001\002\000\006\006\uff89\012\uff89\001\002\000\004\006" +
    "\274\001\002\000\006\006\uff86\012\uff86\001\002\000\006" +
    "\006\uff88\012\uff88\001\002\000\004\006\277\001\002\000" +
    "\006\006\uff85\012\uff85\001\002\000\004\013\301\001\002" +
    "\000\004\006\302\001\002\000\004\012\303\001\002\000" +
    "\062\010\uffb0\011\uffb0\013\uffb0\022\uffb0\023\uffb0\024\uffb0" +
    "\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0\034" +
    "\uffb0\035\uffb0\036\uffb0\044\uffb0\045\uffb0\053\uffb0\054\uffb0" +
    "\055\uffb0\057\uffb0\060\uffb0\061\uffb0\062\uffb0\001\002\000" +
    "\054\010\uff4f\011\uff4f\013\uff4f\022\uff4f\023\uff4f\024\uff4f" +
    "\025\uff4f\026\uff4f\027\uff4f\030\uff4f\031\uff4f\032\uff4f\034" +
    "\uff4f\035\uff4f\036\uff4f\044\uff4f\045\uff4f\053\uff4f\060\uff4f" +
    "\061\uff4f\062\uff4f\001\002\000\054\010\uffe7\011\050\013" +
    "\037\022\036\023\035\024\026\025\051\026\042\027\046" +
    "\030\016\031\053\032\043\034\065\035\057\036\045\044" +
    "\063\045\021\053\041\060\060\061\056\062\013\001\002" +
    "\000\004\010\307\001\002\000\004\063\310\001\002\000" +
    "\004\005\311\001\002\000\026\005\uff3c\013\213\016\202" +
    "\040\206\041\201\042\212\043\176\046\177\064\207\066" +
    "\125\001\002\000\004\006\313\001\002\000\004\012\314" +
    "\001\002\000\062\010\uff4e\011\uff4e\013\uff4e\022\uff4e\023" +
    "\uff4e\024\uff4e\025\uff4e\026\uff4e\027\uff4e\030\uff4e\031\uff4e" +
    "\032\uff4e\034\uff4e\035\uff4e\036\uff4e\044\uff4e\045\uff4e\053" +
    "\uff4e\054\uff4e\055\uff4e\057\uff4e\060\uff4e\061\uff4e\062\uff4e" +
    "\001\002\000\012\010\ufffa\054\ufffa\055\ufffa\057\ufffa\001" +
    "\002\000\012\010\ufff8\054\ufff8\055\ufff8\057\ufff8\001\002" +
    "\000\004\006\320\001\002\000\004\012\321\001\002\000" +
    "\062\010\uffb5\011\uffb5\013\uffb5\022\uffb5\023\uffb5\024\uffb5" +
    "\025\uffb5\026\uffb5\027\uffb5\030\uffb5\031\uffb5\032\uffb5\034" +
    "\uffb5\035\uffb5\036\uffb5\044\uffb5\045\uffb5\053\uffb5\054\uffb5" +
    "\055\uffb5\057\uffb5\060\uffb5\061\uffb5\062\uffb5\001\002\000" +
    "\012\010\uffee\054\uffee\055\uffee\057\uffee\001\002\000\014" +
    "\005\131\006\uffbc\013\330\016\327\066\125\001\002\000" +
    "\012\006\uffbe\017\137\020\136\021\135\001\002\000\004" +
    "\006\uffbd\001\002\000\004\006\331\001\002\000\012\006" +
    "\uffbf\017\137\020\136\021\135\001\002\000\012\006\uffc0" +
    "\017\137\020\136\021\135\001\002\000\004\012\332\001" +
    "\002\000\062\010\uffb9\011\uffb9\013\uffb9\022\uffb9\023\uffb9" +
    "\024\uffb9\025\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9\032" +
    "\uffb9\034\uffb9\035\uffb9\036\uffb9\044\uffb9\045\uffb9\053\uffb9" +
    "\054\uffb9\055\uffb9\057\uffb9\060\uffb9\061\uffb9\062\uffb9\001" +
    "\002\000\010\012\uffe5\014\uffe3\015\105\001\002\000\004" +
    "\012\335\001\002\000\062\010\uffe6\011\uffe6\013\uffe6\022" +
    "\uffe6\023\uffe6\024\uffe6\025\uffe6\026\uffe6\027\uffe6\030\uffe6" +
    "\031\uffe6\032\uffe6\034\uffe6\035\uffe6\036\uffe6\044\uffe6\045" +
    "\uffe6\053\uffe6\054\uffe6\055\uffe6\057\uffe6\060\uffe6\061\uffe6" +
    "\062\uffe6\001\002\000\004\014\340\001\002\000\004\012" +
    "\uffe4\001\002\000\004\013\342\001\002\000\004\012\uffe2" +
    "\001\002\000\010\012\uffdc\014\uffe1\015\105\001\002\000" +
    "\004\014\340\001\002\000\006\012\uffdd\014\uffdf\001\002" +
    "\000\004\014\340\001\002\000\004\012\uffde\001\002\000" +
    "\004\012\uffe0\001\002\000\012\010\ufff7\054\ufff7\055\ufff7" +
    "\057\ufff7\001\002\000\004\006\352\001\002\000\004\012" +
    "\353\001\002\000\062\010\uffb7\011\uffb7\013\uffb7\022\uffb7" +
    "\023\uffb7\024\uffb7\025\uffb7\026\uffb7\027\uffb7\030\uffb7\031" +
    "\uffb7\032\uffb7\034\uffb7\035\uffb7\036\uffb7\044\uffb7\045\uffb7" +
    "\053\uffb7\054\uffb7\055\uffb7\057\uffb7\060\uffb7\061\uffb7\062" +
    "\uffb7\001\002\000\006\013\uffaf\037\uffaf\001\002\000\006" +
    "\013\356\037\360\001\002\000\006\006\uffad\017\uffad\001" +
    "\002\000\004\006\372\001\002\000\006\006\uffab\017\uffab" +
    "\001\002\000\006\006\uffa5\017\362\001\002\000\006\013" +
    "\364\037\365\001\002\000\004\006\uffaa\001\002\000\006" +
    "\006\uffa9\017\uffa9\001\002\000\006\006\uffa7\017\uffa7\001" +
    "\002\000\006\006\uffa5\017\362\001\002\000\004\006\uffa6" +
    "\001\002\000\006\006\uffa5\017\362\001\002\000\004\006" +
    "\uffa8\001\002\000\004\012\373\001\002\000\062\010\uffae" +
    "\011\uffae\013\uffae\022\uffae\023\uffae\024\uffae\025\uffae\026" +
    "\uffae\027\uffae\030\uffae\031\uffae\032\uffae\034\uffae\035\uffae" +
    "\036\uffae\044\uffae\045\uffae\053\uffae\054\uffae\055\uffae\057" +
    "\uffae\060\uffae\061\uffae\062\uffae\001\002\000\006\006\uffa5" +
    "\017\362\001\002\000\004\006\uffac\001\002\000\012\010" +
    "\uffec\054\uffec\055\uffec\057\uffec\001\002\000\006\006\uffb2" +
    "\033\u0100\001\002\000\004\006\uffb3\001\002\000\004\006" +
    "\u0102\001\002\000\004\012\u0103\001\002\000\062\010\uffb4" +
    "\011\uffb4\013\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4\026" +
    "\uffb4\027\uffb4\030\uffb4\031\uffb4\032\uffb4\034\uffb4\035\uffb4" +
    "\036\uffb4\044\uffb4\045\uffb4\053\uffb4\054\uffb4\055\uffb4\057" +
    "\uffb4\060\uffb4\061\uffb4\062\uffb4\001\002\000\004\006\u0105" +
    "\001\002\000\004\012\u0106\001\002\000\062\010\uffb8\011" +
    "\uffb8\013\uffb8\022\uffb8\023\uffb8\024\uffb8\025\uffb8\026\uffb8" +
    "\027\uffb8\030\uffb8\031\uffb8\032\uffb8\034\uffb8\035\uffb8\036" +
    "\uffb8\044\uffb8\045\uffb8\053\uffb8\054\uffb8\055\uffb8\057\uffb8" +
    "\060\uffb8\061\uffb8\062\uffb8\001\002\000\006\013\u0108\042" +
    "\u0109\001\002\000\004\006\u0123\001\002\000\004\005\u010a" +
    "\001\002\000\004\006\u010b\001\002\000\004\006\u010c\001" +
    "\002\000\004\007\u010d\001\002\000\006\054\u010f\057\uff72" +
    "\001\002\000\004\057\u011c\001\002\000\010\016\uff6e\047" +
    "\u0110\066\uff6e\001\002\000\006\016\uff6f\066\uff6f\001\002" +
    "\000\004\056\u0115\001\002\000\006\016\u0113\066\125\001" +
    "\002\000\004\056\uff71\001\002\000\004\056\uff70\001\002" +
    "\000\060\011\uff74\013\uff74\022\uff74\023\uff74\024\uff74\025" +
    "\uff74\026\uff74\027\uff74\030\uff74\031\uff74\032\uff74\034\uff74" +
    "\035\uff74\036\uff74\044\uff74\045\uff74\053\uff74\054\uff74\055" +
    "\uff74\057\uff74\060\uff74\061\uff74\062\uff74\001\002\000\060" +
    "\011\050\013\037\022\036\023\035\024\026\025\051\026" +
    "\042\027\046\030\016\031\053\032\043\034\065\035\057" +
    "\036\045\044\063\045\021\053\041\054\uffe7\055\uffe7\057" +
    "\uffe7\060\060\061\056\062\013\001\002\000\010\054\uff6a" +
    "\055\u0118\057\uff6a\001\002\000\004\012\u011b\001\002\000" +
    "\006\054\u010f\057\uff72\001\002\000\004\057\uff73\001\002" +
    "\000\010\010\uff6b\054\uff6b\057\uff6b\001\002\000\004\056" +
    "\u011f\001\002\000\004\010\u011e\001\002\000\062\010\uff75" +
    "\011\uff75\013\uff75\022\uff75\023\uff75\024\uff75\025\uff75\026" +
    "\uff75\027\uff75\030\uff75\031\uff75\032\uff75\034\uff75\035\uff75" +
    "\036\uff75\044\uff75\045\uff75\053\uff75\054\uff75\055\uff75\057" +
    "\uff75\060\uff75\061\uff75\062\uff75\001\002\000\056\010\uff6d" +
    "\011\uff6d\013\uff6d\022\uff6d\023\uff6d\024\uff6d\025\uff6d\026" +
    "\uff6d\027\uff6d\030\uff6d\031\uff6d\032\uff6d\034\uff6d\035\uff6d" +
    "\036\uff6d\044\uff6d\045\uff6d\053\uff6d\055\uff6d\060\uff6d\061" +
    "\uff6d\062\uff6d\001\002\000\056\010\uffe7\011\050\013\037" +
    "\022\036\023\035\024\026\025\051\026\042\027\046\030" +
    "\016\031\053\032\043\034\065\035\057\036\045\044\063" +
    "\045\021\053\041\055\uffe7\060\060\061\056\062\013\001" +
    "\002\000\006\010\uff6a\055\u0118\001\002\000\004\010\uff6c" +
    "\001\002\000\004\007\u0124\001\002\000\006\054\u010f\057" +
    "\uff72\001\002\000\004\057\u011c\001\002\000\004\010\u0127" +
    "\001\002\000\062\010\uff76\011\uff76\013\uff76\022\uff76\023" +
    "\uff76\024\uff76\025\uff76\026\uff76\027\uff76\030\uff76\031\uff76" +
    "\032\uff76\034\uff76\035\uff76\036\uff76\044\uff76\045\uff76\053" +
    "\uff76\054\uff76\055\uff76\057\uff76\060\uff76\061\uff76\062\uff76" +
    "\001\002\000\012\010\uffe8\054\uffe8\055\uffe8\057\uffe8\001" +
    "\002\000\004\020\u014d\001\002\000\004\012\u014c\001\002" +
    "\000\004\017\u014a\001\002\000\014\005\uffa3\006\uffa3\013" +
    "\uffa3\016\uffa3\066\uffa3\001\002\000\014\005\131\006\uff99" +
    "\013\u0132\016\u0130\066\125\001\002\000\014\006\uff9d\014" +
    "\uff9d\017\137\020\136\021\135\001\002\000\006\006\uff9b" +
    "\014\uff9b\001\002\000\014\006\uffa1\014\uffa1\017\137\020" +
    "\136\021\135\001\002\000\004\006\u0142\001\002\000\014" +
    "\006\uff9f\014\uff9f\017\137\020\136\021\135\001\002\000" +
    "\006\006\uff90\014\u0134\001\002\000\012\005\131\013\u0137" +
    "\016\u0136\066\125\001\002\000\004\006\uff9e\001\002\000" +
    "\014\006\uff98\014\uff98\017\137\020\136\021\135\001\002" +
    "\000\014\006\uff96\014\uff96\017\137\020\136\021\135\001" +
    "\002\000\014\006\uff94\014\uff94\017\137\020\136\021\135" +
    "\001\002\000\006\006\uff92\014\uff92\001\002\000\006\006" +
    "\uff90\014\u0134\001\002\000\004\006\uff91\001\002\000\006" +
    "\006\uff90\014\u0134\001\002\000\004\006\uff93\001\002\000" +
    "\006\006\uff90\014\u0134\001\002\000\004\006\uff95\001\002" +
    "\000\006\006\uff90\014\u0134\001\002\000\004\006\uff97\001" +
    "\002\000\004\012\u0143\001\002\000\062\010\uffa2\011\uffa2" +
    "\013\uffa2\022\uffa2\023\uffa2\024\uffa2\025\uffa2\026\uffa2\027" +
    "\uffa2\030\uffa2\031\uffa2\032\uffa2\034\uffa2\035\uffa2\036\uffa2" +
    "\044\uffa2\045\uffa2\053\uffa2\054\uffa2\055\uffa2\057\uffa2\060" +
    "\uffa2\061\uffa2\062\uffa2\001\002\000\006\006\uff90\014\u0134" +
    "\001\002\000\004\006\uffa0\001\002\000\006\006\uff90\014" +
    "\u0134\001\002\000\004\006\uff9a\001\002\000\006\006\uff90" +
    "\014\u0134\001\002\000\004\006\uff9c\001\002\000\004\012" +
    "\u014b\001\002\000\062\010\uff4b\011\uff4b\013\uff4b\022\uff4b" +
    "\023\uff4b\024\uff4b\025\uff4b\026\uff4b\027\uff4b\030\uff4b\031" +
    "\uff4b\032\uff4b\034\uff4b\035\uff4b\036\uff4b\044\uff4b\045\uff4b" +
    "\053\uff4b\054\uff4b\055\uff4b\057\uff4b\060\uff4b\061\uff4b\062" +
    "\uff4b\001\002\000\062\010\uffc4\011\uffc4\013\uffc4\022\uffc4" +
    "\023\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4\030\uffc4\031" +
    "\uffc4\032\uffc4\034\uffc4\035\uffc4\036\uffc4\044\uffc4\045\uffc4" +
    "\053\uffc4\054\uffc4\055\uffc4\057\uffc4\060\uffc4\061\uffc4\062" +
    "\uffc4\001\002\000\004\012\u014e\001\002\000\062\010\uff4a" +
    "\011\uff4a\013\uff4a\022\uff4a\023\uff4a\024\uff4a\025\uff4a\026" +
    "\uff4a\027\uff4a\030\uff4a\031\uff4a\032\uff4a\034\uff4a\035\uff4a" +
    "\036\uff4a\044\uff4a\045\uff4a\053\uff4a\054\uff4a\055\uff4a\057" +
    "\uff4a\060\uff4a\061\uff4a\062\uff4a\001\002\000\014\005\131" +
    "\006\uffbc\013\330\016\327\066\125\001\002\000\004\006" +
    "\u0151\001\002\000\004\012\u0152\001\002\000\062\010\uffc3" +
    "\011\uffc3\013\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\026" +
    "\uffc3\027\uffc3\030\uffc3\031\uffc3\032\uffc3\034\uffc3\035\uffc3" +
    "\036\uffc3\044\uffc3\045\uffc3\053\uffc3\054\uffc3\055\uffc3\057" +
    "\uffc3\060\uffc3\061\uffc3\062\uffc3\001\002\000\014\005\131" +
    "\006\uffbc\013\330\016\327\066\125\001\002\000\004\006" +
    "\u0155\001\002\000\004\012\u0156\001\002\000\062\010\uffbb" +
    "\011\uffbb\013\uffbb\022\uffbb\023\uffbb\024\uffbb\025\uffbb\026" +
    "\uffbb\027\uffbb\030\uffbb\031\uffbb\032\uffbb\034\uffbb\035\uffbb" +
    "\036\uffbb\044\uffbb\045\uffbb\053\uffbb\054\uffbb\055\uffbb\057" +
    "\uffbb\060\uffbb\061\uffbb\062\uffbb\001\002\000\012\010\ufffb" +
    "\054\ufffb\055\ufffb\057\ufffb\001\002\000\012\010\ufff9\054" +
    "\ufff9\055\ufff9\057\ufff9\001\002\000\012\010\uffeb\054\uffeb" +
    "\055\uffeb\057\uffeb\001\002\000\012\010\ufffc\054\ufffc\055" +
    "\ufffc\057\ufffc\001\002\000\012\010\uffed\054\uffed\055\uffed" +
    "\057\uffed\001\002\000\012\010\ufff6\054\ufff6\055\ufff6\057" +
    "\ufff6\001\002\000\014\005\131\006\uffbc\013\330\016\327" +
    "\066\125\001\002\000\004\006\u015f\001\002\000\004\012" +
    "\u0160\001\002\000\062\010\uffba\011\uffba\013\uffba\022\uffba" +
    "\023\uffba\024\uffba\025\uffba\026\uffba\027\uffba\030\uffba\031" +
    "\uffba\032\uffba\034\uffba\035\uffba\036\uffba\044\uffba\045\uffba" +
    "\053\uffba\054\uffba\055\uffba\057\uffba\060\uffba\061\uffba\062" +
    "\uffba\001\002\000\012\010\ufff2\054\ufff2\055\ufff2\057\ufff2" +
    "\001\002\000\012\010\ufff4\054\ufff4\055\ufff4\057\ufff4\001" +
    "\002\000\012\010\ufff0\054\ufff0\055\ufff0\057\ufff0\001\002" +
    "\000\012\010\ufffd\054\ufffd\055\ufffd\057\ufffd\001\002\000" +
    "\026\005\uff3c\013\213\016\202\040\206\041\201\042\212" +
    "\043\176\046\177\064\207\066\125\001\002\000\004\006" +
    "\u0167\001\002\000\004\007\u0168\001\002\000\054\010\uff8f" +
    "\011\uff8f\013\uff8f\022\uff8f\023\uff8f\024\uff8f\025\uff8f\026" +
    "\uff8f\027\uff8f\030\uff8f\031\uff8f\032\uff8f\034\uff8f\035\uff8f" +
    "\036\uff8f\044\uff8f\045\uff8f\053\uff8f\060\uff8f\061\uff8f\062" +
    "\uff8f\001\002\000\054\010\uffe7\011\050\013\037\022\036" +
    "\023\035\024\026\025\051\026\042\027\046\030\016\031" +
    "\053\032\043\034\065\035\057\036\045\044\063\045\021" +
    "\053\041\060\060\061\056\062\013\001\002\000\004\010" +
    "\u016b\001\002\000\066\010\uff77\011\uff77\013\uff77\022\uff77" +
    "\023\uff77\024\uff77\025\uff77\026\uff77\027\uff77\030\uff77\031" +
    "\uff77\032\uff77\034\uff77\035\uff77\036\uff77\044\uff77\045\uff77" +
    "\051\u016f\052\u016e\053\uff77\054\uff77\055\uff77\057\uff77\060" +
    "\uff77\061\uff77\062\uff77\001\002\000\062\010\uff8e\011\uff8e" +
    "\013\uff8e\022\uff8e\023\uff8e\024\uff8e\025\uff8e\026\uff8e\027" +
    "\uff8e\030\uff8e\031\uff8e\032\uff8e\034\uff8e\035\uff8e\036\uff8e" +
    "\044\uff8e\045\uff8e\053\uff8e\054\uff8e\055\uff8e\057\uff8e\060" +
    "\uff8e\061\uff8e\062\uff8e\001\002\000\062\010\uff7a\011\uff7a" +
    "\013\uff7a\022\uff7a\023\uff7a\024\uff7a\025\uff7a\026\uff7a\027" +
    "\uff7a\030\uff7a\031\uff7a\032\uff7a\034\uff7a\035\uff7a\036\uff7a" +
    "\044\uff7a\045\uff7a\053\uff7a\054\uff7a\055\uff7a\057\uff7a\060" +
    "\uff7a\061\uff7a\062\uff7a\001\002\000\004\007\u0178\001\002" +
    "\000\004\005\u0170\001\002\000\026\005\uff3c\013\213\016" +
    "\202\040\206\041\201\042\212\043\176\046\177\064\207" +
    "\066\125\001\002\000\004\006\u0172\001\002\000\004\007" +
    "\u0173\001\002\000\054\010\uff7c\011\uff7c\013\uff7c\022\uff7c" +
    "\023\uff7c\024\uff7c\025\uff7c\026\uff7c\027\uff7c\030\uff7c\031" +
    "\uff7c\032\uff7c\034\uff7c\035\uff7c\036\uff7c\044\uff7c\045\uff7c" +
    "\053\uff7c\060\uff7c\061\uff7c\062\uff7c\001\002\000\054\010" +
    "\uffe7\011\050\013\037\022\036\023\035\024\026\025\051" +
    "\026\042\027\046\030\016\031\053\032\043\034\065\035" +
    "\057\036\045\044\063\045\021\053\041\060\060\061\056" +
    "\062\013\001\002\000\004\010\u0176\001\002\000\066\010" +
    "\uff77\011\uff77\013\uff77\022\uff77\023\uff77\024\uff77\025\uff77" +
    "\026\uff77\027\uff77\030\uff77\031\uff77\032\uff77\034\uff77\035" +
    "\uff77\036\uff77\044\uff77\045\uff77\051\u016f\052\u016e\053\uff77" +
    "\054\uff77\055\uff77\057\uff77\060\uff77\061\uff77\062\uff77\001" +
    "\002\000\062\010\uff7b\011\uff7b\013\uff7b\022\uff7b\023\uff7b" +
    "\024\uff7b\025\uff7b\026\uff7b\027\uff7b\030\uff7b\031\uff7b\032" +
    "\uff7b\034\uff7b\035\uff7b\036\uff7b\044\uff7b\045\uff7b\053\uff7b" +
    "\054\uff7b\055\uff7b\057\uff7b\060\uff7b\061\uff7b\062\uff7b\001" +
    "\002\000\054\010\uff79\011\uff79\013\uff79\022\uff79\023\uff79" +
    "\024\uff79\025\uff79\026\uff79\027\uff79\030\uff79\031\uff79\032" +
    "\uff79\034\uff79\035\uff79\036\uff79\044\uff79\045\uff79\053\uff79" +
    "\060\uff79\061\uff79\062\uff79\001\002\000\054\010\uffe7\011" +
    "\050\013\037\022\036\023\035\024\026\025\051\026\042" +
    "\027\046\030\016\031\053\032\043\034\065\035\057\036" +
    "\045\044\063\045\021\053\041\060\060\061\056\062\013" +
    "\001\002\000\004\010\u017b\001\002\000\062\010\uff78\011" +
    "\uff78\013\uff78\022\uff78\023\uff78\024\uff78\025\uff78\026\uff78" +
    "\027\uff78\030\uff78\031\uff78\032\uff78\034\uff78\035\uff78\036" +
    "\uff78\044\uff78\045\uff78\053\uff78\054\uff78\055\uff78\057\uff78" +
    "\060\uff78\061\uff78\062\uff78\001\002\000\004\010\u017d\001" +
    "\002\000\006\002\uff44\013\u017e\001\002\000\004\005\u0180" +
    "\001\002\000\004\002\ufffe\001\002\000\006\006\uff49\011" +
    "\uff49\001\002\000\006\006\uff41\011\u0183\001\002\000\004" +
    "\006\uff48\001\002\000\004\013\u0184\001\002\000\006\006" +
    "\uff43\014\uff43\001\002\000\006\006\uff3e\014\u0186\001\002" +
    "\000\004\011\u0188\001\002\000\004\006\uff42\001\002\000" +
    "\004\013\u0189\001\002\000\006\006\uff40\014\uff40\001\002" +
    "\000\006\006\uff3e\014\u0186\001\002\000\004\006\uff3f\001" +
    "\002\000\004\006\u018d\001\002\000\004\007\u018e\001\002" +
    "\000\054\010\uff47\011\uff47\013\uff47\022\uff47\023\uff47\024" +
    "\uff47\025\uff47\026\uff47\027\uff47\030\uff47\031\uff47\032\uff47" +
    "\034\uff47\035\uff47\036\uff47\044\uff47\045\uff47\053\uff47\060" +
    "\uff47\061\uff47\062\uff47\001\002\000\054\010\uffe7\011\050" +
    "\013\037\022\036\023\035\024\026\025\051\026\042\027" +
    "\046\030\016\031\053\032\043\034\065\035\057\036\045" +
    "\044\063\045\021\053\041\060\060\061\056\062\013\001" +
    "\002\000\004\010\u0191\001\002\000\006\002\uff46\013\uff46" +
    "\001\002\000\006\002\uff44\013\u017e\001\002\000\004\002" +
    "\uff45\001\002\000\012\010\uffe9\054\uffe9\055\uffe9\057\uffe9" +
    "\001\002\000\004\006\u0196\001\002\000\004\012\u0197\001" +
    "\002\000\062\010\uffb6\011\uffb6\013\uffb6\022\uffb6\023\uffb6" +
    "\024\uffb6\025\uffb6\026\uffb6\027\uffb6\030\uffb6\031\uffb6\032" +
    "\uffb6\034\uffb6\035\uffb6\036\uffb6\044\uffb6\045\uffb6\053\uffb6" +
    "\054\uffb6\055\uffb6\057\uffb6\060\uffb6\061\uffb6\062\uffb6\001" +
    "\002\000\012\010\uffea\054\uffea\055\uffea\057\uffea\001\002" +
    "\000\012\010\ufff5\054\ufff5\055\ufff5\057\ufff5\001\002\000" +
    "\026\005\uff3c\013\213\016\202\040\206\041\201\042\212" +
    "\043\176\046\177\064\207\066\125\001\002\000\004\006" +
    "\u019c\001\002\000\004\007\u019d\001\002\000\054\010\uff4d" +
    "\011\uff4d\013\uff4d\022\uff4d\023\uff4d\024\uff4d\025\uff4d\026" +
    "\uff4d\027\uff4d\030\uff4d\031\uff4d\032\uff4d\034\uff4d\035\uff4d" +
    "\036\uff4d\044\uff4d\045\uff4d\053\uff4d\060\uff4d\061\uff4d\062" +
    "\uff4d\001\002\000\054\010\uffe7\011\050\013\037\022\036" +
    "\023\035\024\026\025\051\026\042\027\046\030\016\031" +
    "\053\032\043\034\065\035\057\036\045\044\063\045\021" +
    "\053\041\060\060\061\056\062\013\001\002\000\004\010" +
    "\u01a0\001\002\000\062\010\uff4c\011\uff4c\013\uff4c\022\uff4c" +
    "\023\uff4c\024\uff4c\025\uff4c\026\uff4c\027\uff4c\030\uff4c\031" +
    "\uff4c\032\uff4c\034\uff4c\035\uff4c\036\uff4c\044\uff4c\045\uff4c" +
    "\053\uff4c\054\uff4c\055\uff4c\057\uff4c\060\uff4c\061\uff4c\062" +
    "\uff4c\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u019e\000\006\002\004\076\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\060\003\017\004" +
    "\021\014\030\015\033\017\054\020\032\021\053\022\046" +
    "\023\026\024\013\025\023\026\061\030\024\031\063\032" +
    "\022\035\060\036\016\041\051\051\027\054\043\061\031" +
    "\062\014\075\037\001\001\000\002\001\001\000\060\003" +
    "\u0198\004\021\014\030\015\033\017\054\020\032\021\053" +
    "\022\046\023\026\024\013\025\023\026\061\030\024\031" +
    "\063\032\022\035\060\036\016\041\051\051\027\054\043" +
    "\061\031\062\014\075\037\001\001\000\060\003\u0197\004" +
    "\021\014\030\015\033\017\054\020\032\021\053\022\046" +
    "\023\026\024\013\025\023\026\061\030\024\031\063\032" +
    "\022\035\060\036\016\041\051\051\027\054\043\061\031" +
    "\062\014\075\037\001\001\000\002\001\001\000\060\003" +
    "\u0193\004\021\014\030\015\033\017\054\020\032\021\053" +
    "\022\046\023\026\024\013\025\023\026\061\030\024\031" +
    "\063\032\022\035\060\036\016\041\051\051\027\054\043" +
    "\061\031\062\014\075\037\001\001\000\004\077\u017b\001" +
    "\001\000\002\001\001\000\060\003\u0163\004\021\014\030" +
    "\015\033\017\054\020\032\021\053\022\046\023\026\024" +
    "\013\025\023\026\061\030\024\031\063\032\022\035\060" +
    "\036\016\041\051\051\027\054\043\061\031\062\014\075" +
    "\037\001\001\000\060\003\u0162\004\021\014\030\015\033" +
    "\017\054\020\032\021\053\022\046\023\026\024\013\025" +
    "\023\026\061\030\024\031\063\032\022\035\060\036\016" +
    "\041\051\051\027\054\043\061\031\062\014\075\037\001" +
    "\001\000\060\003\u0161\004\021\014\030\015\033\017\054" +
    "\020\032\021\053\022\046\023\026\024\013\025\023\026" +
    "\061\030\024\031\063\032\022\035\060\036\016\041\051" +
    "\051\027\054\043\061\031\062\014\075\037\001\001\000" +
    "\060\003\u0160\004\021\014\030\015\033\017\054\020\032" +
    "\021\053\022\046\023\026\024\013\025\023\026\061\030" +
    "\024\031\063\032\022\035\060\036\016\041\051\051\027" +
    "\054\043\061\031\062\014\075\037\001\001\000\002\001" +
    "\001\000\060\003\u015b\004\021\014\030\015\033\017\054" +
    "\020\032\021\053\022\046\023\026\024\013\025\023\026" +
    "\061\030\024\031\063\032\022\035\060\036\016\041\051" +
    "\051\027\054\043\061\031\062\014\075\037\001\001\000" +
    "\060\003\u015a\004\021\014\030\015\033\017\054\020\032" +
    "\021\053\022\046\023\026\024\013\025\023\026\061\030" +
    "\024\031\063\032\022\035\060\036\016\041\051\051\027" +
    "\054\043\061\031\062\014\075\037\001\001\000\060\003" +
    "\u0159\004\021\014\030\015\033\017\054\020\032\021\053" +
    "\022\046\023\026\024\013\025\023\026\061\030\024\031" +
    "\063\032\022\035\060\036\016\041\051\051\027\054\043" +
    "\061\031\062\014\075\037\001\001\000\060\003\u0158\004" +
    "\021\014\030\015\033\017\054\020\032\021\053\022\046" +
    "\023\026\024\013\025\023\026\061\030\024\031\063\032" +
    "\022\035\060\036\016\041\051\051\027\054\043\061\031" +
    "\062\014\075\037\001\001\000\060\003\u0157\004\021\014" +
    "\030\015\033\017\054\020\032\021\053\022\046\023\026" +
    "\024\013\025\023\026\061\030\024\031\063\032\022\035" +
    "\060\036\016\041\051\051\027\054\043\061\031\062\014" +
    "\075\037\001\001\000\060\003\u0156\004\021\014\030\015" +
    "\033\017\054\020\032\021\053\022\046\023\026\024\013" +
    "\025\023\026\061\030\024\031\063\032\022\035\060\036" +
    "\016\041\051\051\027\054\043\061\031\062\014\075\037" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\u0129\001\001\000\060\003\u0127\004\021\014\030\015\033" +
    "\017\054\020\032\021\053\022\046\023\026\024\013\025" +
    "\023\026\061\030\024\031\063\032\022\035\060\036\016" +
    "\041\051\051\027\054\043\061\031\062\014\075\037\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\060\003\375\004\021\014\030\015\033\017\054\020" +
    "\032\021\053\022\046\023\026\024\013\025\023\026\061" +
    "\030\024\031\063\032\022\035\060\036\016\041\051\051" +
    "\027\054\043\061\031\062\014\075\037\001\001\000\002" +
    "\001\001\000\002\001\001\000\060\003\347\004\021\014" +
    "\030\015\033\017\054\020\032\021\053\022\046\023\026" +
    "\024\013\025\023\026\061\030\024\031\063\032\022\035" +
    "\060\036\016\041\051\051\027\054\043\061\031\062\014" +
    "\075\037\001\001\000\004\005\333\001\001\000\002\001" +
    "\001\000\060\003\321\004\021\014\030\015\033\017\054" +
    "\020\032\021\053\022\046\023\026\024\013\025\023\026" +
    "\061\030\024\031\063\032\022\035\060\036\016\041\051" +
    "\051\027\054\043\061\031\062\014\075\037\001\001\000" +
    "\002\001\001\000\060\003\315\004\021\014\030\015\033" +
    "\017\054\020\032\021\053\022\046\023\026\024\013\025" +
    "\023\026\061\030\024\031\063\032\022\035\060\036\016" +
    "\041\051\051\027\054\043\061\031\062\014\075\037\001" +
    "\001\000\060\003\314\004\021\014\030\015\033\017\054" +
    "\020\032\021\053\022\046\023\026\024\013\025\023\026" +
    "\061\030\024\031\063\032\022\035\060\036\016\041\051" +
    "\051\027\054\043\061\031\062\014\075\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\060" +
    "\003\075\004\021\014\030\015\033\017\054\020\032\021" +
    "\053\022\046\023\026\024\013\025\023\026\061\030\024" +
    "\031\063\032\022\035\060\036\016\041\051\051\027\054" +
    "\043\061\031\062\014\075\037\001\001\000\060\003\074" +
    "\004\021\014\030\015\033\017\054\020\032\021\053\022" +
    "\046\023\026\024\013\025\023\026\061\030\024\031\063" +
    "\032\022\035\060\036\016\041\051\051\027\054\043\061" +
    "\031\062\014\075\037\001\001\000\002\001\001\000\060" +
    "\003\070\004\021\014\030\015\033\017\054\020\032\021" +
    "\053\022\046\023\026\024\013\025\023\026\061\030\024" +
    "\031\063\032\022\035\060\036\016\041\051\051\027\054" +
    "\043\061\031\062\014\075\037\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\126" +
    "\077\001\001\000\004\055\100\001\001\000\004\127\173" +
    "\001\001\000\004\007\170\001\001\000\002\001\001\000" +
    "\004\007\105\001\001\000\012\010\126\011\122\067\123" +
    "\071\125\001\001\000\004\134\106\001\001\000\004\056" +
    "\107\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\117\001\001\000\002\001\001\000\004\007\114\001" +
    "\001\000\004\136\115\001\001\000\004\056\116\001\001" +
    "\000\002\001\001\000\004\135\120\001\001\000\004\056" +
    "\121\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\012\160\013\137\001" +
    "\001\000\002\001\001\000\006\012\161\013\137\001\001" +
    "\000\012\010\154\011\122\067\123\071\153\001\001\000" +
    "\002\001\001\000\006\012\133\013\137\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\067\142\071\143\001\001\000\006\012\146" +
    "\013\137\001\001\000\006\012\145\013\137\001\001\000" +
    "\002\001\001\000\006\012\144\013\137\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\012\161\013\137\001\001" +
    "\000\006\012\133\013\137\001\001\000\006\012\160\013" +
    "\137\001\001\000\002\001\001\000\010\012\156\013\137" +
    "\070\157\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\133\171\001\001\000\004" +
    "\056\172\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\042\207\043\203\045\210\046\202\066\204\071\177" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\044" +
    "\274\001\001\000\002\001\001\000\004\044\271\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\044\213\001\001\000" +
    "\002\001\001\000\004\071\217\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\044\225\001\001\000\002\001\001\000\006\045\227\066" +
    "\204\001\001\000\002\001\001\000\004\130\231\001\001" +
    "\000\004\057\233\001\001\000\002\001\001\000\004\131" +
    "\234\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\132\237\001\001\000\060\003\240\004\021\014\030\015" +
    "\033\017\054\020\032\021\053\022\046\023\026\024\013" +
    "\025\023\026\061\030\024\031\063\032\022\035\060\036" +
    "\016\041\051\051\027\054\043\061\031\062\014\075\037" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\137\245\001\001\000\004" +
    "\060\246\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\141\254\001\001\000\004\060\255\001\001\000\002\001" +
    "\001\000\004\142\257\001\001\000\004\060\260\001\001" +
    "\000\002\001\001\000\004\140\262\001\001\000\004\060" +
    "\263\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\043\267\071\177\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\143\304\001\001\000" +
    "\060\003\305\004\021\014\030\015\033\017\054\020\032" +
    "\021\053\022\046\023\026\024\013\025\023\026\061\030" +
    "\024\031\063\032\022\035\060\036\016\041\051\051\027" +
    "\054\043\061\031\062\014\075\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\042\311" +
    "\043\203\045\210\046\202\066\204\071\177\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\010\324" +
    "\011\122\016\325\067\123\071\323\001\001\000\006\012" +
    "\160\013\137\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\012\161\013\137\001\001\000\006\012\133\013" +
    "\137\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\007\336\100\335\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\340\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\007\343\101\342\001" +
    "\001\000\004\006\346\001\001\000\004\102\344\001\001" +
    "\000\004\006\345\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\103\354\001\001\000\004\033" +
    "\356\001\001\000\004\104\373\001\001\000\002\001\001" +
    "\000\004\105\360\001\001\000\004\034\362\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\106\367\001\001" +
    "\000\004\107\365\001\001\000\004\034\366\001\001\000" +
    "\002\001\001\000\004\034\370\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\034\374\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\027\u0100" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\052\u010d\001\001\000\004\053\u011c\001" +
    "\001\000\006\072\u0110\073\u0111\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\071\u0113\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\124\u0115\001\001\000\060" +
    "\003\u0116\004\021\014\030\015\033\017\054\020\032\021" +
    "\053\022\046\023\026\024\013\025\023\026\061\030\024" +
    "\031\063\032\022\035\060\036\016\041\051\051\027\054" +
    "\043\061\031\062\014\075\037\001\001\000\004\074\u0118" +
    "\001\001\000\002\001\001\000\004\052\u0119\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\125\u011f\001\001\000" +
    "\060\003\u0120\004\021\014\030\015\033\017\054\020\032" +
    "\021\053\022\046\023\026\024\013\025\023\026\061\030" +
    "\024\031\063\032\022\035\060\036\016\041\051\051\027" +
    "\054\043\061\031\062\014\075\037\001\001\000\004\074" +
    "\u0121\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\052\u0124\001\001\000\004\053\u0125\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\110\u012c\001" +
    "\001\000\014\010\u012e\011\122\037\u0130\067\123\071\u012d" +
    "\001\001\000\010\012\160\013\137\113\u0147\001\001\000" +
    "\004\114\u0145\001\001\000\010\012\161\013\137\111\u0143" +
    "\001\001\000\002\001\001\000\010\012\133\013\137\112" +
    "\u0132\001\001\000\004\040\u0134\001\001\000\012\010\u0138" +
    "\011\122\067\123\071\u0137\001\001\000\002\001\001\000" +
    "\010\012\161\013\137\115\u013f\001\001\000\010\012\133" +
    "\013\137\116\u013d\001\001\000\010\012\160\013\137\117" +
    "\u013b\001\001\000\004\120\u0139\001\001\000\004\040\u013a" +
    "\001\001\000\002\001\001\000\004\040\u013c\001\001\000" +
    "\002\001\001\000\004\040\u013e\001\001\000\002\001\001" +
    "\000\004\040\u0140\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\040\u0144\001\001\000\002" +
    "\001\001\000\004\040\u0146\001\001\000\002\001\001\000" +
    "\004\040\u0148\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\010\324\011\122\016\u014f\067\123" +
    "\071\323\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\010\324\011\122\016\u0153\067\123" +
    "\071\323\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\010\324\011\122\016\u015d\067\123\071\323" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\042\u0165\043\203\045\210\046" +
    "\202\066\204\071\177\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\121\u0168\001\001\000\060\003\u0169\004" +
    "\021\014\030\015\033\017\054\020\032\021\053\022\046" +
    "\023\026\024\013\025\023\026\061\030\024\031\063\032" +
    "\022\035\060\036\016\041\051\051\027\054\043\061\031" +
    "\062\014\075\037\001\001\000\002\001\001\000\006\047" +
    "\u016b\050\u016c\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\042\u0170\043" +
    "\203\045\210\046\202\066\204\071\177\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\122\u0173\001\001\000" +
    "\060\003\u0174\004\021\014\030\015\033\017\054\020\032" +
    "\021\053\022\046\023\026\024\013\025\023\026\061\030" +
    "\024\031\063\032\022\035\060\036\016\041\051\051\027" +
    "\054\043\061\031\062\014\075\037\001\001\000\002\001" +
    "\001\000\006\047\u0176\050\u016c\001\001\000\002\001\001" +
    "\000\004\123\u0178\001\001\000\060\003\u0179\004\021\014" +
    "\030\015\033\017\054\020\032\021\053\022\046\023\026" +
    "\024\013\025\023\026\061\030\024\031\063\032\022\035" +
    "\060\036\016\041\051\051\027\054\043\061\031\062\014" +
    "\075\037\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\063\u017e\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\145\u0180\001\001\000\004\064" +
    "\u0181\001\001\000\004\146\u018b\001\001\000\002\001\001" +
    "\000\004\151\u0184\001\001\000\004\065\u0186\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\152\u0189\001\001\000\004\065\u018a\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\147\u018e" +
    "\001\001\000\060\003\u018f\004\021\014\030\015\033\017" +
    "\054\020\032\021\053\022\046\023\026\024\013\025\023" +
    "\026\061\030\024\031\063\032\022\035\060\036\016\041" +
    "\051\051\027\054\043\061\031\062\014\075\037\001\001" +
    "\000\002\001\001\000\004\150\u0191\001\001\000\004\063" +
    "\u0192\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\042\u019a\043\203\045\210" +
    "\046\202\066\204\071\177\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\144\u019d\001\001\000\060\003\u019e" +
    "\004\021\014\030\015\033\017\054\020\032\021\053\022" +
    "\046\023\026\024\013\025\023\026\061\030\024\031\063" +
    "\032\022\035\060\036\016\041\051\051\027\054\043\061" +
    "\031\062\014\075\037\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol error;

	private JSONObject resultadoJSON;

	private Stack pilaDeInstrucciones = new Stack();
	private Stack pilaDePilas = new Stack();

	private ArrayList<JSONObject> instruccionesDelPrograma = new ArrayList<>();

    public JSONObject getResultadoJSON() {
        return resultadoJSON;
    }

    public Symbol getError(){
        //Regresa el estado de error.
        return this.error;
	}

    public void syntax_error(Symbol error){
        //En caso de error recupera el símbolo exacto del error.
        this.error = error;
        resultadoJSON.put("status",false);
        resultadoJSON.put("message","error");
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action_part00000000(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;

	/* Inicializa el objeto resultadoJSON que es el resultado completo del análisis */
	 resultadoJSON = new JSONObject();
	 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$0",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;

	    /* Vacía las instrucciones de BloqueDeInstrucciones */
	    resultadoJSON.put("main",instruccionesDelPrograma);
	    instruccionesDelPrograma = new ArrayList<>();
	 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$1",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Inicio ::= NT$0 PROGRAMA PARENTESISABRE PARENTESISCIERRA LLAVEABRE BloqueDeInstrucciones NT$1 LLAVECIERRA Funciones 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
        /* Finaliza resultadoJSON */

         resultadoJSON.put("status",true);
         resultadoJSON.put("message","success");

         /* Vacía las instrucciones de Funciones */
         resultadoJSON.put("functions",instruccionesDelPrograma);
         
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Inicio",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // BloqueDeInstrucciones ::= InstruccionDeclaracionDeVariables BloqueDeInstrucciones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueDeInstrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // BloqueDeInstrucciones ::= InstruccionModificacionDeValorDeVariables BloqueDeInstrucciones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueDeInstrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // BloqueDeInstrucciones ::= InstruccionAvanzar BloqueDeInstrucciones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueDeInstrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // BloqueDeInstrucciones ::= InstruccionEspera BloqueDeInstrucciones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueDeInstrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // BloqueDeInstrucciones ::= InstruccionGirarALaIzquierda BloqueDeInstrucciones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueDeInstrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // BloqueDeInstrucciones ::= InstruccionGirarALaDerecha BloqueDeInstrucciones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueDeInstrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // BloqueDeInstrucciones ::= InstruccionTomarObjeto BloqueDeInstrucciones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueDeInstrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // BloqueDeInstrucciones ::= InstruccionSoltarObjeto BloqueDeInstrucciones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueDeInstrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // BloqueDeInstrucciones ::= InstruccionEliminarObjeto BloqueDeInstrucciones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueDeInstrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // BloqueDeInstrucciones ::= InstruccionDesactivarKaboom BloqueDeInstrucciones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueDeInstrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // BloqueDeInstrucciones ::= InstruccionPintarSuelo BloqueDeInstrucciones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueDeInstrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // BloqueDeInstrucciones ::= InstruccionDejarDePintarSuelo BloqueDeInstrucciones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueDeInstrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // BloqueDeInstrucciones ::= InstruccionImprimirVariables BloqueDeInstrucciones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueDeInstrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // BloqueDeInstrucciones ::= InstruccionImprimirCadenas BloqueDeInstrucciones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueDeInstrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // BloqueDeInstrucciones ::= InstruccionTerminarBloque BloqueDeInstrucciones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueDeInstrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // BloqueDeInstrucciones ::= EstrucutraDeControlIf BloqueDeInstrucciones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueDeInstrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // BloqueDeInstrucciones ::= EstrucutraDeControlCase BloqueDeInstrucciones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueDeInstrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // BloqueDeInstrucciones ::= EstrucutraDeControlFor BloqueDeInstrucciones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueDeInstrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // BloqueDeInstrucciones ::= EstrucutraDeControlDoWhile BloqueDeInstrucciones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueDeInstrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // BloqueDeInstrucciones ::= EstrucutraDeControlWhile BloqueDeInstrucciones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueDeInstrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // BloqueDeInstrucciones ::= LlamadaAFuncion BloqueDeInstrucciones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueDeInstrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // BloqueDeInstrucciones ::= inrementosYDecrementos BloqueDeInstrucciones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueDeInstrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // BloqueDeInstrucciones ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueDeInstrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // InstruccionDeclaracionDeVariables ::= VARIABLE DeclaracionDeVariables PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstruccionDeclaracionDeVariables",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DeclaracionDeVariables ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        instruccionesDelPrograma.add(
            new JSONObject()
                .put("identifier",identificador)
                .put("type",0)
                .put("value",-1)
                .put("valueFrom","")
                .put("operation",new JSONObject())
                .put("random",new JSONObject())
                .put("instruction","DECLARAVARIABLE")
        );
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeclaracionDeVariables",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DeclaracionDeVariables ::= IDENTIFICADOR AsignacionDeValoresAlDeclararVariable 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int objetoJSONleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int objetoJSONright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object objetoJSON = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
	    JSONObject JSONTemporal = (JSONObject) objetoJSON;
	    instruccionesDelPrograma.add(
                    new JSONObject()
                        .put("identifier",identificador)
                        .put("type",JSONTemporal.get("type"))
                        .put("value",JSONTemporal.get("value"))
                        .put("valueFrom",JSONTemporal.get("valueFrom"))
                        .put("operation",JSONTemporal.get("operation"))
                        .put("random",JSONTemporal.get("random"))
                        .put("instruction","DECLARAVARIABLE")
                );
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeclaracionDeVariables",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$2 ::= 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

            instruccionesDelPrograma.add(
                new JSONObject()
                    .put("identifier",identificador)
                    .put("type",0)
                    .put("value",-1)
                    .put("valueFrom","")
                    .put("operation",new JSONObject())
                    .put("random",new JSONObject())
                    .put("instruction","DECLARAVARIABLE")
            );
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$2",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DeclaracionDeVariables ::= IDENTIFICADOR NT$2 MultiplesDeclaraciones 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeclaracionDeVariables",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$3 ::= 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

             instruccionesDelPrograma.add(
                 new JSONObject()
                     .put("identifier",identificador)
                     .put("type",0)
                     .put("value",-1)
                     .put("valueFrom","")
                     .put("operation",new JSONObject())
                     .put("random",new JSONObject())
                     .put("instruction","DECLARAVARIABLE")
             );
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$3",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // MultiplesDeclaraciones ::= SEPARADOR IDENTIFICADOR NT$3 MultiplesDeclaraciones 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MultiplesDeclaraciones",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$4 ::= 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int objetoJSONleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int objetoJSONright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object objetoJSON = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

        JSONObject JSONTemporal = (JSONObject) objetoJSON;
        instruccionesDelPrograma.add(
                     new JSONObject()
                         .put("identifier",identificador)
                         .put("type",JSONTemporal.get("type"))
                         .put("value",JSONTemporal.get("value"))
                         .put("valueFrom",JSONTemporal.get("valueFrom"))
                         .put("operation",JSONTemporal.get("operation"))
                         .put("random",JSONTemporal.get("random"))
                         .put("instruction","DECLARAVARIABLE")
                 );
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$4",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // MultiplesDeclaraciones ::= SEPARADOR IDENTIFICADOR AsignacionDeValoresAlDeclararVariable NT$4 MultiplesDeclaraciones 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int objetoJSONleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int objetoJSONright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object objetoJSON = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MultiplesDeclaraciones",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // MultiplesDeclaraciones ::= SEPARADOR IDENTIFICADOR AsignacionDeValoresAlDeclararVariable 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int objetoJSONleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int objetoJSONright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object objetoJSON = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        JSONObject JSONTemporal = (JSONObject) objetoJSON;
        instruccionesDelPrograma.add(
            new JSONObject()
                .put("identifier",identificador)
                 .put("type",JSONTemporal.get("type"))
                 .put("value",JSONTemporal.get("value"))
                 .put("valueFrom",JSONTemporal.get("valueFrom"))
                 .put("operation",JSONTemporal.get("operation"))
                 .put("random",JSONTemporal.get("random"))
                 .put("instruction","DECLARAVARIABLE")
        );
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MultiplesDeclaraciones",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // MultiplesDeclaraciones ::= SEPARADOR IDENTIFICADOR 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
             instruccionesDelPrograma.add(
                 new JSONObject()
                     .put("identifier",identificador)
                     .put("type",0)
                     .put("value",-1)
                     .put("valueFrom","")
                     .put("operation",new JSONObject())
                     .put("random",new JSONObject())
                     .put("instruction","DECLARAVARIABLE")
             );
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MultiplesDeclaraciones",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // AsignacionDeValoresAlDeclararVariable ::= OPERADORASIGNACION NUMERO 
            {
              Object RESULT =null;
		int numeroleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int numeroright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object numero = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
	    RESULT = new JSONObject()
            .put("type",1)
            .put("value",Integer.valueOf((String) numero))
            .put("valueFrom","")
            .put("operation",new JSONObject())
            .put("random",new JSONObject())
        ;
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsignacionDeValoresAlDeclararVariable",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // AsignacionDeValoresAlDeclararVariable ::= OPERADORASIGNACION IDENTIFICADOR 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        RESULT = new JSONObject()
              .put("type",4)
              .put("value",-1)
              .put("valueFrom",identificador)
              .put("operation",new JSONObject())
              .put("random",new JSONObject())
          ;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsignacionDeValoresAlDeclararVariable",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // AsignacionDeValoresAlDeclararVariable ::= OPERADORASIGNACION NumeroAleatorio 
            {
              Object RESULT =null;
		int objetoJSONleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int objetoJSONright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object objetoJSON = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
	     //JSONObject JSONTemporal = (JSONObject) objetoJSON;
         RESULT = new JSONObject()
               .put("type",2)
               .put("value",-1)
               .put("valueFrom","")
               .put("operation",new JSONObject())
               .put("random",(JSONObject) objetoJSON)
           ;
     
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsignacionDeValoresAlDeclararVariable",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // AsignacionDeValoresAlDeclararVariable ::= OPERADORASIGNACION OperacionAritmetica 
            {
              Object RESULT =null;
		int objetoJSONleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int objetoJSONright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object objetoJSON = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        //JSONObject JSONTemporal = (JSONObject) objetoJSON;
        RESULT = new JSONObject()
            .put("type",3)
            .put("value",-1)
            .put("valueFrom","")
            .put("operation",(JSONObject) objetoJSON)
            .put("random",new JSONObject())
        ;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsignacionDeValoresAlDeclararVariable",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // AsignacionDeValoresAlDeclararVariable ::= OPERADORASIGNACION QUETENGODELANTE PARENTESISABRE PARENTESISCIERRA 
            {
              Object RESULT =null;
		
        RESULT = new JSONObject()
              .put("type",5)
              .put("value",-1)
              .put("valueFrom","")
              .put("operation",new JSONObject())
              .put("random",new JSONObject())
          ;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsignacionDeValoresAlDeclararVariable",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OperacionAritmetica ::= OperacionSinParentesis 
            {
              Object RESULT =null;
		int objetoJSONleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int objetoJSONright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object objetoJSON = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = objetoJSON; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperacionAritmetica",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OperacionAritmetica ::= OperacionConParentesis 
            {
              Object RESULT =null;
		int objetoJSONleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int objetoJSONright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object objetoJSON = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = objetoJSON; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperacionAritmetica",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OperacionConParentesis ::= PARENTESISABRE OperacionAritmetica PARENTESISCIERRA continuaOperacion 
            {
              Object RESULT =null;
		int operacionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int operacionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object operacion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int objetoJSONleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int objetoJSONright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object objetoJSON = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        RESULT = new JSONObject()
            .put("isBracket",true)
            .put("type",0)
            .put("value",-1)
            .put("valueFrom","")
            .put("random",(JSONObject) objetoJSON)
            .put("operation",(JSONObject) operacion)
            .put("operator","")
        ;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperacionConParentesis",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // continuaOperacion ::= ContinuacionOperacionSinParentesis 
            {
              Object RESULT =null;
		int objetoJSONleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int objetoJSONright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object objetoJSON = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = objetoJSON; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("continuaOperacion",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // continuaOperacion ::= 
            {
              Object RESULT =null;
		 RESULT = new JSONObject(); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("continuaOperacion",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OperacionSinParentesis ::= IDENTIFICADOR ContinuacionOperacionSinParentesis 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int objetoJSONleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int objetoJSONright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object objetoJSON = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
         RESULT = new JSONObject()
             .put("isBracket",false)
             .put("type",2)
             .put("value",-1)
             .put("valueFrom",identificador)
             .put("random",new JSONObject())
             .put("operation",(JSONObject) objetoJSON)
             .put("operator","")
         ;
     
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperacionSinParentesis",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OperacionSinParentesis ::= NUMERO ContinuacionOperacionSinParentesis 
            {
              Object RESULT =null;
		int numeroleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int numeroright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object numero = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int objetoJSONleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int objetoJSONright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object objetoJSON = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        RESULT = new JSONObject()
            .put("isBracket",false)
            .put("type",1)
            .put("value",Integer.valueOf((String) numero))
            .put("valueFrom","")
            .put("random",new JSONObject())
            .put("operation",(JSONObject) objetoJSON)
            .put("operator","")
        ;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperacionSinParentesis",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // OperacionSinParentesis ::= NumeroAleatorio ContinuacionOperacionSinParentesis 
            {
              Object RESULT =null;
		int randomleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int randomright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object random = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int objetoJSONleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int objetoJSONright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object objetoJSON = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        RESULT = new JSONObject()
            .put("isBracket",false)
            .put("type",3)
            .put("value",-1)
            .put("valueFrom","")
            .put("random",(JSONObject) random)
            .put("operation",(JSONObject) objetoJSON)
            .put("operator","")
        ;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperacionSinParentesis",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ContinuacionOperacionSinParentesis ::= OperadoresAritmeticos IDENTIFICADOR ContinuacionOperacionSinParentesis 
            {
              Object RESULT =null;
		int operatorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int operatorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object operator = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int objetoJSONleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int objetoJSONright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object objetoJSON = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        RESULT = new JSONObject()
            .put("isBracket",false)
            .put("type",2)
            .put("value",-1)
            .put("valueFrom",identificador)
            .put("random",new JSONObject())
            .put("operation",(JSONObject) objetoJSON)
            .put("operator",operator)
        ;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ContinuacionOperacionSinParentesis",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ContinuacionOperacionSinParentesis ::= OperadoresAritmeticos NUMERO ContinuacionOperacionSinParentesis 
            {
              Object RESULT =null;
		int operatorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int operatorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object operator = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int numeroleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int numeroright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object numero = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int objetoJSONleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int objetoJSONright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object objetoJSON = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        RESULT = new JSONObject()
            .put("isBracket",false)
            .put("type",1)
            .put("value",Integer.valueOf((String) numero))
            .put("valueFrom","")
            .put("random",new JSONObject())
            .put("operation",(JSONObject) objetoJSON)
            .put("operator",operator)
        ;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ContinuacionOperacionSinParentesis",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ContinuacionOperacionSinParentesis ::= OperadoresAritmeticos NumeroAleatorio ContinuacionOperacionSinParentesis 
            {
              Object RESULT =null;
		int operatorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int operatorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object operator = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int aleatorioleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aleatorioright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object aleatorio = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int objetoJSONleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int objetoJSONright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object objetoJSON = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        RESULT = new JSONObject()
            .put("isBracket",false)
            .put("type",3)
            .put("value",-1)
            .put("valueFrom","")
            .put("random",(JSONObject) aleatorio)
            .put("operation",(JSONObject) objetoJSON)
            .put("operator",operator)
        ;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ContinuacionOperacionSinParentesis",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ContinuacionOperacionSinParentesis ::= OperadoresAritmeticos OperacionConParentesis 
            {
              Object RESULT =null;
		int operatorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int operatorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object operator = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int objetoJSONleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int objetoJSONright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object objetoJSON = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
         RESULT = new JSONObject()
             .put("isBracket",true)
             .put("type",0)
             .put("value",-1)
             .put("valueFrom","")
             .put("random",new JSONObject())
             .put("operation",(JSONObject) objetoJSON)
             .put("operator",operator)
         ;
     
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ContinuacionOperacionSinParentesis",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ContinuacionOperacionSinParentesis ::= OperadoresAritmeticos IDENTIFICADOR 
            {
              Object RESULT =null;
		int operatorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int operatorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object operator = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        RESULT = new JSONObject()
            .put("isBracket",false)
            .put("type",2)
            .put("value",-1)
            .put("valueFrom",identificador)
            .put("random",new JSONObject())
            .put("operation",new JSONObject())
            .put("operator",operator)
        ;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ContinuacionOperacionSinParentesis",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ContinuacionOperacionSinParentesis ::= OperadoresAritmeticos NUMERO 
            {
              Object RESULT =null;
		int operatorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int operatorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object operator = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int numeroleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int numeroright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object numero = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        RESULT = new JSONObject()
            .put("isBracket",false)
            .put("type",1)
            .put("value",Integer.valueOf((String) numero))
            .put("valueFrom","")
            .put("random",new JSONObject())
            .put("operation",new JSONObject())
            .put("operator",operator)
        ;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ContinuacionOperacionSinParentesis",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ContinuacionOperacionSinParentesis ::= OperadoresAritmeticos NumeroAleatorio 
            {
              Object RESULT =null;
		int operatorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int operatorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object operator = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int objetoJSONleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int objetoJSONright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object objetoJSON = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
         RESULT = new JSONObject()
             .put("isBracket",false)
             .put("type",3)
             .put("value",-1)
             .put("valueFrom","")
             .put("random",(JSONObject) objetoJSON)
             .put("operation",new JSONObject())
             .put("operator",operator)
         ;
     
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ContinuacionOperacionSinParentesis",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OperadoresAritmeticos ::= OPERADORARITMETICO 
            {
              Object RESULT =null;
		int operadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int operadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object operador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT= operador; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresAritmeticos",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // OperadoresAritmeticos ::= OPERADORARITMETICOSUMA 
            {
              Object RESULT =null;
		int operadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int operadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object operador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT= operador; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresAritmeticos",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OperadoresAritmeticos ::= OPERADORARITMETICORESTA 
            {
              Object RESULT =null;
		int operadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int operadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object operador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT= operador; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresAritmeticos",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // InstruccionModificacionDeValorDeVariables ::= IDENTIFICADOR AsignacionDeValoresAlDeclararVariable PUNTOYCOMA 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int objetoJSONleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int objetoJSONright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object objetoJSON = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
	    instruccionesDelPrograma.add(
	        new JSONObject()
                .put("identifier",identificador)
                .put("valueFrom",(JSONObject) objetoJSON)
                .put("instruction","MODIFICAVARIABLE")
	    );
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstruccionModificacionDeValorDeVariables",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // InstruccionAvanzar ::= AVANZAR PARENTESISABRE ParametrosDeEntradaDeUnaInstruccion PARENTESISCIERRA PUNTOYCOMA 
            {
              Object RESULT =null;
		int parameterleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int parameterright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object parameter = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
	    instruccionesDelPrograma.add(
            new JSONObject()
                .put("parameter",(JSONObject) parameter)
                .put("instruction","AVANZAR")
        );
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstruccionAvanzar",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // NumeroAleatorio ::= RANDOM PARENTESISABRE NUMERO SEPARADOR NUMERO PARENTESISCIERRA 
            {
              Object RESULT =null;
		int numero1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int numero1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object numero1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int numero2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int numero2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object numero2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        RESULT = new JSONObject()
            .put("from",Integer.valueOf((String) numero1))
            .put("to",Integer.valueOf((String) numero2))
            .put("between",true)
            .put("instruction","RANDOM")
        ;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NumeroAleatorio",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // NumeroAleatorio ::= RANDOM PARENTESISABRE PARENTESISCIERRA 
            {
              Object RESULT =null;
		
        RESULT = new JSONObject()
            .put("from",-1)
            .put("to",-1)
            .put("between",false)
            .put("instruction","RANDOM")
        ;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NumeroAleatorio",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ParametrosDeEntradaDeUnaInstruccion ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
	    RESULT = new JSONObject()
            .put("identifier",identificador)
            .put("type",1)
            .put("value",-1)
            .put("valueFrom",new JSONObject())
        ;
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParametrosDeEntradaDeUnaInstruccion",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ParametrosDeEntradaDeUnaInstruccion ::= NUMERO 
            {
              Object RESULT =null;
		int numeroleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int numeroright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object numero = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
	    RESULT = new JSONObject()
            .put("identifier","")
            .put("type",2)
            .put("value",Integer.valueOf((String) numero))
            .put("valueFrom",new JSONObject())
        ;
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParametrosDeEntradaDeUnaInstruccion",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ParametrosDeEntradaDeUnaInstruccion ::= NumeroAleatorio 
            {
              Object RESULT =null;
		int objetoJSONleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int objetoJSONright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object objetoJSON = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        RESULT = new JSONObject()
            .put("identifier","")
            .put("type",3)
            .put("value",-1)
            .put("valueFrom",(JSONObject) objetoJSON)
        ;
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParametrosDeEntradaDeUnaInstruccion",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ParametrosDeEntradaDeUnaInstruccion ::= OperacionAritmetica 
            {
              Object RESULT =null;
		int objetoJSONleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int objetoJSONright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object objetoJSON = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        RESULT = new JSONObject()
            .put("identifier","")
            .put("type",4)
            .put("value",-1)
            .put("valueFrom",(JSONObject) objetoJSON)
        ;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParametrosDeEntradaDeUnaInstruccion",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ParametrosDeEntradaDeUnaInstruccion ::= 
            {
              Object RESULT =null;
		
        RESULT = new JSONObject()
            .put("identifier","")
            .put("type",0)
            .put("value",-1)
            .put("valueFrom",new JSONObject())
        ;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParametrosDeEntradaDeUnaInstruccion",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // InstruccionEspera ::= ESPERA PARENTESISABRE ParametrosDeEntradaDeUnaInstruccion PARENTESISCIERRA PUNTOYCOMA 
            {
              Object RESULT =null;
		int parameterleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int parameterright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object parameter = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
	    instruccionesDelPrograma.add(
	        new JSONObject()
                .put("parameter",(JSONObject) parameter)
                .put("instruction","ESPERA")
        );
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstruccionEspera",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // InstruccionGirarALaIzquierda ::= IZQUIERDA PARENTESISABRE ParametrosDeEntradaDeUnaInstruccion PARENTESISCIERRA PUNTOYCOMA 
            {
              Object RESULT =null;
		int parameterleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int parameterright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object parameter = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
	    instruccionesDelPrograma.add(
            new JSONObject()
                .put("parameter",(JSONObject) parameter)
                .put("instruction","IZQUIERDA")
        );
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstruccionGirarALaIzquierda",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // InstruccionGirarALaDerecha ::= DERECHA PARENTESISABRE ParametrosDeEntradaDeUnaInstruccion PARENTESISCIERRA PUNTOYCOMA 
            {
              Object RESULT =null;
		int parameterleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int parameterright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object parameter = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
	    instruccionesDelPrograma.add(
            new JSONObject()
                .put("parameter",(JSONObject) parameter)
                .put("instruction","DERECHA")
        );
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstruccionGirarALaDerecha",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // InstruccionTomarObjeto ::= TOMAR PARENTESISABRE PARENTESISCIERRA PUNTOYCOMA 
            {
              Object RESULT =null;
		
        instruccionesDelPrograma.add(
                new JSONObject()
                    .put("instruction","TOMAR")
            );
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstruccionTomarObjeto",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // InstruccionSoltarObjeto ::= SOLTAR PARENTESISABRE PARENTESISCIERRA PUNTOYCOMA 
            {
              Object RESULT =null;
		
         instruccionesDelPrograma.add(
                 new JSONObject()
                     .put("instruction","SOLTAR")
             );
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstruccionSoltarObjeto",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // InstruccionEliminarObjeto ::= ELIMINAR PARENTESISABRE PARENTESISCIERRA PUNTOYCOMA 
            {
              Object RESULT =null;
		
           instruccionesDelPrograma.add(
                   new JSONObject()
                       .put("instruction","ELIMINAR")
               );
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstruccionEliminarObjeto",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // InstruccionDesactivarKaboom ::= DESACTIVARKABOOM PARENTESISABRE PARENTESISCIERRA PUNTOYCOMA 
            {
              Object RESULT =null;
		
          instruccionesDelPrograma.add(
                  new JSONObject()
                      .put("instruction","DESACTIVARKABOOM")
              );
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstruccionDesactivarKaboom",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // InstruccionPintarSuelo ::= PINTAR PARENTESISABRE PaletaDeColores PARENTESISCIERRA PUNTOYCOMA 
            {
              Object RESULT =null;
		int colorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object color = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
	    instruccionesDelPrograma.add(
            new JSONObject()
                .put("instruction","PINTAR")
                .put("color",color)
            );
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstruccionPintarSuelo",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // PaletaDeColores ::= COLORES 
            {
              Object RESULT =null;
		int colorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object color = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = color; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PaletaDeColores",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // PaletaDeColores ::= 
            {
              Object RESULT =null;
		 RESULT = "DEFAULT"; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PaletaDeColores",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // InstruccionDejarDePintarSuelo ::= DEJAPINTAR PARENTESISABRE PARENTESISCIERRA PUNTOYCOMA 
            {
              Object RESULT =null;
		
         instruccionesDelPrograma.add(
             new JSONObject()
                 .put("instruction","DEJAPINTAR")
         );
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstruccionDejarDePintarSuelo",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // InstruccionImprimirVariables ::= IMPRIMIRVARIABLE PARENTESISABRE IDENTIFICADOR PARENTESISCIERRA PUNTOYCOMA 
            {
              Object RESULT =null;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object identifier = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
          instruccionesDelPrograma.add(
              new JSONObject()
                  .put("instruction","IMPRIMIRVARIABLE")
                  .put("identifier",identifier)
          );
     
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstruccionImprimirVariables",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // NT$5 ::= 
            {
              Object RESULT =null;

	    pilaDePilas.add(pilaDeInstrucciones);
        pilaDeInstrucciones = new Stack();
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$5",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // InstruccionImprimirCadenas ::= IMPRIMIRCADENA PARENTESISABRE NT$5 Cadenas PARENTESISCIERRA PUNTOYCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
        //pilaDeInstrucciones = acomodarPila(pilaDeInstrucciones);
        ArrayList<JSONObject> listaTemporal = new ArrayList<>();
        Stack pilaTemporal = new Stack();
        while(!pilaDeInstrucciones.empty()){
            pilaTemporal.add((JSONObject) pilaDeInstrucciones.pop());
        }
        while(!pilaTemporal.empty()){
            listaTemporal.add((JSONObject) pilaTemporal.pop());
        }
        pilaDeInstrucciones = (Stack) pilaDePilas.pop();

        instruccionesDelPrograma.add(
            new JSONObject()
                .put("instruction","IMPRIMIRCADENA")
                .put("parameter",listaTemporal)
        );
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstruccionImprimirCadenas",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // NT$6 ::= 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

	    pilaDeInstrucciones.add(
            new JSONObject()
                .put("type", 0)
                .put("string", "")
                .put("valueFrom", identificador)
        );
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$6",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Cadenas ::= IDENTIFICADOR NT$6 ContinuacionDeCadenas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Cadenas",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // NT$7 ::= 
            {
              Object RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object cadena = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

	    pilaDeInstrucciones.add(
	        new JSONObject()
	            .put("type", 1)
	            .put("string", (String) cadena)
	            .put("valueFrom", "")
        );
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$7",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Cadenas ::= CADENA NT$7 ContinuacionDeCadenas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object cadena = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Cadenas",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // NT$8 ::= 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

        pilaDeInstrucciones.add(
            new JSONObject()
                .put("type", 0)
                .put("string", "")
                .put("valueFrom", identificador)
        );
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$8",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ContinuacionDeCadenas ::= OPERADORARITMETICOSUMA IDENTIFICADOR NT$8 ContinuacionDeCadenas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ContinuacionDeCadenas",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // NT$9 ::= 
            {
              Object RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object cadena = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

        pilaDeInstrucciones.add(
            new JSONObject()
                .put("type", 1)
                .put("string", (String) cadena)
                .put("valueFrom", "")
        );
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$9",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ContinuacionDeCadenas ::= OPERADORARITMETICOSUMA CADENA NT$9 ContinuacionDeCadenas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object cadena = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ContinuacionDeCadenas",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ContinuacionDeCadenas ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ContinuacionDeCadenas",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // InstruccionTerminarBloque ::= TERMINARBLOQUE PARENTESISABRE PARENTESISCIERRA PUNTOYCOMA 
            {
              Object RESULT =null;
		
         instruccionesDelPrograma.add(
             new JSONObject()
                 .put("instruction","TERMINARBLOQUE")
         );
     
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstruccionTerminarBloque",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // NT$10 ::= 
            {
              Object RESULT =null;
		int nombreFuncionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int nombreFuncionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object nombreFuncion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;

        pilaDePilas.add(pilaDeInstrucciones);
        pilaDeInstrucciones = new Stack();
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$10",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // LlamadaAFuncion ::= IDENTIFICADOR PARENTESISABRE NT$10 Parametros PARENTESISCIERRA PUNTOYCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int nombreFuncionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int nombreFuncionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object nombreFuncion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		
        //pilaDeInstrucciones = acomodarPila(pilaDeInstrucciones);
        ArrayList<JSONObject> listaTemporal = new ArrayList<>();
        Stack pilaTemporal = new Stack();
        while(!pilaDeInstrucciones.empty()){
            pilaTemporal.add((JSONObject) pilaDeInstrucciones.pop());
        }
        while(!pilaTemporal.empty()){
            listaTemporal.add((JSONObject) pilaTemporal.pop());
        }
        pilaDeInstrucciones = (Stack) pilaDePilas.pop();

        instruccionesDelPrograma.add(
            new JSONObject()
                .put("instruction","LLAMADAAFUNCION")
                .put("parameter",listaTemporal)
                .put("name",nombreFuncion)
        );
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LlamadaAFuncion",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // NT$11 ::= 
            {
              Object RESULT =null;
		int numeroleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int numeroright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object numero = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

	    pilaDeInstrucciones.add(
            new JSONObject()
                .put("type", 1)
                .put("value",Integer.valueOf((String) numero))
                .put("identifier", "")
                .put("valueFrom", new JSONObject())
        );
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$11",71, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Parametros ::= NUMERO NT$11 ParametrosContinuacion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int numeroleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int numeroright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object numero = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Parametros",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // NT$12 ::= 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

	    pilaDeInstrucciones.add(
            new JSONObject()
                .put("type", 2)
                .put("value",-1)
                .put("identifier", identificador)
                .put("valueFrom", new JSONObject())
        );
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$12",72, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Parametros ::= IDENTIFICADOR NT$12 ParametrosContinuacion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Parametros",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // NT$13 ::= 
            {
              Object RESULT =null;
		int objetoJSONleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int objetoJSONright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object objetoJSON = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

	    pilaDeInstrucciones.add(
            new JSONObject()
                .put("type", 3)
                .put("value",-1)
                .put("identifier", "")
                .put("valueFrom", (JSONObject) objetoJSON)
        );
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$13",73, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Parametros ::= NumeroAleatorio NT$13 ParametrosContinuacion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int objetoJSONleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int objetoJSONright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object objetoJSON = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Parametros",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // NT$14 ::= 
            {
              Object RESULT =null;
		int objetoJSONleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int objetoJSONright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object objetoJSON = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

        pilaDeInstrucciones.add(
            new JSONObject()
                .put("type", 4)
                .put("value",-1)
                .put("identifier", "")
                .put("valueFrom", (JSONObject) objetoJSON)
        );
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$14",74, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Parametros ::= OperacionAritmetica NT$14 ParametrosContinuacion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int objetoJSONleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int objetoJSONright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object objetoJSON = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Parametros",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Parametros ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Parametros",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // NT$15 ::= 
            {
              Object RESULT =null;
		int numeroleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int numeroright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object numero = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

	    pilaDeInstrucciones.add(
            new JSONObject()
                .put("type", 1)
                .put("value",Integer.valueOf((String) numero))
                .put("identifier", "")
                .put("valueFrom", new JSONObject())
        );
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$15",75, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ParametrosContinuacion ::= SEPARADOR NUMERO NT$15 ParametrosContinuacion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int numeroleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int numeroright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object numero = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParametrosContinuacion",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // NT$16 ::= 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

	    pilaDeInstrucciones.add(
            new JSONObject()
                .put("type", 2)
                .put("value",-1)
                .put("identifier", identificador)
                .put("valueFrom", new JSONObject())
        );
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$16",76, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ParametrosContinuacion ::= SEPARADOR IDENTIFICADOR NT$16 ParametrosContinuacion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParametrosContinuacion",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // NT$17 ::= 
            {
              Object RESULT =null;
		int objetoJSONleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int objetoJSONright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object objetoJSON = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

	    pilaDeInstrucciones.add(
            new JSONObject()
                .put("type", 3)
                .put("value",-1)
                .put("identifier", "")
                .put("valueFrom", (JSONObject) objetoJSON)
        );
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$17",77, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ParametrosContinuacion ::= SEPARADOR NumeroAleatorio NT$17 ParametrosContinuacion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int objetoJSONleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int objetoJSONright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object objetoJSON = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParametrosContinuacion",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // NT$18 ::= 
            {
              Object RESULT =null;
		int objetoJSONleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int objetoJSONright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object objetoJSON = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

	    pilaDeInstrucciones.add(
            new JSONObject()
                .put("type", 4)
                .put("value",-1)
                .put("identifier", "")
                .put("valueFrom", (JSONObject) objetoJSON)
        );
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$18",78, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ParametrosContinuacion ::= SEPARADOR OperacionAritmetica NT$18 ParametrosContinuacion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int objetoJSONleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int objetoJSONright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object objetoJSON = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParametrosContinuacion",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ParametrosContinuacion ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParametrosContinuacion",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // NT$19 ::= 
            {
              Object RESULT =null;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object condicion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

	    pilaDePilas.add(pilaDeInstrucciones);
	    pilaDeInstrucciones = new Stack();

	    pilaDeInstrucciones.add(instruccionesDelPrograma);
	    instruccionesDelPrograma = new ArrayList<>();
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$19",79, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // EstrucutraDeControlIf ::= SI PARENTESISABRE Condicion PARENTESISCIERRA LLAVEABRE NT$19 BloqueDeInstrucciones LLAVECIERRA EstrucutraDeControlIfElse 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object condicion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int continuacionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int continuacionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object continuacion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
	    JSONObject temporal = new JSONObject();
	    temporal
	        .put("condition",(JSONObject) condicion)
	        .put("subprogram",instruccionesDelPrograma)
	        .put("instruction","SI")
	        .put("continue",(ArrayList<JSONObject>) continuacion)
	    ;
	    instruccionesDelPrograma = (ArrayList<JSONObject>) pilaDeInstrucciones.pop();
	    pilaDeInstrucciones = (Stack) pilaDePilas.pop();
	    instruccionesDelPrograma.add(temporal);
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EstrucutraDeControlIf",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Condicion ::= CondicionDeComparacionSimple 
            {
              Object RESULT =null;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object condicion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = condicion; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Condicion",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Condicion ::= CondicionLogica 
            {
              Object RESULT =null;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object condicion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = condicion; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Condicion",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Condicion ::= CondicionDeComparacionConParentesis 
            {
              Object RESULT =null;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object condicion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = condicion; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Condicion",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // CondicionDeComparacionSimple ::= IDENTIFICADOR CondicionDeComparacionSimpleContinuacion 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int compararleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int compararright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object comparar = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
	    RESULT =
	        new JSONObject()
	            .put("identifier",identificador)
	            .put("type",1)
	            .put("value",-1)
	            .put("compareWith",(JSONObject) comparar)
	            .put("valueFrom",new JSONObject())
	            .put("isBracket",false)
	    ;
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CondicionDeComparacionSimple",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // CondicionDeComparacionSimple ::= NUMERO CondicionDeComparacionSimpleContinuacion 
            {
              Object RESULT =null;
		int numeroleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int numeroright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object numero = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int compararleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int compararright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object comparar = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
	    RESULT =
	        new JSONObject()
	            .put("identifier","")
	            .put("type",2)
	            .put("value", Integer.valueOf((String) numero))
	            .put("compareWith",(JSONObject) comparar)
	            .put("valueFrom",new JSONObject())
	            .put("isBracket",false)
	    ;
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CondicionDeComparacionSimple",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // CondicionDeComparacionSimple ::= NumeroAleatorio CondicionDeComparacionSimpleContinuacion 
            {
              Object RESULT =null;
		int aleatorioleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aleatorioright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object aleatorio = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int compararleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int compararright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object comparar = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
	    RESULT =
	        new JSONObject()
	            .put("identifier","")
	            .put("type",3)
	            .put("value",-1)
	            .put("compareWith",(JSONObject) comparar)
	            .put("valueFrom",(JSONObject) aleatorio)
	            .put("isBracket",false)
	    ;
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CondicionDeComparacionSimple",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // CondicionDeComparacionSimple ::= QUETENGODELANTE PARENTESISABRE PARENTESISCIERRA CondicionDeComparacionSimpleContinuacion 
            {
              Object RESULT =null;
		int compararleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int compararright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object comparar = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
	    RESULT =
	        new JSONObject()
	            .put("identifier","")
	            .put("type",9)
	            .put("value",-1)
	            .put("compareWith",(JSONObject) comparar)
	            .put("valueFrom",new JSONObject())
	            .put("isBracket",false)
	    ;
	 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CondicionDeComparacionSimple",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // CondicionDeComparacionSimple ::= KABOOMDEFRENTE PARENTESISABRE PARENTESISCIERRA 
            {
              Object RESULT =null;
		
	    RESULT =
	        new JSONObject()
	            .put("identifier","")
	            .put("type",8)
	            .put("value",-1)
	            .put("compareWith",new JSONObject())
	            .put("valueFrom",new JSONObject())
	            .put("isBracket",false)
	    ;
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CondicionDeComparacionSimple",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // CondicionDeComparacionSimple ::= MURODELANTE PARENTESISABRE PARENTESISCIERRA 
            {
              Object RESULT =null;
		
	    RESULT =
	        new JSONObject()
	            .put("identifier","")
	            .put("type",6)
	            .put("value",-1)
	            .put("compareWith",new JSONObject())
	            .put("valueFrom",new JSONObject())
	            .put("isBracket",false)
	    ;
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CondicionDeComparacionSimple",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // CondicionDeComparacionSimple ::= OBJETODELANTE PARENTESISABRE PARENTESISCIERRA 
            {
              Object RESULT =null;
		
	    RESULT =
	        new JSONObject()
	            .put("identifier","")
	            .put("type",7)
	            .put("value",-1)
	            .put("compareWith",new JSONObject())
	            .put("valueFrom",new JSONObject())
	            .put("isBracket",false)
	    ;
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CondicionDeComparacionSimple",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // CondicionDeComparacionSimple ::= BOOLEANO 
            {
              Object RESULT =null;
		int booleanoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int booleanoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object booleano = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
	    RESULT =
	        new JSONObject()
	            .put("identifier","")
	            .put("type",0)
	            .put("value",booleano)
	            .put("compareWith",new JSONObject())
	            .put("valueFrom",new JSONObject())
	            .put("isBracket",false)
	    ;
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CondicionDeComparacionSimple",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // CondicionDeComparacionSimpleContinuacion ::= OPERADORDECOMPARACION IDENTIFICADOR 
            {
              Object RESULT =null;
		int operadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int operadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object operador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
	    RESULT =
	        new JSONObject()
	            .put("identifier",identificador)
	            .put("type",1)
	            .put("value",-1)
	            .put("compareWith",new JSONObject())
	            .put("valueFrom",new JSONObject())
	            .put("isBracket",false)
	    ;
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CondicionDeComparacionSimpleContinuacion",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // CondicionDeComparacionSimpleContinuacion ::= OPERADORDECOMPARACION NUMERO 
            {
              Object RESULT =null;
		int operadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int operadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object operador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int numeroleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int numeroright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object numero = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
	        RESULT =
                new JSONObject()
                    .put("identifier","")
                    .put("type",2)
                    .put("value",Integer.valueOf((String) numero))
                    .put("operator",(String) operador)
                    .put("valueFrom",new JSONObject())
                    .put("isBracket",false)
            ;
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CondicionDeComparacionSimpleContinuacion",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // CondicionDeComparacionSimpleContinuacion ::= OPERADORDECOMPARACION QUETENGODELANTE PARENTESISABRE PARENTESISCIERRA 
            {
              Object RESULT =null;
		int operadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int operadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object operador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
	    RESULT =
	        new JSONObject()
	            .put("identifier","")
	            .put("type",9)
	            .put("value",-1)
	            .put("operator",(String) operador)
	            .put("valueFrom",new JSONObject())
	            .put("isBracket",false)
	    ;
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CondicionDeComparacionSimpleContinuacion",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // CondicionDeComparacionSimpleContinuacion ::= OPERADORDECOMPARACION NumeroAleatorio 
            {
              Object RESULT =null;
		int operadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int operadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object operador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int aleatorioleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aleatorioright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object aleatorio = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
	    RESULT =
	        new JSONObject()
	            .put("identifier","")
	            .put("type",3)
	            .put("value",-1)
	            .put("operator",(String) operador)
	            .put("valueFrom",(JSONObject) aleatorio)
	            .put("isBracket",false)
	    ;
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CondicionDeComparacionSimpleContinuacion",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // CondicionDeComparacionConParentesis ::= OperadorNegacion PARENTESISABRE CondicionDeComparacionSimple PARENTESISCIERRA 
            {
              Object RESULT =null;
		int negacionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int negacionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object negacion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int comparacionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int comparacionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object comparacion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
	    RESULT =
	        new JSONObject()
	            .put("identifier","")
	            .put("type",4)
	            .put("value",(Boolean) negacion)
	            .put("compareWith",new JSONObject())
	            .put("valueFrom",(JSONObject) comparacion)
	            .put("isBracket",true)
	    ;
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CondicionDeComparacionConParentesis",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // CondicionLogica ::= CondicionDeComparacionConParentesis OPERADORLOGICO CondicionDeComparacionConParentesis 
            {
              Object RESULT =null;
		int izquierdaleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int izquierdaright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object izquierda = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int operadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int operadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object operador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int derechaleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int derecharight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object derecha = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
	    RESULT =
	        new JSONObject()
	            .put("identifier",(String) operador)
	            .put("type",5)
	            .put("value",-1)
	            .put("compareWith",(JSONObject) derecha)
	            .put("valueFrom",(JSONObject) izquierda)
	            .put("isBracket",false)
	    ;
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CondicionLogica",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // NT$20 ::= 
            {
              Object RESULT =null;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object condicion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

	    pilaDePilas.add(pilaDeInstrucciones);
	    pilaDeInstrucciones = new Stack();
	    pilaDeInstrucciones.add(instruccionesDelPrograma);
	    instruccionesDelPrograma = new ArrayList<>();
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$20",80, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // EstrucutraDeControlIfElse ::= SINOSI PARENTESISABRE Condicion PARENTESISCIERRA LLAVEABRE NT$20 BloqueDeInstrucciones LLAVECIERRA EstrucutraDeControlIfElse 
            {
              Object RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object condicion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int anterioresleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int anterioresright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object anteriores = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
	    JSONObject temporal = new JSONObject();
	    temporal
	        .put("condition",(JSONObject) condicion)
            .put("subprogram",instruccionesDelPrograma)
            .put("instruction","SINOSI")
            //.put("continue",(ArrayList<JSONObject>) anteriores)
	    ;
	    instruccionesDelPrograma = (ArrayList<JSONObject>) pilaDeInstrucciones.pop();
	    pilaDeInstrucciones = (Stack) pilaDePilas.pop();
	    //instruccionesDelPrograma.add(temporal);
	    ArrayList<JSONObject> lista = (ArrayList<JSONObject>) anteriores;
	    lista.add(temporal);
	    RESULT = lista;
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EstrucutraDeControlIfElse",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // EstrucutraDeControlIfElse ::= EstrucutraDeControlElse 
            {
              Object RESULT =null;
		int elsefinalleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int elsefinalright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object elsefinal = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = (ArrayList<JSONObject>) elsefinal; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EstrucutraDeControlIfElse",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // NT$21 ::= 
            {
              Object RESULT =null;


	    pilaDePilas.add(pilaDeInstrucciones);
	    pilaDeInstrucciones = new Stack();
	    pilaDeInstrucciones.add(instruccionesDelPrograma);
	    instruccionesDelPrograma = new ArrayList<>();

	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$21",81, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // EstrucutraDeControlElse ::= SINO LLAVEABRE NT$21 BloqueDeInstrucciones LLAVECIERRA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
	    JSONObject temporal = new JSONObject();
	    temporal
	        .put("subprogram",instruccionesDelPrograma)
	        .put("instruction","SINO")
	    ;
	    instruccionesDelPrograma = (ArrayList<JSONObject>) pilaDeInstrucciones.pop();
	    pilaDeInstrucciones = (Stack) pilaDePilas.pop();
	    //instruccionesDelPrograma.add(temporal);
	    ArrayList<JSONObject> lista = new ArrayList<>();
	    lista.add(temporal);
	    RESULT = lista;
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EstrucutraDeControlElse",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // EstrucutraDeControlElse ::= 
            {
              Object RESULT =null;
		
        ArrayList<JSONObject> listaVacia = new ArrayList<>();
        RESULT = listaVacia;
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EstrucutraDeControlElse",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // EstrucutraDeControlCase ::= COMPARAR PARENTESISABRE IDENTIFICADOR PARENTESISCIERRA LLAVEABRE Casos CasoDefault LLAVECIERRA 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int casesJSONleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int casesJSONright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object casesJSON = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int defaultJSONleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int defaultJSONright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object defaultJSON = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
	    instruccionesDelPrograma.add(
	        new JSONObject()
	            .put("instruction","COMPARAR")
	            .put("identifier",identificador)
	            //.put("cases",new JSONObject())
	            //.put("default",new JSONObject())
	            .put("cases",(JSONObject) casesJSON)
	            .put("default",(JSONObject) defaultJSON)
	            .put("type",1)
	    );
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EstrucutraDeControlCase",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // EstrucutraDeControlCase ::= COMPARAR PARENTESISABRE QUETENGODELANTE PARENTESISABRE PARENTESISCIERRA PARENTESISCIERRA LLAVEABRE Casos CasoDefault LLAVECIERRA 
            {
              Object RESULT =null;
		int casesJSONleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int casesJSONright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object casesJSON = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int defaultJSONleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int defaultJSONright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object defaultJSON = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
      	    instruccionesDelPrograma.add(
      	        new JSONObject()
      	            .put("instruction","COMPARAR")
      	            .put("identifier","")
      	            //.put("cases",new JSONObject())
      	            //.put("default",new JSONObject())
      	            .put("cases",(JSONObject) casesJSON)
      	            .put("default",(JSONObject) defaultJSON)
      	            .put("type",2)
      	    );
      	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EstrucutraDeControlCase",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // NT$22 ::= 
            {
              Object RESULT =null;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object condicion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;

	    pilaDePilas.add(pilaDeInstrucciones);
	    pilaDeInstrucciones = new Stack();
	    pilaDeInstrucciones.add(instruccionesDelPrograma);
	    instruccionesDelPrograma = new ArrayList<>();
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$22",82, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // Casos ::= CASO CondicionParaCasos DOSPUNTOS NT$22 BloqueDeInstrucciones FinalOpcional Casos 
            {
              Object RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object condicion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int finalOpcionalleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int finalOpcionalright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object finalOpcional = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int casosAnterioresleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int casosAnterioresright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object casosAnteriores = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        JSONObject temporal = new JSONObject();
        temporal
            .put("condition", (JSONObject) condicion)
            .put("instruction","CASO")
            .put("subprogram",instruccionesDelPrograma)
            .put("end",finalOpcional)
            .put("continue", casosAnteriores)
        ;
        instruccionesDelPrograma = (ArrayList<JSONObject>) pilaDeInstrucciones.pop();
        pilaDeInstrucciones = (Stack) pilaDePilas.pop();
        //instruccionesDelPrograma.add(temporal);
        //ArrayList<JSONObject> lista = (ArrayList<JSONObject>) anteriores;
        //lista.add(temporal);
        RESULT = temporal;
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Casos",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // Casos ::= 
            {
              Object RESULT =null;
		 RESULT = new JSONObject(); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Casos",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // CondicionParaCasos ::= OperadorDeComparacionOpcional NUMERO 
            {
              Object RESULT =null;
		int operadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int operadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object operador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int numeroleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int numeroright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object numero = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        RESULT =
            new JSONObject()
                .put("operator", (String) operador)
                .put("valueFrom", new JSONObject())
                .put("type",0)
                .put("value",Integer.valueOf((String) numero))
        ;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CondicionParaCasos",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // CondicionParaCasos ::= OperadorDeComparacionOpcional NumeroAleatorio 
            {
              Object RESULT =null;
		int operadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int operadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object operador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int objetoJSONleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int objetoJSONright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object objetoJSON = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        RESULT =
            new JSONObject()
                .put("operator", (String) operador)
                .put("valueFrom", (JSONObject) objetoJSON)
                .put("type",1)
                .put("value",-1)
        ;
     
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CondicionParaCasos",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // OperadorDeComparacionOpcional ::= OPERADORDECOMPARACION 
            {
              Object RESULT =null;
		int operadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int operadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object operador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = (String) operador ; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadorDeComparacionOpcional",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // OperadorDeComparacionOpcional ::= 
            {
              Object RESULT =null;
		 RESULT = "" ; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadorDeComparacionOpcional",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // NT$23 ::= 
            {
              Object RESULT =null;

	    pilaDePilas.add(pilaDeInstrucciones);
	    pilaDeInstrucciones = new Stack();
	    pilaDeInstrucciones.add(instruccionesDelPrograma);
	    instruccionesDelPrograma = new ArrayList<>();
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$23",83, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // CasoDefault ::= DEFAULT DOSPUNTOS NT$23 BloqueDeInstrucciones FinalOpcional 
            {
              Object RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
        JSONObject temporal = new JSONObject();
        temporal
            .put("subprogram",instruccionesDelPrograma)
            .put("instruction","DEFAULT")
            .put("end",true)
            //.put("continue",(ArrayList<JSONObject>) anteriores)
        ;
        instruccionesDelPrograma = (ArrayList<JSONObject>) pilaDeInstrucciones.pop();
        pilaDeInstrucciones = (Stack) pilaDePilas.pop();
        //instruccionesDelPrograma.add(temporal);
        //ArrayList<JSONObject> lista = (ArrayList<JSONObject>) anteriores;
        //lista.add(temporal);
        RESULT = temporal;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CasoDefault",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // FinalOpcional ::= FIN PUNTOYCOMA 
            {
              Object RESULT =null;
		 RESULT = true; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FinalOpcional",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // FinalOpcional ::= 
            {
              Object RESULT =null;
		 RESULT = false; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FinalOpcional",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // NT$24 ::= 
            {
              Object RESULT =null;

	    pilaDePilas.add(pilaDeInstrucciones);
	    pilaDeInstrucciones = new Stack();
	    pilaDeInstrucciones.add(instruccionesDelPrograma);
	    instruccionesDelPrograma = new ArrayList<>();
	 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$24",84, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // NT$25 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int listaDeDeclaracionesleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int listaDeDeclaracionesright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object listaDeDeclaraciones = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

	    instruccionesDelPrograma = (ArrayList<JSONObject>) pilaDeInstrucciones.pop();
	    pilaDeInstrucciones = (Stack) pilaDePilas.pop();
	 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$25",85, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // NT$26 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int listaDeDeclaracionesleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int listaDeDeclaracionesright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object listaDeDeclaraciones = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object condicion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;

	    pilaDePilas.add(pilaDeInstrucciones);
	    pilaDeInstrucciones = new Stack();
	    pilaDeInstrucciones.add(instruccionesDelPrograma);
	    instruccionesDelPrograma = new ArrayList<>();
	 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$26",86, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // NT$27 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int listaDeDeclaracionesleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int listaDeDeclaracionesright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object listaDeDeclaraciones = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object condicion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int listaInstruccionesleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int listaInstruccionesright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object listaInstrucciones = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

	    instruccionesDelPrograma = (ArrayList<JSONObject>) pilaDeInstrucciones.pop();
	    pilaDeInstrucciones = (Stack) pilaDePilas.pop();
	 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$27",87, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // NT$28 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int listaDeDeclaracionesleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).left;
		int listaDeDeclaracionesright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).right;
		Object listaDeDeclaraciones = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object condicion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int listaInstruccionesleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int listaInstruccionesright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object listaInstrucciones = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

	    pilaDePilas.add(pilaDeInstrucciones);
	    pilaDeInstrucciones = new Stack();
	    pilaDeInstrucciones.add(instruccionesDelPrograma);
	    instruccionesDelPrograma = new ArrayList<>();
	 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$28",88, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // EstrucutraDeControlFor ::= PARA PARENTESISABRE NT$24 DeclaracionesParaFor NT$25 PUNTOYCOMA Condicion PUNTOYCOMA NT$26 InstruccionesParaFor NT$27 PARENTESISCIERRA LLAVEABRE NT$28 BloqueDeInstrucciones LLAVECIERRA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$28
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int listaDeDeclaracionesleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)).left;
		int listaDeDeclaracionesright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)).right;
		Object listaDeDeclaraciones = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).right;
		Object condicion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).value;
		int listaInstruccionesleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int listaInstruccionesright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object listaInstrucciones = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		
        JSONObject temporal = new JSONObject();
        temporal
            .put("subprogram",instruccionesDelPrograma)
            .put("instruction","FOR")
            .put("declarations",listaDeDeclaraciones)
            .put("condition",condicion)
            .put("increments",listaInstrucciones)
        ;
        instruccionesDelPrograma = (ArrayList<JSONObject>) pilaDeInstrucciones.pop();
        pilaDeInstrucciones = (Stack) pilaDePilas.pop();

        instruccionesDelPrograma.add(temporal);
	 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EstrucutraDeControlFor",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-15)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // NT$29 ::= 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int objetoJSONleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int objetoJSONright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object objetoJSON = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

        instruccionesDelPrograma.add(
	        new JSONObject()
                .put("identifier",identificador)
                .put("valueFrom",(JSONObject) objetoJSON)
                 .put("type",1)
                .put("instruction","MODIFICAVARIABLEFOR")
	    );
	    ArrayList<JSONObject> resultadoTemporal = (ArrayList<JSONObject>) instruccionesDelPrograma;
        RESULT = resultadoTemporal;
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$29",89, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // DeclaracionesParaFor ::= IDENTIFICADOR AsignacionDeValoresAlDeclararVariable NT$29 DeclaracionesParaForContinuacion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$29
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int objetoJSONleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int objetoJSONright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object objetoJSON = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeclaracionesParaFor",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // NT$30 ::= 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int objetoJSONleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int objetoJSONright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object objetoJSON = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

        instruccionesDelPrograma.add(
	        new JSONObject()
                .put("identifier",identificador)
                 .put("type",2)
                .put("valueFrom",(JSONObject) objetoJSON)
                .put("instruction","CREAVARIABLETEMPORALFOR")
	    );
	    ArrayList<JSONObject> resultadoTemporal = (ArrayList<JSONObject>) instruccionesDelPrograma;
        RESULT = resultadoTemporal;
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$30",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // DeclaracionesParaFor ::= VARIABLE IDENTIFICADOR AsignacionDeValoresAlDeclararVariable NT$30 DeclaracionesParaForContinuacion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$30
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int objetoJSONleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int objetoJSONright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object objetoJSON = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeclaracionesParaFor",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // DeclaracionesParaFor ::= 
            {
              Object RESULT =null;
		
	    ArrayList<JSONObject> resultadoTemporal = (ArrayList<JSONObject>) instruccionesDelPrograma;
        RESULT = resultadoTemporal;
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeclaracionesParaFor",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // NT$31 ::= 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int objetoJSONleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int objetoJSONright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object objetoJSON = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

         instruccionesDelPrograma.add(
            new JSONObject()
                 .put("identifier",identificador)
                 .put("type",1)
                 .put("valueFrom",(JSONObject) objetoJSON)
                 .put("instruction","MODIFICAVARIABLEFOR")
        );
	    ArrayList<JSONObject> resultadoTemporal = (ArrayList<JSONObject>) instruccionesDelPrograma;
        RESULT = resultadoTemporal;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$31",91, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // DeclaracionesParaForContinuacion ::= SEPARADOR IDENTIFICADOR AsignacionDeValoresAlDeclararVariable NT$31 DeclaracionesParaForContinuacion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$31
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int objetoJSONleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int objetoJSONright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object objetoJSON = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeclaracionesParaForContinuacion",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // NT$32 ::= 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int objetoJSONleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int objetoJSONright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object objetoJSON = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

       instruccionesDelPrograma.add(
            new JSONObject()
                   .put("identifier",identificador)
                   .put("type",2)
                   .put("valueFrom",(JSONObject) objetoJSON)
                   .put("instruction","CREAVARIABLETEMPORALFOR")
            );
	    ArrayList<JSONObject> resultadoTemporal = (ArrayList<JSONObject>) instruccionesDelPrograma;
        RESULT = resultadoTemporal;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$32",92, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // DeclaracionesParaForContinuacion ::= SEPARADOR VARIABLE IDENTIFICADOR AsignacionDeValoresAlDeclararVariable NT$32 DeclaracionesParaForContinuacion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$32
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int objetoJSONleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int objetoJSONright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object objetoJSON = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeclaracionesParaForContinuacion",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // DeclaracionesParaForContinuacion ::= 
            {
              Object RESULT =null;
		
	    ArrayList<JSONObject> resultadoTemporal = (ArrayList<JSONObject>) instruccionesDelPrograma;
        RESULT = resultadoTemporal;
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeclaracionesParaForContinuacion",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // NT$33 ::= 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

        instruccionesDelPrograma.add(
	        new JSONObject()
                .put("identifier",identificador)
                .put("instruction","INCREMENTAVARIABLEFOR")
                .put("type",1)
	    );
	    ArrayList<JSONObject> resultadoTemporal = (ArrayList<JSONObject>) instruccionesDelPrograma;
        RESULT = resultadoTemporal;
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$33",93, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // InstruccionesParaFor ::= IDENTIFICADOR OPERADORARITMETICOSUMA OPERADORARITMETICOSUMA NT$33 InstruccionesParaForContinuacion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$33
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstruccionesParaFor",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // NT$34 ::= 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

       instruccionesDelPrograma.add(
            new JSONObject()
                   .put("identifier",identificador)
                   .put("instruction","DECREMENTAVARIABLEFOR")
                   .put("type",2)
            );
	    ArrayList<JSONObject> resultadoTemporal = (ArrayList<JSONObject>) instruccionesDelPrograma;
        RESULT = resultadoTemporal;
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$34",94, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // InstruccionesParaFor ::= IDENTIFICADOR OPERADORARITMETICORESTA OPERADORARITMETICORESTA NT$34 InstruccionesParaForContinuacion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$34
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstruccionesParaFor",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // InstruccionesParaFor ::= 
            {
              Object RESULT =null;
		
	    ArrayList<JSONObject> resultadoTemporal = (ArrayList<JSONObject>) instruccionesDelPrograma;
	    RESULT = resultadoTemporal;
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstruccionesParaFor",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // NT$35 ::= 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

        instruccionesDelPrograma.add(
	        new JSONObject()
                .put("identifier",identificador)
                .put("instruction","INCREMENTAVARIABLEFOR")
                .put("type",1)
	    );
	    ArrayList<JSONObject> resultadoTemporal = (ArrayList<JSONObject>) instruccionesDelPrograma;
        RESULT = resultadoTemporal;
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$35",95, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // InstruccionesParaForContinuacion ::= SEPARADOR IDENTIFICADOR OPERADORARITMETICOSUMA OPERADORARITMETICOSUMA NT$35 InstruccionesParaForContinuacion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$35
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstruccionesParaForContinuacion",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // NT$36 ::= 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

       instruccionesDelPrograma.add(
            new JSONObject()
                   .put("identifier",identificador)
                   .put("instruction","DECREMENTAVARIABLEFOR")
                   .put("type",2)
            );
	    ArrayList<JSONObject> resultadoTemporal = (ArrayList<JSONObject>) instruccionesDelPrograma;
        RESULT = resultadoTemporal;
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$36",96, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // InstruccionesParaForContinuacion ::= SEPARADOR IDENTIFICADOR OPERADORARITMETICORESTA OPERADORARITMETICORESTA NT$36 InstruccionesParaForContinuacion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$36
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstruccionesParaForContinuacion",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // InstruccionesParaForContinuacion ::= 
            {
              Object RESULT =null;
		
	    ArrayList<JSONObject> resultadoTemporal = (ArrayList<JSONObject>) instruccionesDelPrograma;
        RESULT = resultadoTemporal;
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstruccionesParaForContinuacion",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // NT$37 ::= 
            {
              Object RESULT =null;

	    pilaDePilas.add(pilaDeInstrucciones);
	    pilaDeInstrucciones = new Stack();
	    pilaDeInstrucciones.add(instruccionesDelPrograma);
	    instruccionesDelPrograma = new ArrayList<>();
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$37",97, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // EstrucutraDeControlDoWhile ::= HACER LLAVEABRE NT$37 BloqueDeInstrucciones LLAVECIERRA REPITE PARENTESISABRE Condicion PARENTESISCIERRA PUNTOYCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$37
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object condicion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
	    JSONObject temporal = new JSONObject();
	    temporal
	        .put("condition",(JSONObject) condicion)
            .put("subprogram",instruccionesDelPrograma)
            .put("instruction","HACER")
	    ;
	    instruccionesDelPrograma = (ArrayList<JSONObject>) pilaDeInstrucciones.pop();
	    pilaDeInstrucciones = (Stack) pilaDePilas.pop();

	    instruccionesDelPrograma.add(temporal);
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EstrucutraDeControlDoWhile",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // NT$38 ::= 
            {
              Object RESULT =null;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object condicion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

	    pilaDePilas.add(pilaDeInstrucciones);
	    pilaDeInstrucciones = new Stack();
	    pilaDeInstrucciones.add(instruccionesDelPrograma);
	    instruccionesDelPrograma = new ArrayList<>();
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$38",98, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // EstrucutraDeControlWhile ::= REPITEHASTA PARENTESISABRE Condicion PARENTESISCIERRA LLAVEABRE NT$38 BloqueDeInstrucciones LLAVECIERRA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$38
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object condicion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		
	    JSONObject temporal = new JSONObject();
	    temporal
	        .put("condition",(JSONObject) condicion)
            .put("subprogram",instruccionesDelPrograma)
            .put("instruction","REPITEHASTA")
	    ;
	    instruccionesDelPrograma = (ArrayList<JSONObject>) pilaDeInstrucciones.pop();
	    pilaDeInstrucciones = (Stack) pilaDePilas.pop();

	    instruccionesDelPrograma.add(temporal);
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EstrucutraDeControlWhile",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // inrementosYDecrementos ::= IDENTIFICADOR OPERADORARITMETICOSUMA OPERADORARITMETICOSUMA PUNTOYCOMA 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
        instruccionesDelPrograma.add(
	        new JSONObject()
                .put("identifier",identificador)
                .put("instruction","INCREMENTAVARIABLE")
	    );
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("inrementosYDecrementos",59, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // inrementosYDecrementos ::= IDENTIFICADOR OPERADORARITMETICORESTA OPERADORARITMETICORESTA PUNTOYCOMA 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
        instruccionesDelPrograma.add(
	        new JSONObject()
                .put("identifier",identificador)
                .put("instruction","DECREMENTAVARIABLE")
	    );
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("inrementosYDecrementos",59, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // NT$39 ::= 
            {
              Object RESULT =null;
		int nombreFuncionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int nombreFuncionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object nombreFuncion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;

	    pilaDePilas.add(pilaDeInstrucciones);
	    pilaDeInstrucciones = new Stack();
	    pilaDeInstrucciones.add(instruccionesDelPrograma);
	    instruccionesDelPrograma = new ArrayList<>();
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$39",99, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // NT$40 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int nombreFuncionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int nombreFuncionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object nombreFuncion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object parametros = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

	    instruccionesDelPrograma = (ArrayList<JSONObject>) pilaDeInstrucciones.pop();
	    pilaDeInstrucciones = (Stack) pilaDePilas.pop();
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$40",100, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // NT$41 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int nombreFuncionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int nombreFuncionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object nombreFuncion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object parametros = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

	    pilaDePilas.add(pilaDeInstrucciones);
	    pilaDeInstrucciones = new Stack();
	    pilaDeInstrucciones.add(instruccionesDelPrograma);
	    instruccionesDelPrograma = new ArrayList<>();
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$41",101, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // NT$42 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int nombreFuncionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).left;
		int nombreFuncionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).right;
		Object nombreFuncion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).value;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object parametros = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;

	    JSONObject temporal = new JSONObject();
	    temporal
	        .put("parameter",parametros)
            .put("subprogram",instruccionesDelPrograma)
            .put("instruction","FUNCION")
            .put("name",nombreFuncion)
	    ;
	    instruccionesDelPrograma = (ArrayList<JSONObject>) pilaDeInstrucciones.pop();
	    pilaDeInstrucciones = (Stack) pilaDePilas.pop();

	    instruccionesDelPrograma.add(temporal);
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$42",102, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // Funciones ::= IDENTIFICADOR PARENTESISABRE NT$39 ParametrosDeEntrada NT$40 PARENTESISCIERRA LLAVEABRE NT$41 BloqueDeInstrucciones LLAVECIERRA NT$42 Funciones 
            {
              Object RESULT =null;
              // propagate RESULT from NT$42
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int nombreFuncionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)).left;
		int nombreFuncionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)).right;
		Object nombreFuncion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)).value;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		Object parametros = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Funciones",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // Funciones ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Funciones",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // NT$43 ::= 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

	    instruccionesDelPrograma.add(
            new JSONObject()
                .put("identifier",identificador)
                .put("instruction","DECLARAFUNCION")
        );
        RESULT = instruccionesDelPrograma;
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$43",103, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // ParametrosDeEntrada ::= VARIABLE IDENTIFICADOR NT$43 MasParametrosDeEntrada 
            {
              Object RESULT =null;
              // propagate RESULT from NT$43
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParametrosDeEntrada",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // ParametrosDeEntrada ::= 
            {
              Object RESULT =null;
		 RESULT = instruccionesDelPrograma; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParametrosDeEntrada",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // NT$44 ::= 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

	    instruccionesDelPrograma.add(
            new JSONObject()
                .put("identifier",identificador)
                .put("instruction","DECLARAFUNCION")
        );
        RESULT = instruccionesDelPrograma;
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$44",104, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // MasParametrosDeEntrada ::= SEPARADOR VARIABLE IDENTIFICADOR NT$44 MasParametrosDeEntrada 
            {
              Object RESULT =null;
              // propagate RESULT from NT$44
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MasParametrosDeEntrada",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // MasParametrosDeEntrada ::= 
            {
              Object RESULT =null;
		 RESULT = instruccionesDelPrograma; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MasParametrosDeEntrada",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // OperadorNegacion ::= OPERADORNEGACION 
            {
              Object RESULT =null;
		 RESULT = true; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadorNegacion",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // OperadorNegacion ::= 
            {
              Object RESULT =null;
		 RESULT = false; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadorNegacion",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintax$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
              return CUP$Sintax$do_action_part00000000(
                               CUP$Sintax$act_num,
                               CUP$Sintax$parser,
                               CUP$Sintax$stack,
                               CUP$Sintax$top);
    }
}

}
