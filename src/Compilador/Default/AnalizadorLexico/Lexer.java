/* The following code was generated by JFlex 1.7.0 */

package Compilador.Default.AnalizadorLexico;
import static Compilador.Default.AnalizadorLexico.Tokens.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>C:/Users/JoGarWeb/IdeaProjects/Tesis/src/Compilador/Default/CodigoFuente/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\46\1\22\1\61\1\61\1\46\22\0\1\46\1\11\1\16"+
    "\5\0\1\27\1\45\1\13\1\15\1\17\1\2\1\21\1\14\12\23"+
    "\1\57\1\20\1\1\1\10\1\12\2\0\32\24\4\0\1\34\1\0"+
    "\1\5\1\43\1\37\1\7\1\44\1\35\1\31\1\54\1\33\1\56"+
    "\1\55\1\41\1\32\1\6\1\3\1\30\1\53\1\4\1\52\1\40"+
    "\1\36\1\42\1\51\1\24\1\60\1\50\1\25\1\47\1\26\7\0"+
    "\1\61\u1fa2\0\1\61\1\61\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\5\4\1\1\1\5\1\2"+
    "\2\6\1\7\1\1\1\10\1\11\1\1\1\12\1\13"+
    "\1\14\1\15\1\16\12\4\1\17\1\20\5\4\1\21"+
    "\1\4\1\22\1\2\1\23\11\4\1\24\2\4\2\0"+
    "\1\25\1\0\13\4\1\26\24\4\1\26\7\4\1\27"+
    "\13\4\1\30\1\0\16\4\1\31\1\4\1\32\10\4"+
    "\1\33\3\4\1\32\32\4\1\0\10\4\1\34\1\35"+
    "\7\4\1\36\1\4\1\37\7\4\1\40\1\4\1\41"+
    "\26\4\1\0\2\4\1\42\27\4\1\43\2\4\1\40"+
    "\1\4\1\24\3\4\1\44\30\4\1\45\16\4\1\46"+
    "\4\4\1\47\1\4\1\50\4\4\1\35\4\4\1\51"+
    "\11\4\1\52\27\4\1\35\4\4\1\53\14\4\1\33"+
    "\16\4\1\54\11\4\1\55\32\4\1\56\22\4\1\57"+
    "\4\4\1\60\13\4\1\61\23\4\1\62\7\4\1\63"+
    "\1\4\1\64\1\65\3\4\1\54\4\4\1\66\15\4";

  private static int [] zzUnpackAction() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\62\0\226\0\310\0\372\0\u012c"+
    "\0\u015e\0\u0190\0\u0190\0\u0190\0\62\0\u01c2\0\62\0\u01f4"+
    "\0\62\0\62\0\u0226\0\62\0\u0258\0\62\0\62\0\62"+
    "\0\u028a\0\u02bc\0\u02ee\0\u0320\0\u0352\0\u0384\0\u03b6\0\u03e8"+
    "\0\u041a\0\u044c\0\62\0\u047e\0\u04b0\0\u04e2\0\u0514\0\u0546"+
    "\0\u0578\0\62\0\u05aa\0\62\0\62\0\u012c\0\u05dc\0\u060e"+
    "\0\u0640\0\u0672\0\u06a4\0\u06d6\0\u0708\0\u073a\0\u076c\0\u079e"+
    "\0\u07d0\0\u0802\0\u0834\0\u01f4\0\62\0\u0866\0\u0898\0\u08ca"+
    "\0\u08fc\0\u092e\0\u0960\0\u0992\0\u09c4\0\u09f6\0\u0a28\0\u0a5a"+
    "\0\u0a8c\0\u012c\0\u0abe\0\u0af0\0\u0b22\0\u0b54\0\u0b86\0\u0bb8"+
    "\0\u0bea\0\u0c1c\0\u0c4e\0\u0c80\0\u0cb2\0\u0ce4\0\u0d16\0\u0d48"+
    "\0\u0d7a\0\u0dac\0\u0dde\0\u0e10\0\u0e42\0\u0e74\0\u0ea6\0\u0ed8"+
    "\0\u0f0a\0\u0f3c\0\u0f6e\0\u0fa0\0\u0fd2\0\u1004\0\u012c\0\u1036"+
    "\0\u1068\0\u109a\0\u10cc\0\u10fe\0\u1130\0\u1162\0\u1194\0\u11c6"+
    "\0\u11f8\0\u122a\0\62\0\u125c\0\u128e\0\u12c0\0\u12f2\0\u1324"+
    "\0\u1356\0\u1388\0\u13ba\0\u13ec\0\u141e\0\u1450\0\u1482\0\u14b4"+
    "\0\u14e6\0\u1518\0\u012c\0\u154a\0\u157c\0\u15ae\0\u15e0\0\u1612"+
    "\0\u1644\0\u1676\0\u16a8\0\u16da\0\u170c\0\u173e\0\u1770\0\u17a2"+
    "\0\u17d4\0\u012c\0\u1806\0\u1838\0\u186a\0\u189c\0\u18ce\0\u1900"+
    "\0\u1932\0\u1964\0\u1996\0\u19c8\0\u19fa\0\u1a2c\0\u1a5e\0\u1a90"+
    "\0\u1ac2\0\u1af4\0\u1b26\0\u1b58\0\u1b8a\0\u1bbc\0\u1bee\0\u1c20"+
    "\0\u1c52\0\u1c84\0\u1cb6\0\u1ce8\0\u1d1a\0\u1d4c\0\u1d7e\0\u1db0"+
    "\0\u1de2\0\u1e14\0\u1e46\0\u1e78\0\u1eaa\0\u012c\0\u1edc\0\u1f0e"+
    "\0\u1f40\0\u1f72\0\u1fa4\0\u1fd6\0\u2008\0\u203a\0\u012c\0\u206c"+
    "\0\u012c\0\u209e\0\u20d0\0\u2102\0\u2134\0\u2166\0\u2198\0\u21ca"+
    "\0\u21fc\0\u222e\0\u012c\0\u2260\0\u2292\0\u22c4\0\u22f6\0\u2328"+
    "\0\u235a\0\u238c\0\u23be\0\u23f0\0\u2422\0\u2454\0\u2486\0\u24b8"+
    "\0\u24ea\0\u251c\0\u254e\0\u2580\0\u25b2\0\u25e4\0\u2616\0\u2648"+
    "\0\u267a\0\u26ac\0\u26de\0\u2710\0\u2742\0\u2774\0\u27a6\0\u27d8"+
    "\0\u280a\0\u283c\0\u286e\0\u28a0\0\u28d2\0\u2904\0\u2936\0\u2968"+
    "\0\u299a\0\u29cc\0\u29fe\0\u2a30\0\u2a62\0\u2a94\0\u2ac6\0\u2af8"+
    "\0\u2b2a\0\u2b5c\0\u2b8e\0\u2bc0\0\u012c\0\u2bf2\0\u2c24\0\u012c"+
    "\0\u2c56\0\u012c\0\u2c88\0\u2cba\0\u2cec\0\u012c\0\u2d1e\0\u2d50"+
    "\0\u2d82\0\u2db4\0\u2de6\0\u2e18\0\u2e4a\0\u2e7c\0\u2eae\0\u2ee0"+
    "\0\u2f12\0\u2f44\0\u2f76\0\u2fa8\0\u2fda\0\u300c\0\u303e\0\u3070"+
    "\0\u30a2\0\u30d4\0\u3106\0\u3138\0\u316a\0\u319c\0\u012c\0\u31ce"+
    "\0\u3200\0\u3232\0\u3264\0\u3296\0\u32c8\0\u32fa\0\u332c\0\u335e"+
    "\0\u3390\0\u33c2\0\u33f4\0\u3426\0\u3458\0\u012c\0\u348a\0\u34bc"+
    "\0\u34ee\0\u3520\0\u012c\0\u3552\0\u012c\0\u3584\0\u35b6\0\u35e8"+
    "\0\u361a\0\u364c\0\u367e\0\u36b0\0\u36e2\0\u3714\0\u012c\0\u3746"+
    "\0\u3778\0\u37aa\0\u37dc\0\u380e\0\u3840\0\u3872\0\u38a4\0\u38d6"+
    "\0\u012c\0\u3908\0\u393a\0\u396c\0\u399e\0\u39d0\0\u3a02\0\u3a34"+
    "\0\u3a66\0\u3a98\0\u3aca\0\u3afc\0\u3b2e\0\u3b60\0\u3b92\0\u3bc4"+
    "\0\u3bf6\0\u3c28\0\u3c5a\0\u3c8c\0\u3cbe\0\u3cf0\0\u3d22\0\u3d54"+
    "\0\u012c\0\u3d86\0\u3db8\0\u3dea\0\u3e1c\0\u012c\0\u3e4e\0\u3e80"+
    "\0\u3eb2\0\u3ee4\0\u3f16\0\u3f48\0\u3f7a\0\u3fac\0\u3fde\0\u4010"+
    "\0\u4042\0\u4074\0\u012c\0\u40a6\0\u40d8\0\u410a\0\u413c\0\u416e"+
    "\0\u41a0\0\u41d2\0\u4204\0\u4236\0\u4268\0\u429a\0\u42cc\0\u42fe"+
    "\0\u4330\0\u4362\0\u4394\0\u43c6\0\u43f8\0\u442a\0\u445c\0\u448e"+
    "\0\u44c0\0\u44f2\0\u4524\0\u012c\0\u4556\0\u4588\0\u45ba\0\u45ec"+
    "\0\u461e\0\u4650\0\u4682\0\u46b4\0\u46e6\0\u4718\0\u474a\0\u477c"+
    "\0\u47ae\0\u47e0\0\u4812\0\u4844\0\u4876\0\u48a8\0\u48da\0\u490c"+
    "\0\u493e\0\u4970\0\u49a2\0\u49d4\0\u4a06\0\u4a38\0\u012c\0\u4a6a"+
    "\0\u4a9c\0\u4ace\0\u4b00\0\u4b32\0\u4b64\0\u4b96\0\u4bc8\0\u4bfa"+
    "\0\u4c2c\0\u4c5e\0\u4c90\0\u4cc2\0\u4cf4\0\u4d26\0\u4d58\0\u4d8a"+
    "\0\u4dbc\0\u012c\0\u4dee\0\u4e20\0\u4e52\0\u4e84\0\u012c\0\u4eb6"+
    "\0\u4ee8\0\u4f1a\0\u4f4c\0\u4f7e\0\u4fb0\0\u4fe2\0\u5014\0\u5046"+
    "\0\u5078\0\u50aa\0\u012c\0\u50dc\0\u510e\0\u5140\0\u5172\0\u51a4"+
    "\0\u51d6\0\u5208\0\u523a\0\u526c\0\u529e\0\u52d0\0\u5302\0\u5334"+
    "\0\u5366\0\u5398\0\u53ca\0\u53fc\0\u542e\0\u5460\0\u012c\0\u5492"+
    "\0\u54c4\0\u54f6\0\u5528\0\u555a\0\u558c\0\u55be\0\u012c\0\u55f0"+
    "\0\u012c\0\u012c\0\u5622\0\u5654\0\u5686\0\u012c\0\u56b8\0\u56ea"+
    "\0\u571c\0\u574e\0\u012c\0\u5780\0\u57b2\0\u57e4\0\u5816\0\u5848"+
    "\0\u587a\0\u58ac\0\u58de\0\u5910\0\u5942\0\u5974\0\u59a6\0\u59d8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\10\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\10\1\35\1\10\1\36"+
    "\1\37\1\10\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\10\1\46\1\47\1\10\1\50\1\51\1\10\1\52"+
    "\1\53\65\0\1\54\5\0\1\55\54\0\1\10\1\56"+
    "\3\10\13\0\2\10\3\0\13\10\1\57\1\10\2\0"+
    "\10\10\1\0\1\10\4\0\1\60\1\10\1\61\2\10"+
    "\13\0\2\10\3\0\14\10\1\62\2\0\10\10\1\0"+
    "\1\10\4\0\3\10\1\63\1\10\13\0\2\10\3\0"+
    "\2\10\1\64\6\10\1\65\1\66\2\10\2\0\1\10"+
    "\1\67\6\10\1\0\1\10\4\0\5\10\13\0\2\10"+
    "\3\0\15\10\2\0\10\10\1\0\1\10\4\0\1\70"+
    "\4\10\13\0\2\10\3\0\3\10\1\71\10\10\1\72"+
    "\2\0\10\10\1\0\1\10\11\0\1\55\65\0\1\73"+
    "\45\0\16\74\1\75\43\74\21\0\1\76\63\0\1\25"+
    "\41\0\1\10\1\77\1\100\2\10\13\0\2\10\3\0"+
    "\3\10\1\101\2\10\1\102\6\10\2\0\10\10\1\0"+
    "\1\10\4\0\1\10\1\103\3\10\13\0\2\10\3\0"+
    "\3\10\1\104\11\10\2\0\10\10\1\0\1\10\4\0"+
    "\1\105\1\10\1\106\2\10\13\0\2\10\3\0\3\10"+
    "\1\107\11\10\2\0\10\10\1\0\1\10\4\0\3\10"+
    "\1\110\1\10\13\0\2\10\3\0\2\10\1\111\2\10"+
    "\1\112\7\10\2\0\10\10\1\0\1\10\4\0\1\113"+
    "\1\10\1\114\2\10\13\0\2\10\3\0\3\10\1\115"+
    "\2\10\1\116\6\10\2\0\10\10\1\0\1\10\4\0"+
    "\1\117\1\10\1\120\2\10\13\0\2\10\3\0\15\10"+
    "\2\0\10\10\1\0\1\10\4\0\1\121\1\122\3\10"+
    "\13\0\2\10\3\0\6\10\1\123\5\10\1\124\2\0"+
    "\10\10\1\0\1\10\4\0\2\10\1\125\2\10\13\0"+
    "\2\10\3\0\14\10\1\126\2\0\10\10\1\0\1\10"+
    "\4\0\1\127\4\10\13\0\2\10\3\0\11\10\1\130"+
    "\3\10\2\0\10\10\1\0\1\10\4\0\3\10\1\131"+
    "\1\10\13\0\2\10\3\0\11\10\1\132\3\10\2\0"+
    "\3\10\1\133\4\10\1\0\1\10\47\0\2\44\15\0"+
    "\5\10\13\0\2\10\3\0\15\10\1\0\1\44\1\45"+
    "\7\10\1\0\1\10\4\0\2\10\1\134\2\10\13\0"+
    "\2\10\3\0\15\10\2\0\5\10\1\135\2\10\1\0"+
    "\1\10\4\0\1\136\4\10\13\0\2\10\3\0\3\10"+
    "\1\137\4\10\1\140\4\10\2\0\10\10\1\0\1\10"+
    "\4\0\2\10\1\141\2\10\13\0\2\10\3\0\15\10"+
    "\2\0\10\10\1\0\1\10\4\0\2\10\1\142\2\10"+
    "\13\0\2\10\3\0\15\10\2\0\10\10\1\0\1\10"+
    "\4\0\5\10\13\0\2\10\3\0\14\10\1\143\2\0"+
    "\10\10\1\0\1\10\4\0\5\10\13\0\2\10\3\0"+
    "\15\10\2\0\7\10\1\144\1\0\1\10\4\0\5\10"+
    "\13\0\2\10\3\0\15\10\2\0\7\10\1\145\1\0"+
    "\1\10\4\0\3\10\1\146\1\10\13\0\2\10\3\0"+
    "\15\10\2\0\10\10\1\0\1\10\4\0\4\10\1\147"+
    "\13\0\2\10\3\0\1\150\14\10\2\0\10\10\1\0"+
    "\1\10\4\0\4\10\1\56\13\0\2\10\3\0\15\10"+
    "\2\0\10\10\1\0\1\10\4\0\2\10\1\151\2\10"+
    "\13\0\2\10\3\0\15\10\2\0\10\10\1\0\1\10"+
    "\4\0\5\10\13\0\2\10\3\0\14\10\1\152\2\0"+
    "\10\10\1\0\1\10\4\0\2\10\1\153\2\10\13\0"+
    "\2\10\3\0\15\10\2\0\10\10\1\0\1\10\4\0"+
    "\5\10\13\0\2\10\3\0\6\10\1\154\6\10\2\0"+
    "\10\10\1\0\1\10\4\0\5\10\13\0\2\10\3\0"+
    "\4\10\1\155\10\10\2\0\10\10\1\0\1\10\4\0"+
    "\5\10\13\0\2\10\3\0\15\10\2\0\3\10\1\156"+
    "\4\10\1\0\1\10\4\0\5\10\13\0\2\10\3\0"+
    "\5\10\1\157\3\10\1\160\3\10\2\0\3\10\1\161"+
    "\3\10\1\162\1\0\1\10\1\0\22\73\1\163\37\73"+
    "\21\0\1\164\43\0\1\165\4\10\13\0\2\10\3\0"+
    "\3\10\1\166\11\10\2\0\10\10\1\0\1\10\4\0"+
    "\1\10\1\167\3\10\13\0\2\10\3\0\3\10\1\170"+
    "\11\10\2\0\10\10\1\0\1\10\4\0\3\10\1\171"+
    "\1\10\13\0\2\10\3\0\7\10\1\172\5\10\2\0"+
    "\10\10\1\0\1\10\4\0\5\10\13\0\2\10\3\0"+
    "\10\10\1\173\4\10\2\0\10\10\1\0\1\10\4\0"+
    "\5\10\13\0\2\10\3\0\14\10\1\174\2\0\10\10"+
    "\1\0\1\10\4\0\1\10\1\175\3\10\13\0\2\10"+
    "\3\0\15\10\2\0\10\10\1\0\1\10\4\0\5\10"+
    "\13\0\2\10\3\0\12\10\1\176\2\10\2\0\10\10"+
    "\1\0\1\10\4\0\5\10\13\0\2\10\3\0\3\10"+
    "\1\177\11\10\2\0\10\10\1\0\1\10\4\0\5\10"+
    "\13\0\2\10\3\0\14\10\1\200\2\0\10\10\1\0"+
    "\1\10\4\0\5\10\13\0\2\10\3\0\4\10\1\201"+
    "\10\10\2\0\10\10\1\0\1\10\4\0\5\10\13\0"+
    "\2\10\3\0\1\202\14\10\2\0\10\10\1\0\1\10"+
    "\4\0\1\10\1\203\3\10\13\0\2\10\3\0\15\10"+
    "\2\0\10\10\1\0\1\10\4\0\5\10\13\0\2\10"+
    "\3\0\11\10\1\204\3\10\2\0\10\10\1\0\1\10"+
    "\4\0\3\10\1\205\1\10\13\0\2\10\3\0\15\10"+
    "\2\0\10\10\1\0\1\10\4\0\3\10\1\206\1\10"+
    "\13\0\2\10\3\0\15\10\2\0\10\10\1\0\1\10"+
    "\4\0\5\10\13\0\2\10\3\0\2\10\1\207\12\10"+
    "\2\0\10\10\1\0\1\10\4\0\5\10\13\0\2\10"+
    "\3\0\15\10\2\0\3\10\1\210\4\10\1\0\1\10"+
    "\4\0\5\10\13\0\2\10\3\0\2\10\1\211\12\10"+
    "\2\0\10\10\1\0\1\10\4\0\5\10\13\0\2\10"+
    "\3\0\6\10\1\212\6\10\2\0\10\10\1\0\1\10"+
    "\4\0\1\10\1\213\3\10\13\0\2\10\3\0\15\10"+
    "\2\0\10\10\1\0\1\10\4\0\1\10\1\214\1\10"+
    "\1\215\1\10\13\0\2\10\3\0\15\10\2\0\10\10"+
    "\1\0\1\10\4\0\1\10\1\216\3\10\13\0\2\10"+
    "\3\0\15\10\2\0\10\10\1\0\1\10\4\0\1\10"+
    "\1\217\3\10\13\0\2\10\3\0\15\10\2\0\10\10"+
    "\1\0\1\10\4\0\5\10\13\0\2\10\3\0\2\10"+
    "\1\220\12\10\2\0\10\10\1\0\1\10\4\0\5\10"+
    "\13\0\2\10\3\0\6\10\1\221\6\10\2\0\10\10"+
    "\1\0\1\10\4\0\4\10\1\222\13\0\2\10\3\0"+
    "\15\10\2\0\10\10\1\0\1\10\4\0\5\10\13\0"+
    "\2\10\3\0\3\10\1\223\11\10\2\0\3\10\1\224"+
    "\4\10\1\0\1\10\4\0\5\10\13\0\2\10\3\0"+
    "\1\225\14\10\2\0\10\10\1\0\1\10\4\0\5\10"+
    "\13\0\2\10\3\0\3\10\1\226\5\10\1\227\3\10"+
    "\2\0\10\10\1\0\1\10\4\0\5\10\13\0\2\10"+
    "\3\0\3\10\1\230\11\10\2\0\10\10\1\0\1\10"+
    "\4\0\5\10\13\0\2\10\3\0\11\10\1\231\3\10"+
    "\2\0\10\10\1\0\1\10\4\0\3\10\1\232\1\10"+
    "\13\0\2\10\3\0\4\10\1\233\10\10\2\0\10\10"+
    "\1\0\1\10\4\0\1\234\4\10\13\0\2\10\3\0"+
    "\15\10\2\0\10\10\1\0\1\10\4\0\5\10\13\0"+
    "\2\10\3\0\7\10\1\235\5\10\2\0\10\10\1\0"+
    "\1\10\4\0\5\10\13\0\2\10\3\0\13\10\1\236"+
    "\1\10\2\0\10\10\1\0\1\10\4\0\5\10\13\0"+
    "\2\10\3\0\11\10\1\237\3\10\2\0\10\10\1\0"+
    "\1\10\4\0\5\10\13\0\2\10\3\0\14\10\1\240"+
    "\2\0\10\10\1\0\1\10\4\0\1\147\4\10\13\0"+
    "\2\10\3\0\15\10\2\0\10\10\1\0\1\10\4\0"+
    "\4\10\1\241\13\0\2\10\3\0\15\10\2\0\10\10"+
    "\1\0\1\10\4\0\5\10\13\0\2\10\3\0\3\10"+
    "\1\242\11\10\2\0\10\10\1\0\1\10\4\0\1\10"+
    "\1\243\3\10\13\0\2\10\3\0\15\10\2\0\10\10"+
    "\1\0\1\10\4\0\2\10\1\244\2\10\13\0\2\10"+
    "\3\0\15\10\2\0\10\10\1\0\1\10\4\0\3\10"+
    "\1\245\1\10\13\0\2\10\3\0\15\10\2\0\10\10"+
    "\1\0\1\10\4\0\5\10\13\0\2\10\3\0\11\10"+
    "\1\147\3\10\2\0\10\10\1\0\1\10\4\0\1\246"+
    "\4\10\13\0\2\10\3\0\15\10\2\0\10\10\1\0"+
    "\1\10\4\0\2\10\1\247\2\10\13\0\2\10\3\0"+
    "\15\10\2\0\10\10\1\0\1\10\4\0\2\10\1\250"+
    "\2\10\13\0\2\10\3\0\15\10\2\0\10\10\1\0"+
    "\1\10\4\0\2\10\1\251\2\10\13\0\2\10\3\0"+
    "\14\10\1\252\2\0\10\10\1\0\1\10\4\0\2\10"+
    "\1\253\2\10\13\0\2\10\3\0\15\10\2\0\10\10"+
    "\1\0\1\10\4\0\2\10\1\254\2\10\13\0\2\10"+
    "\3\0\15\10\2\0\10\10\1\0\1\10\1\0\21\164"+
    "\1\255\40\164\3\0\5\10\13\0\2\10\3\0\1\10"+
    "\1\256\13\10\2\0\10\10\1\0\1\10\4\0\3\10"+
    "\1\257\1\10\13\0\2\10\3\0\15\10\2\0\10\10"+
    "\1\0\1\10\4\0\2\10\1\203\2\10\13\0\2\10"+
    "\3\0\15\10\2\0\10\10\1\0\1\10\4\0\3\10"+
    "\1\260\1\10\13\0\2\10\3\0\15\10\2\0\10\10"+
    "\1\0\1\10\4\0\5\10\13\0\2\10\3\0\10\10"+
    "\1\261\4\10\2\0\10\10\1\0\1\10\4\0\5\10"+
    "\13\0\2\10\3\0\15\10\2\0\6\10\1\262\1\10"+
    "\1\0\1\10\4\0\5\10\13\0\2\10\3\0\4\10"+
    "\1\263\10\10\2\0\10\10\1\0\1\10\4\0\5\10"+
    "\13\0\2\10\3\0\14\10\1\264\2\0\10\10\1\0"+
    "\1\10\4\0\2\10\1\265\2\10\13\0\2\10\3\0"+
    "\15\10\2\0\10\10\1\0\1\10\4\0\5\10\13\0"+
    "\2\10\3\0\14\10\1\266\2\0\10\10\1\0\1\10"+
    "\4\0\3\10\1\267\1\10\13\0\2\10\3\0\15\10"+
    "\2\0\10\10\1\0\1\10\4\0\3\10\1\270\1\10"+
    "\13\0\2\10\3\0\15\10\2\0\10\10\1\0\1\10"+
    "\4\0\5\10\13\0\2\10\3\0\5\10\1\271\7\10"+
    "\2\0\10\10\1\0\1\10\4\0\1\10\1\272\3\10"+
    "\13\0\2\10\3\0\15\10\2\0\10\10\1\0\1\10"+
    "\4\0\5\10\13\0\2\10\3\0\15\10\2\0\3\10"+
    "\1\273\4\10\1\0\1\10\4\0\5\10\13\0\2\10"+
    "\3\0\3\10\1\274\11\10\2\0\10\10\1\0\1\10"+
    "\4\0\5\10\13\0\2\10\3\0\7\10\1\275\5\10"+
    "\2\0\10\10\1\0\1\10\4\0\5\10\13\0\2\10"+
    "\3\0\1\276\14\10\2\0\10\10\1\0\1\10\4\0"+
    "\1\277\4\10\13\0\2\10\3\0\14\10\1\277\2\0"+
    "\10\10\1\0\1\10\4\0\2\10\1\300\2\10\13\0"+
    "\2\10\3\0\15\10\2\0\10\10\1\0\1\10\4\0"+
    "\5\10\13\0\2\10\3\0\14\10\1\301\2\0\10\10"+
    "\1\0\1\10\4\0\3\10\1\302\1\10\13\0\2\10"+
    "\3\0\15\10\2\0\10\10\1\0\1\10\4\0\5\10"+
    "\13\0\2\10\3\0\2\10\1\303\12\10\2\0\10\10"+
    "\1\0\1\10\4\0\5\10\13\0\2\10\3\0\1\10"+
    "\1\304\13\10\2\0\10\10\1\0\1\10\4\0\5\10"+
    "\13\0\2\10\3\0\3\10\1\305\11\10\2\0\10\10"+
    "\1\0\1\10\4\0\4\10\1\306\13\0\2\10\3\0"+
    "\15\10\2\0\10\10\1\0\1\10\4\0\5\10\13\0"+
    "\2\10\3\0\13\10\1\307\1\10\2\0\10\10\1\0"+
    "\1\10\4\0\5\10\13\0\2\10\3\0\14\10\1\147"+
    "\2\0\10\10\1\0\1\10\4\0\5\10\13\0\2\10"+
    "\3\0\2\10\1\310\12\10\2\0\10\10\1\0\1\10"+
    "\4\0\5\10\13\0\2\10\3\0\14\10\1\311\2\0"+
    "\10\10\1\0\1\10\4\0\5\10\13\0\2\10\3\0"+
    "\14\10\1\312\2\0\10\10\1\0\1\10\4\0\5\10"+
    "\13\0\2\10\3\0\10\10\1\313\4\10\2\0\10\10"+
    "\1\0\1\10\4\0\5\10\13\0\2\10\3\0\11\10"+
    "\1\314\3\10\2\0\10\10\1\0\1\10\4\0\5\10"+
    "\13\0\2\10\3\0\11\10\1\315\3\10\2\0\10\10"+
    "\1\0\1\10\4\0\5\10\13\0\2\10\3\0\10\10"+
    "\1\316\4\10\2\0\10\10\1\0\1\10\4\0\1\317"+
    "\4\10\13\0\2\10\3\0\15\10\2\0\10\10\1\0"+
    "\1\10\4\0\3\10\1\320\1\10\13\0\2\10\3\0"+
    "\15\10\2\0\10\10\1\0\1\10\4\0\5\10\13\0"+
    "\2\10\3\0\1\321\14\10\2\0\10\10\1\0\1\10"+
    "\4\0\5\10\13\0\2\10\3\0\14\10\1\322\2\0"+
    "\10\10\1\0\1\10\4\0\1\323\4\10\13\0\2\10"+
    "\3\0\15\10\2\0\10\10\1\0\1\10\4\0\5\10"+
    "\13\0\2\10\3\0\11\10\1\324\3\10\2\0\10\10"+
    "\1\0\1\10\4\0\5\10\13\0\2\10\3\0\7\10"+
    "\1\325\5\10\2\0\10\10\1\0\1\10\4\0\1\326"+
    "\4\10\13\0\2\10\3\0\15\10\2\0\10\10\1\0"+
    "\1\10\4\0\5\10\13\0\2\10\3\0\10\10\1\327"+
    "\4\10\2\0\10\10\1\0\1\10\4\0\5\10\13\0"+
    "\2\10\3\0\3\10\1\330\11\10\2\0\10\10\1\0"+
    "\1\10\4\0\5\10\13\0\2\10\3\0\10\10\1\331"+
    "\4\10\2\0\10\10\1\0\1\10\4\0\5\10\13\0"+
    "\2\10\3\0\15\10\2\0\1\10\1\332\6\10\1\0"+
    "\1\10\4\0\5\10\13\0\2\10\3\0\12\10\1\333"+
    "\2\10\2\0\10\10\1\0\1\10\4\0\5\10\13\0"+
    "\2\10\3\0\13\10\1\334\1\10\2\0\10\10\1\0"+
    "\1\10\4\0\5\10\13\0\2\10\3\0\6\10\1\335"+
    "\6\10\2\0\10\10\1\0\1\10\4\0\3\10\1\336"+
    "\1\10\13\0\2\10\3\0\15\10\2\0\10\10\1\0"+
    "\1\10\4\0\5\10\13\0\2\10\3\0\10\10\1\337"+
    "\4\10\2\0\10\10\1\0\1\10\4\0\5\10\13\0"+
    "\2\10\3\0\7\10\1\340\5\10\2\0\10\10\1\0"+
    "\1\10\4\0\1\10\1\341\3\10\13\0\2\10\3\0"+
    "\15\10\2\0\10\10\1\0\1\10\22\0\1\342\43\0"+
    "\1\10\1\343\3\10\13\0\2\10\3\0\15\10\2\0"+
    "\10\10\1\0\1\10\4\0\5\10\13\0\2\10\3\0"+
    "\7\10\1\344\1\345\4\10\2\0\10\10\1\0\1\10"+
    "\4\0\5\10\13\0\2\10\3\0\10\10\1\346\4\10"+
    "\2\0\10\10\1\0\1\10\4\0\2\10\1\347\2\10"+
    "\13\0\2\10\3\0\15\10\2\0\10\10\1\0\1\10"+
    "\4\0\5\10\13\0\2\10\3\0\4\10\1\350\10\10"+
    "\2\0\10\10\1\0\1\10\4\0\4\10\1\351\13\0"+
    "\2\10\3\0\15\10\2\0\10\10\1\0\1\10\4\0"+
    "\3\10\1\147\1\10\13\0\2\10\3\0\15\10\2\0"+
    "\10\10\1\0\1\10\4\0\5\10\13\0\2\10\3\0"+
    "\4\10\1\352\10\10\2\0\10\10\1\0\1\10\4\0"+
    "\5\10\13\0\2\10\3\0\4\10\1\353\10\10\2\0"+
    "\10\10\1\0\1\10\4\0\5\10\13\0\2\10\3\0"+
    "\10\10\1\354\4\10\2\0\10\10\1\0\1\10\4\0"+
    "\1\10\1\355\3\10\13\0\2\10\3\0\15\10\2\0"+
    "\10\10\1\0\1\10\4\0\5\10\13\0\2\10\3\0"+
    "\3\10\1\356\11\10\2\0\10\10\1\0\1\10\4\0"+
    "\1\301\4\10\13\0\2\10\3\0\14\10\1\301\2\0"+
    "\10\10\1\0\1\10\4\0\5\10\13\0\2\10\3\0"+
    "\15\10\2\0\3\10\1\357\4\10\1\0\1\10\4\0"+
    "\5\10\13\0\2\10\3\0\3\10\1\360\11\10\2\0"+
    "\10\10\1\0\1\10\4\0\2\10\1\361\2\10\13\0"+
    "\2\10\3\0\15\10\2\0\10\10\1\0\1\10\4\0"+
    "\5\10\13\0\2\10\3\0\4\10\1\362\10\10\2\0"+
    "\10\10\1\0\1\10\4\0\5\10\13\0\2\10\3\0"+
    "\4\10\1\363\10\10\2\0\10\10\1\0\1\10\4\0"+
    "\5\10\13\0\2\10\3\0\3\10\1\364\11\10\2\0"+
    "\10\10\1\0\1\10\4\0\1\365\4\10\13\0\2\10"+
    "\3\0\15\10\2\0\10\10\1\0\1\10\4\0\2\10"+
    "\1\366\2\10\13\0\2\10\3\0\15\10\2\0\10\10"+
    "\1\0\1\10\4\0\2\10\1\367\2\10\13\0\2\10"+
    "\3\0\14\10\1\147\2\0\10\10\1\0\1\10\4\0"+
    "\5\10\13\0\2\10\3\0\4\10\1\370\10\10\2\0"+
    "\10\10\1\0\1\10\4\0\5\10\13\0\2\10\3\0"+
    "\3\10\1\371\11\10\2\0\10\10\1\0\1\10\4\0"+
    "\5\10\13\0\2\10\3\0\4\10\1\372\10\10\2\0"+
    "\10\10\1\0\1\10\4\0\1\10\1\373\3\10\13\0"+
    "\2\10\3\0\15\10\2\0\10\10\1\0\1\10\4\0"+
    "\5\10\13\0\2\10\3\0\4\10\1\374\10\10\2\0"+
    "\10\10\1\0\1\10\4\0\5\10\13\0\2\10\3\0"+
    "\14\10\1\375\2\0\10\10\1\0\1\10\4\0\2\10"+
    "\1\376\2\10\13\0\2\10\3\0\15\10\2\0\10\10"+
    "\1\0\1\10\4\0\5\10\13\0\2\10\3\0\15\10"+
    "\2\0\3\10\1\377\4\10\1\0\1\10\4\0\1\u0100"+
    "\4\10\13\0\2\10\3\0\15\10\2\0\10\10\1\0"+
    "\1\10\4\0\5\10\13\0\2\10\3\0\4\10\1\u0101"+
    "\10\10\2\0\10\10\1\0\1\10\4\0\1\10\1\u0102"+
    "\3\10\13\0\2\10\3\0\15\10\2\0\10\10\1\0"+
    "\1\10\4\0\1\u0103\4\10\13\0\2\10\3\0\15\10"+
    "\2\0\10\10\1\0\1\10\4\0\1\u0104\4\10\13\0"+
    "\2\10\3\0\15\10\2\0\10\10\1\0\1\10\4\0"+
    "\5\10\13\0\2\10\3\0\10\10\1\u0105\4\10\2\0"+
    "\10\10\1\0\1\10\4\0\5\10\13\0\2\10\3\0"+
    "\2\10\1\u0106\12\10\2\0\10\10\1\0\1\10\4\0"+
    "\5\10\13\0\2\10\3\0\14\10\1\u0107\2\0\10\10"+
    "\1\0\1\10\4\0\5\10\13\0\2\10\3\0\11\10"+
    "\1\u0108\3\10\2\0\10\10\1\0\1\10\4\0\1\u0109"+
    "\4\10\13\0\2\10\3\0\15\10\2\0\10\10\1\0"+
    "\1\10\4\0\2\10\1\u010a\2\10\13\0\2\10\3\0"+
    "\15\10\2\0\10\10\1\0\1\10\4\0\5\10\13\0"+
    "\2\10\3\0\14\10\1\u010b\2\0\10\10\1\0\1\10"+
    "\4\0\5\10\13\0\2\10\3\0\11\10\1\u010c\3\10"+
    "\2\0\10\10\1\0\1\10\4\0\5\10\13\0\2\10"+
    "\3\0\11\10\1\u010d\3\10\2\0\10\10\1\0\1\10"+
    "\4\0\5\10\13\0\2\10\3\0\10\10\1\u010e\4\10"+
    "\2\0\10\10\1\0\1\10\4\0\5\10\13\0\2\10"+
    "\3\0\14\10\1\u010f\2\0\10\10\1\0\1\10\4\0"+
    "\5\10\13\0\2\10\3\0\10\10\1\u0110\4\10\2\0"+
    "\10\10\1\0\1\10\4\0\5\10\13\0\2\10\3\0"+
    "\4\10\1\u0111\10\10\2\0\10\10\1\0\1\10\22\0"+
    "\1\163\43\0\2\10\1\u0112\2\10\13\0\2\10\3\0"+
    "\15\10\2\0\10\10\1\0\1\10\4\0\5\10\13\0"+
    "\2\10\3\0\3\10\1\u0113\11\10\2\0\10\10\1\0"+
    "\1\10\4\0\5\10\13\0\2\10\3\0\4\10\1\u0114"+
    "\10\10\2\0\10\10\1\0\1\10\4\0\5\10\13\0"+
    "\2\10\3\0\4\10\1\u0115\10\10\2\0\10\10\1\0"+
    "\1\10\4\0\1\10\1\u0116\3\10\13\0\2\10\3\0"+
    "\15\10\2\0\10\10\1\0\1\10\4\0\5\10\13\0"+
    "\2\10\3\0\6\10\1\u0117\6\10\2\0\10\10\1\0"+
    "\1\10\4\0\1\u0118\4\10\13\0\2\10\3\0\15\10"+
    "\2\0\10\10\1\0\1\10\4\0\4\10\1\u0119\13\0"+
    "\2\10\3\0\3\10\1\u011a\11\10\2\0\10\10\1\0"+
    "\1\10\4\0\5\10\13\0\2\10\3\0\5\10\1\u011b"+
    "\7\10\2\0\10\10\1\0\1\10\4\0\1\10\1\u011c"+
    "\3\10\13\0\2\10\3\0\15\10\2\0\10\10\1\0"+
    "\1\10\4\0\1\u011d\4\10\13\0\2\10\3\0\15\10"+
    "\2\0\10\10\1\0\1\10\4\0\5\10\13\0\2\10"+
    "\3\0\2\10\1\u011e\12\10\2\0\10\10\1\0\1\10"+
    "\4\0\5\10\13\0\2\10\3\0\15\10\2\0\5\10"+
    "\1\u011f\2\10\1\0\1\10\4\0\1\u0120\4\10\13\0"+
    "\2\10\3\0\15\10\2\0\10\10\1\0\1\10\4\0"+
    "\1\10\1\u0121\3\10\13\0\2\10\3\0\15\10\2\0"+
    "\10\10\1\0\1\10\4\0\1\u0122\4\10\13\0\2\10"+
    "\3\0\15\10\2\0\10\10\1\0\1\10\4\0\1\10"+
    "\1\u0123\3\10\13\0\2\10\3\0\11\10\1\u0124\3\10"+
    "\2\0\10\10\1\0\1\10\4\0\3\10\1\u0125\1\10"+
    "\13\0\2\10\3\0\15\10\2\0\10\10\1\0\1\10"+
    "\4\0\5\10\13\0\2\10\3\0\4\10\1\u0126\10\10"+
    "\2\0\10\10\1\0\1\10\4\0\5\10\13\0\2\10"+
    "\3\0\13\10\1\u0127\1\10\2\0\10\10\1\0\1\10"+
    "\4\0\4\10\1\u0128\13\0\2\10\3\0\15\10\2\0"+
    "\10\10\1\0\1\10\4\0\5\10\13\0\2\10\3\0"+
    "\3\10\1\u0129\11\10\2\0\10\10\1\0\1\10\4\0"+
    "\3\10\1\u012a\1\10\13\0\2\10\3\0\15\10\2\0"+
    "\10\10\1\0\1\10\4\0\5\10\13\0\2\10\3\0"+
    "\3\10\1\u012b\11\10\2\0\10\10\1\0\1\10\4\0"+
    "\2\10\1\313\2\10\13\0\2\10\3\0\15\10\2\0"+
    "\10\10\1\0\1\10\4\0\5\10\13\0\2\10\3\0"+
    "\3\10\1\u012c\11\10\2\0\10\10\1\0\1\10\4\0"+
    "\1\10\1\u012d\3\10\13\0\2\10\3\0\15\10\2\0"+
    "\10\10\1\0\1\10\4\0\5\10\13\0\2\10\3\0"+
    "\3\10\1\u012e\11\10\2\0\10\10\1\0\1\10\4\0"+
    "\5\10\13\0\2\10\3\0\1\u012f\14\10\2\0\10\10"+
    "\1\0\1\10\4\0\5\10\13\0\2\10\3\0\2\10"+
    "\1\307\12\10\2\0\10\10\1\0\1\10\4\0\5\10"+
    "\13\0\2\10\3\0\15\10\2\0\2\10\1\147\5\10"+
    "\1\0\1\10\4\0\5\10\13\0\2\10\3\0\4\10"+
    "\1\u0130\10\10\2\0\10\10\1\0\1\10\4\0\5\10"+
    "\13\0\2\10\3\0\4\10\1\u0131\10\10\2\0\10\10"+
    "\1\0\1\10\4\0\5\10\13\0\2\10\3\0\11\10"+
    "\1\145\3\10\2\0\10\10\1\0\1\10\4\0\1\10"+
    "\1\u0132\3\10\13\0\2\10\3\0\15\10\2\0\10\10"+
    "\1\0\1\10\4\0\1\10\1\266\3\10\13\0\2\10"+
    "\3\0\15\10\2\0\10\10\1\0\1\10\4\0\1\10"+
    "\1\u0133\3\10\13\0\2\10\3\0\15\10\2\0\10\10"+
    "\1\0\1\10\4\0\5\10\13\0\2\10\3\0\14\10"+
    "\1\u0134\2\0\10\10\1\0\1\10\4\0\5\10\13\0"+
    "\2\10\3\0\10\10\1\u0135\4\10\2\0\10\10\1\0"+
    "\1\10\4\0\5\10\13\0\2\10\3\0\14\10\1\u0136"+
    "\2\0\10\10\1\0\1\10\4\0\5\10\13\0\2\10"+
    "\3\0\4\10\1\u0137\10\10\2\0\10\10\1\0\1\10"+
    "\4\0\5\10\13\0\2\10\3\0\3\10\1\u0138\11\10"+
    "\2\0\10\10\1\0\1\10\4\0\4\10\1\u0139\13\0"+
    "\2\10\3\0\15\10\2\0\10\10\1\0\1\10\4\0"+
    "\5\10\13\0\2\10\3\0\2\10\1\u013a\12\10\2\0"+
    "\10\10\1\0\1\10\4\0\5\10\13\0\2\10\3\0"+
    "\1\u013b\14\10\2\0\10\10\1\0\1\10\4\0\5\10"+
    "\13\0\2\10\3\0\12\10\1\u013c\2\10\2\0\10\10"+
    "\1\0\1\10\4\0\5\10\13\0\2\10\3\0\5\10"+
    "\1\u013d\7\10\2\0\10\10\1\0\1\10\4\0\5\10"+
    "\13\0\2\10\3\0\4\10\1\u013e\10\10\2\0\10\10"+
    "\1\0\1\10\4\0\5\10\13\0\2\10\3\0\1\u013f"+
    "\14\10\2\0\10\10\1\0\1\10\4\0\5\10\13\0"+
    "\2\10\3\0\15\10\2\0\2\10\1\u0140\5\10\1\0"+
    "\1\10\4\0\5\10\13\0\2\10\3\0\14\10\1\u0141"+
    "\2\0\10\10\1\0\1\10\4\0\5\10\13\0\2\10"+
    "\3\0\15\10\2\0\1\10\1\u0142\6\10\1\0\1\10"+
    "\4\0\5\10\13\0\2\10\3\0\6\10\1\u0143\6\10"+
    "\2\0\10\10\1\0\1\10\4\0\2\10\1\u0144\2\10"+
    "\13\0\2\10\3\0\15\10\2\0\10\10\1\0\1\10"+
    "\4\0\3\10\1\u0145\1\10\13\0\2\10\3\0\15\10"+
    "\2\0\10\10\1\0\1\10\4\0\5\10\13\0\2\10"+
    "\3\0\3\10\1\u0146\11\10\2\0\10\10\1\0\1\10"+
    "\4\0\3\10\1\u0147\1\10\13\0\2\10\3\0\15\10"+
    "\2\0\10\10\1\0\1\10\4\0\2\10\1\u0148\2\10"+
    "\13\0\2\10\3\0\14\10\1\u0149\2\0\10\10\1\0"+
    "\1\10\4\0\5\10\13\0\2\10\3\0\13\10\1\u014a"+
    "\1\10\2\0\10\10\1\0\1\10\4\0\5\10\13\0"+
    "\2\10\3\0\3\10\1\u014b\11\10\2\0\10\10\1\0"+
    "\1\10\4\0\5\10\13\0\2\10\3\0\14\10\1\u014c"+
    "\2\0\10\10\1\0\1\10\4\0\2\10\1\u014d\2\10"+
    "\13\0\2\10\3\0\15\10\2\0\10\10\1\0\1\10"+
    "\4\0\1\u014e\4\10\13\0\2\10\3\0\2\10\1\u014f"+
    "\10\10\1\u0150\1\10\2\0\6\10\1\u0151\1\10\1\0"+
    "\1\10\4\0\5\10\13\0\2\10\3\0\11\10\1\u0152"+
    "\3\10\2\0\10\10\1\0\1\10\4\0\5\10\13\0"+
    "\2\10\3\0\14\10\1\u0153\2\0\10\10\1\0\1\10"+
    "\4\0\3\10\1\u0154\1\10\13\0\2\10\3\0\15\10"+
    "\2\0\10\10\1\0\1\10\4\0\2\10\1\u0155\2\10"+
    "\13\0\2\10\3\0\15\10\2\0\10\10\1\0\1\10"+
    "\4\0\5\10\13\0\2\10\3\0\5\10\1\u012e\7\10"+
    "\2\0\10\10\1\0\1\10\4\0\3\10\1\u0156\1\10"+
    "\13\0\2\10\3\0\15\10\2\0\10\10\1\0\1\10"+
    "\4\0\5\10\13\0\2\10\3\0\4\10\1\u0157\10\10"+
    "\2\0\10\10\1\0\1\10\4\0\2\10\1\u0158\2\10"+
    "\13\0\2\10\3\0\15\10\2\0\10\10\1\0\1\10"+
    "\4\0\5\10\13\0\2\10\3\0\3\10\1\u0159\11\10"+
    "\2\0\10\10\1\0\1\10\4\0\5\10\13\0\2\10"+
    "\3\0\15\10\2\0\5\10\1\u015a\2\10\1\0\1\10"+
    "\4\0\5\10\13\0\2\10\3\0\3\10\1\u015b\11\10"+
    "\2\0\10\10\1\0\1\10\4\0\5\10\13\0\2\10"+
    "\3\0\4\10\1\u015c\10\10\2\0\10\10\1\0\1\10"+
    "\4\0\5\10\13\0\2\10\3\0\4\10\1\u015d\10\10"+
    "\2\0\10\10\1\0\1\10\4\0\1\u015e\4\10\13\0"+
    "\2\10\3\0\15\10\2\0\10\10\1\0\1\10\4\0"+
    "\5\10\13\0\2\10\3\0\12\10\1\u015f\2\10\2\0"+
    "\10\10\1\0\1\10\4\0\5\10\13\0\2\10\3\0"+
    "\14\10\1\u0160\2\0\10\10\1\0\1\10\4\0\2\10"+
    "\1\u0161\2\10\13\0\2\10\3\0\15\10\2\0\10\10"+
    "\1\0\1\10\4\0\2\10\1\u0162\2\10\13\0\2\10"+
    "\3\0\15\10\2\0\10\10\1\0\1\10\4\0\2\10"+
    "\1\u0163\2\10\13\0\2\10\3\0\15\10\2\0\10\10"+
    "\1\0\1\10\4\0\5\10\13\0\2\10\3\0\11\10"+
    "\1\u0164\3\10\2\0\10\10\1\0\1\10\4\0\5\10"+
    "\13\0\2\10\3\0\15\10\2\0\3\10\1\u0165\4\10"+
    "\1\0\1\10\4\0\3\10\1\u0166\1\10\13\0\2\10"+
    "\3\0\15\10\2\0\10\10\1\0\1\10\4\0\1\10"+
    "\1\u0167\3\10\13\0\2\10\3\0\15\10\2\0\10\10"+
    "\1\0\1\10\4\0\5\10\13\0\2\10\3\0\15\10"+
    "\2\0\4\10\1\u0168\3\10\1\0\1\10\4\0\3\10"+
    "\1\u0169\1\10\13\0\2\10\3\0\15\10\2\0\10\10"+
    "\1\0\1\10\4\0\5\10\13\0\2\10\3\0\15\10"+
    "\2\0\3\10\1\375\4\10\1\0\1\10\4\0\5\10"+
    "\13\0\2\10\3\0\10\10\1\u016a\4\10\2\0\10\10"+
    "\1\0\1\10\4\0\1\10\1\345\3\10\13\0\2\10"+
    "\3\0\15\10\2\0\10\10\1\0\1\10\4\0\5\10"+
    "\13\0\2\10\3\0\4\10\1\u016b\10\10\2\0\10\10"+
    "\1\0\1\10\4\0\1\10\1\u0149\3\10\13\0\2\10"+
    "\3\0\15\10\2\0\10\10\1\0\1\10\4\0\5\10"+
    "\13\0\2\10\3\0\15\10\2\0\7\10\1\u016c\1\0"+
    "\1\10\4\0\5\10\13\0\2\10\3\0\1\10\1\u016d"+
    "\13\10\2\0\10\10\1\0\1\10\4\0\5\10\13\0"+
    "\2\10\3\0\5\10\1\u016e\7\10\2\0\10\10\1\0"+
    "\1\10\4\0\1\10\1\u011f\3\10\13\0\2\10\3\0"+
    "\15\10\2\0\10\10\1\0\1\10\4\0\5\10\13\0"+
    "\2\10\3\0\13\10\1\u016f\1\10\2\0\10\10\1\0"+
    "\1\10\4\0\5\10\13\0\2\10\3\0\6\10\1\u0170"+
    "\6\10\2\0\10\10\1\0\1\10\4\0\1\u0171\4\10"+
    "\13\0\2\10\3\0\15\10\2\0\10\10\1\0\1\10"+
    "\4\0\2\10\1\u0172\2\10\13\0\2\10\3\0\15\10"+
    "\2\0\10\10\1\0\1\10\4\0\5\10\13\0\2\10"+
    "\3\0\14\10\1\u0173\2\0\10\10\1\0\1\10\4\0"+
    "\1\10\1\u0174\3\10\13\0\2\10\3\0\15\10\2\0"+
    "\10\10\1\0\1\10\4\0\5\10\13\0\2\10\3\0"+
    "\4\10\1\u0175\10\10\2\0\10\10\1\0\1\10\4\0"+
    "\1\10\1\u0176\3\10\13\0\2\10\3\0\15\10\2\0"+
    "\10\10\1\0\1\10\4\0\5\10\13\0\2\10\3\0"+
    "\4\10\1\u0177\10\10\2\0\10\10\1\0\1\10\4\0"+
    "\1\u0178\4\10\13\0\2\10\3\0\15\10\2\0\10\10"+
    "\1\0\1\10\4\0\5\10\13\0\2\10\3\0\3\10"+
    "\1\u0179\11\10\2\0\10\10\1\0\1\10\4\0\3\10"+
    "\1\u017a\1\10\13\0\2\10\3\0\15\10\2\0\10\10"+
    "\1\0\1\10\4\0\2\10\1\u017b\2\10\13\0\2\10"+
    "\3\0\15\10\2\0\10\10\1\0\1\10\4\0\1\u0106"+
    "\4\10\13\0\2\10\3\0\15\10\2\0\10\10\1\0"+
    "\1\10\4\0\5\10\13\0\2\10\3\0\13\10\1\u017c"+
    "\1\10\2\0\6\10\1\u017d\1\10\1\0\1\10\4\0"+
    "\4\10\1\u017e\13\0\2\10\3\0\15\10\2\0\10\10"+
    "\1\0\1\10\4\0\5\10\13\0\2\10\3\0\13\10"+
    "\1\u017f\1\10\2\0\10\10\1\0\1\10\4\0\2\10"+
    "\1\u0180\2\10\13\0\2\10\3\0\15\10\2\0\10\10"+
    "\1\0\1\10\4\0\5\10\13\0\2\10\3\0\4\10"+
    "\1\u0181\10\10\2\0\10\10\1\0\1\10\4\0\5\10"+
    "\13\0\2\10\3\0\11\10\1\u0161\3\10\2\0\10\10"+
    "\1\0\1\10\4\0\1\10\1\u0182\3\10\13\0\2\10"+
    "\3\0\15\10\2\0\10\10\1\0\1\10\4\0\1\u0183"+
    "\4\10\13\0\2\10\3\0\15\10\2\0\10\10\1\0"+
    "\1\10\4\0\5\10\13\0\2\10\3\0\6\10\1\u0184"+
    "\6\10\2\0\10\10\1\0\1\10\4\0\5\10\13\0"+
    "\2\10\3\0\14\10\1\u0185\2\0\10\10\1\0\1\10"+
    "\4\0\5\10\13\0\2\10\3\0\6\10\1\u0186\6\10"+
    "\2\0\10\10\1\0\1\10\4\0\5\10\13\0\2\10"+
    "\3\0\7\10\1\u0187\5\10\2\0\10\10\1\0\1\10"+
    "\4\0\5\10\13\0\2\10\3\0\4\10\1\u0188\10\10"+
    "\2\0\10\10\1\0\1\10\4\0\5\10\13\0\2\10"+
    "\3\0\1\u0189\14\10\2\0\10\10\1\0\1\10\4\0"+
    "\5\10\13\0\2\10\3\0\14\10\1\u018a\2\0\10\10"+
    "\1\0\1\10\4\0\5\10\13\0\2\10\3\0\15\10"+
    "\2\0\5\10\1\u018b\2\10\1\0\1\10\4\0\5\10"+
    "\13\0\2\10\3\0\10\10\1\u018c\4\10\2\0\10\10"+
    "\1\0\1\10\4\0\5\10\13\0\2\10\3\0\15\10"+
    "\2\0\7\10\1\u018d\1\0\1\10\4\0\1\10\1\u018e"+
    "\3\10\13\0\2\10\3\0\15\10\2\0\10\10\1\0"+
    "\1\10\4\0\5\10\13\0\2\10\3\0\2\10\1\u018f"+
    "\12\10\2\0\10\10\1\0\1\10\4\0\5\10\13\0"+
    "\2\10\3\0\13\10\1\u0190\1\10\2\0\10\10\1\0"+
    "\1\10\4\0\1\301\4\10\13\0\2\10\3\0\15\10"+
    "\2\0\10\10\1\0\1\10\4\0\5\10\13\0\2\10"+
    "\3\0\5\10\1\u0191\7\10\2\0\10\10\1\0\1\10"+
    "\4\0\5\10\13\0\2\10\3\0\4\10\1\u0192\10\10"+
    "\2\0\10\10\1\0\1\10\4\0\5\10\13\0\2\10"+
    "\3\0\5\10\1\u0193\7\10\2\0\10\10\1\0\1\10"+
    "\4\0\5\10\13\0\2\10\3\0\13\10\1\u0194\1\10"+
    "\2\0\10\10\1\0\1\10\4\0\3\10\1\u0195\1\10"+
    "\13\0\2\10\3\0\15\10\2\0\10\10\1\0\1\10"+
    "\4\0\5\10\13\0\2\10\3\0\4\10\1\u0196\10\10"+
    "\2\0\10\10\1\0\1\10\4\0\5\10\13\0\2\10"+
    "\3\0\15\10\2\0\3\10\1\u0197\4\10\1\0\1\10"+
    "\4\0\1\u0198\4\10\13\0\2\10\3\0\15\10\2\0"+
    "\10\10\1\0\1\10\4\0\2\10\1\u0199\2\10\13\0"+
    "\2\10\3\0\15\10\2\0\10\10\1\0\1\10\4\0"+
    "\5\10\13\0\2\10\3\0\14\10\1\u019a\2\0\10\10"+
    "\1\0\1\10\4\0\5\10\13\0\2\10\3\0\15\10"+
    "\2\0\7\10\1\u019b\1\0\1\10\4\0\1\10\1\u019c"+
    "\3\10\13\0\2\10\3\0\15\10\2\0\10\10\1\0"+
    "\1\10\4\0\5\10\13\0\2\10\3\0\1\u019d\14\10"+
    "\2\0\10\10\1\0\1\10\4\0\5\10\13\0\2\10"+
    "\3\0\3\10\1\u019e\11\10\2\0\10\10\1\0\1\10"+
    "\4\0\1\u019f\4\10\13\0\2\10\3\0\15\10\2\0"+
    "\10\10\1\0\1\10\4\0\5\10\13\0\2\10\3\0"+
    "\14\10\1\u01a0\2\0\10\10\1\0\1\10\4\0\5\10"+
    "\13\0\2\10\3\0\7\10\1\u01a1\5\10\2\0\10\10"+
    "\1\0\1\10\4\0\5\10\13\0\2\10\3\0\3\10"+
    "\1\u01a2\11\10\2\0\10\10\1\0\1\10\4\0\5\10"+
    "\13\0\2\10\3\0\10\10\1\u01a3\4\10\2\0\10\10"+
    "\1\0\1\10\4\0\5\10\13\0\2\10\3\0\2\10"+
    "\1\u01a4\12\10\2\0\10\10\1\0\1\10\4\0\1\10"+
    "\1\u01a5\3\10\13\0\2\10\3\0\15\10\2\0\10\10"+
    "\1\0\1\10\4\0\5\10\13\0\2\10\3\0\10\10"+
    "\1\u01a6\4\10\2\0\10\10\1\0\1\10\4\0\5\10"+
    "\13\0\2\10\3\0\10\10\1\u01a7\4\10\2\0\10\10"+
    "\1\0\1\10\4\0\5\10\13\0\2\10\3\0\14\10"+
    "\1\u01a8\2\0\10\10\1\0\1\10\4\0\1\u01a9\4\10"+
    "\13\0\2\10\3\0\15\10\2\0\10\10\1\0\1\10"+
    "\4\0\5\10\13\0\2\10\3\0\13\10\1\u01aa\1\10"+
    "\2\0\10\10\1\0\1\10\4\0\1\u01ab\4\10\13\0"+
    "\2\10\3\0\15\10\2\0\10\10\1\0\1\10\4\0"+
    "\1\10\1\u01ac\3\10\13\0\2\10\3\0\15\10\2\0"+
    "\10\10\1\0\1\10\4\0\1\u01ad\4\10\13\0\2\10"+
    "\3\0\15\10\2\0\10\10\1\0\1\10\4\0\1\10"+
    "\1\u01ae\3\10\13\0\2\10\3\0\15\10\2\0\10\10"+
    "\1\0\1\10\4\0\5\10\13\0\2\10\3\0\15\10"+
    "\2\0\7\10\1\u01af\1\0\1\10\4\0\5\10\13\0"+
    "\2\10\3\0\10\10\1\u01b0\4\10\2\0\10\10\1\0"+
    "\1\10\4\0\5\10\13\0\2\10\3\0\5\10\1\u01b1"+
    "\7\10\2\0\10\10\1\0\1\10\4\0\5\10\13\0"+
    "\2\10\3\0\10\10\1\u01b2\4\10\2\0\10\10\1\0"+
    "\1\10\4\0\5\10\13\0\2\10\3\0\2\10\1\u01b3"+
    "\12\10\2\0\10\10\1\0\1\10\4\0\5\10\13\0"+
    "\2\10\3\0\13\10\1\u01b4\1\10\2\0\10\10\1\0"+
    "\1\10\4\0\5\10\13\0\2\10\3\0\4\10\1\u01b5"+
    "\10\10\2\0\10\10\1\0\1\10\4\0\5\10\13\0"+
    "\2\10\3\0\14\10\1\u01b6\2\0\10\10\1\0\1\10"+
    "\4\0\5\10\13\0\2\10\3\0\4\10\1\u01b7\10\10"+
    "\2\0\10\10\1\0\1\10\4\0\5\10\13\0\2\10"+
    "\3\0\3\10\1\u01b8\11\10\2\0\10\10\1\0\1\10"+
    "\4\0\2\10\1\u01b9\2\10\13\0\2\10\3\0\15\10"+
    "\2\0\10\10\1\0\1\10\4\0\1\10\1\u01ba\3\10"+
    "\13\0\2\10\3\0\15\10\2\0\10\10\1\0\1\10"+
    "\4\0\5\10\13\0\2\10\3\0\11\10\1\u01bb\3\10"+
    "\2\0\10\10\1\0\1\10\4\0\5\10\13\0\2\10"+
    "\3\0\15\10\2\0\5\10\1\u01bc\2\10\1\0\1\10"+
    "\4\0\5\10\13\0\2\10\3\0\14\10\1\u01bd\2\0"+
    "\10\10\1\0\1\10\4\0\5\10\13\0\2\10\3\0"+
    "\3\10\1\u01be\11\10\2\0\10\10\1\0\1\10\4\0"+
    "\5\10\13\0\2\10\3\0\14\10\1\u01bf\2\0\10\10"+
    "\1\0\1\10\4\0\5\10\13\0\2\10\3\0\3\10"+
    "\1\u01c0\11\10\2\0\10\10\1\0\1\10\4\0\1\u013f"+
    "\4\10\13\0\2\10\3\0\15\10\2\0\10\10\1\0"+
    "\1\10\4\0\5\10\13\0\2\10\3\0\10\10\1\u01c1"+
    "\4\10\2\0\10\10\1\0\1\10\4\0\5\10\13\0"+
    "\2\10\3\0\4\10\1\u01c2\10\10\2\0\10\10\1\0"+
    "\1\10\4\0\2\10\1\u01c3\2\10\13\0\2\10\3\0"+
    "\15\10\2\0\10\10\1\0\1\10\4\0\1\u01c4\4\10"+
    "\13\0\2\10\3\0\15\10\2\0\10\10\1\0\1\10"+
    "\4\0\1\u01c5\4\10\13\0\2\10\3\0\15\10\2\0"+
    "\10\10\1\0\1\10\4\0\5\10\13\0\2\10\3\0"+
    "\13\10\1\u01c6\1\10\2\0\10\10\1\0\1\10\4\0"+
    "\1\u01c7\4\10\13\0\2\10\3\0\15\10\2\0\10\10"+
    "\1\0\1\10\4\0\5\10\13\0\2\10\3\0\14\10"+
    "\1\u01c8\2\0\10\10\1\0\1\10\4\0\5\10\13\0"+
    "\2\10\3\0\3\10\1\u01c9\11\10\2\0\10\10\1\0"+
    "\1\10\4\0\1\10\1\u01ca\3\10\13\0\2\10\3\0"+
    "\15\10\2\0\10\10\1\0\1\10\4\0\2\10\1\u0133"+
    "\2\10\13\0\2\10\3\0\15\10\2\0\10\10\1\0"+
    "\1\10\4\0\5\10\13\0\2\10\3\0\13\10\1\u01cb"+
    "\1\10\2\0\10\10\1\0\1\10\4\0\1\u01cc\4\10"+
    "\13\0\2\10\3\0\15\10\2\0\10\10\1\0\1\10"+
    "\4\0\5\10\13\0\2\10\3\0\2\10\1\u01cd\12\10"+
    "\2\0\10\10\1\0\1\10\4\0\5\10\13\0\2\10"+
    "\3\0\7\10\1\u01ce\5\10\2\0\10\10\1\0\1\10"+
    "\4\0\5\10\13\0\2\10\3\0\13\10\1\u01cf\1\10"+
    "\2\0\6\10\1\u017d\1\10\1\0\1\10\4\0\3\10"+
    "\1\u01d0\1\10\13\0\2\10\3\0\15\10\2\0\10\10"+
    "\1\0\1\10\4\0\5\10\13\0\2\10\3\0\13\10"+
    "\1\u01d1\1\10\2\0\10\10\1\0\1\10\4\0\1\u01ba"+
    "\4\10\13\0\2\10\3\0\15\10\2\0\10\10\1\0"+
    "\1\10\4\0\2\10\1\u01a7\2\10\13\0\2\10\3\0"+
    "\15\10\2\0\10\10\1\0\1\10\4\0\1\10\1\u01d2"+
    "\3\10\13\0\2\10\3\0\15\10\2\0\10\10\1\0"+
    "\1\10\4\0\1\u01d3\4\10\13\0\2\10\3\0\15\10"+
    "\2\0\10\10\1\0\1\10\4\0\3\10\1\u01d4\1\10"+
    "\13\0\2\10\3\0\15\10\2\0\10\10\1\0\1\10"+
    "\4\0\1\u01d5\4\10\13\0\2\10\3\0\15\10\2\0"+
    "\10\10\1\0\1\10\4\0\4\10\1\u01d6\13\0\2\10"+
    "\3\0\15\10\2\0\10\10\1\0\1\10\4\0\5\10"+
    "\13\0\2\10\3\0\4\10\1\u01d7\10\10\2\0\10\10"+
    "\1\0\1\10\4\0\5\10\13\0\2\10\3\0\2\10"+
    "\1\u01c3\12\10\2\0\10\10\1\0\1\10\4\0\3\10"+
    "\1\u01d8\1\10\13\0\2\10\3\0\15\10\2\0\10\10"+
    "\1\0\1\10\4\0\5\10\13\0\2\10\3\0\15\10"+
    "\2\0\7\10\1\u01d9\1\0\1\10\4\0\3\10\1\u01da"+
    "\1\10\13\0\2\10\3\0\15\10\2\0\10\10\1\0"+
    "\1\10\4\0\5\10\13\0\2\10\3\0\10\10\1\u01db"+
    "\4\10\2\0\10\10\1\0\1\10\4\0\3\10\1\u01dc"+
    "\1\10\13\0\2\10\3\0\15\10\2\0\10\10\1\0"+
    "\1\10\4\0\1\u01dd\4\10\13\0\2\10\3\0\15\10"+
    "\2\0\10\10\1\0\1\10\4\0\1\u01de\4\10\13\0"+
    "\2\10\3\0\15\10\2\0\10\10\1\0\1\10\4\0"+
    "\5\10\13\0\2\10\3\0\3\10\1\u01bf\11\10\2\0"+
    "\10\10\1\0\1\10\4\0\5\10\13\0\2\10\3\0"+
    "\10\10\1\u01df\4\10\2\0\10\10\1\0\1\10\4\0"+
    "\1\u01e0\4\10\13\0\2\10\3\0\15\10\2\0\10\10"+
    "\1\0\1\10\4\0\5\10\13\0\2\10\3\0\10\10"+
    "\1\u01e1\4\10\2\0\10\10\1\0\1\10\4\0\5\10"+
    "\13\0\2\10\3\0\11\10\1\u01e2\3\10\2\0\10\10"+
    "\1\0\1\10\4\0\4\10\1\u01e3\13\0\2\10\3\0"+
    "\15\10\2\0\10\10\1\0\1\10\4\0\3\10\1\u0161"+
    "\1\10\13\0\2\10\3\0\15\10\2\0\10\10\1\0"+
    "\1\10\4\0\5\10\13\0\2\10\3\0\7\10\1\344"+
    "\5\10\2\0\10\10\1\0\1\10\4\0\5\10\13\0"+
    "\2\10\3\0\4\10\1\u01e4\10\10\2\0\10\10\1\0"+
    "\1\10\4\0\5\10\13\0\2\10\3\0\14\10\1\u01e5"+
    "\2\0\10\10\1\0\1\10\4\0\4\10\1\u01e6\13\0"+
    "\2\10\3\0\15\10\2\0\10\10\1\0\1\10\4\0"+
    "\5\10\13\0\2\10\3\0\10\10\1\u01e7\4\10\2\0"+
    "\10\10\1\0\1\10\4\0\5\10\13\0\2\10\3\0"+
    "\14\10\1\u01e8\2\0\10\10\1\0\1\10\4\0\5\10"+
    "\13\0\2\10\3\0\10\10\1\u01e9\4\10\2\0\10\10"+
    "\1\0\1\10\4\0\1\u0166\4\10\13\0\2\10\3\0"+
    "\15\10\2\0\10\10\1\0\1\10\4\0\5\10\13\0"+
    "\2\10\3\0\1\10\1\u01ea\13\10\2\0\10\10\1\0"+
    "\1\10\4\0\3\10\1\u01eb\1\10\13\0\2\10\3\0"+
    "\15\10\2\0\10\10\1\0\1\10\4\0\5\10\13\0"+
    "\2\10\3\0\2\10\1\u01cb\12\10\2\0\10\10\1\0"+
    "\1\10\4\0\5\10\13\0\2\10\3\0\2\10\1\u01ec"+
    "\12\10\2\0\10\10\1\0\1\10\4\0\2\10\1\u01ed"+
    "\2\10\13\0\2\10\3\0\15\10\2\0\10\10\1\0"+
    "\1\10\4\0\5\10\13\0\2\10\3\0\14\10\1\u01ee"+
    "\2\0\10\10\1\0\1\10\4\0\2\10\1\u018c\2\10"+
    "\13\0\2\10\3\0\15\10\2\0\10\10\1\0\1\10"+
    "\4\0\4\10\1\u01ef\13\0\2\10\3\0\15\10\2\0"+
    "\10\10\1\0\1\10\4\0\5\10\13\0\2\10\3\0"+
    "\11\10\1\u01f0\3\10\2\0\10\10\1\0\1\10\4\0"+
    "\5\10\13\0\2\10\3\0\14\10\1\u01f1\2\0\10\10"+
    "\1\0\1\10\4\0\5\10\13\0\2\10\3\0\10\10"+
    "\1\u01f2\4\10\2\0\10\10\1\0\1\10\4\0\5\10"+
    "\13\0\2\10\3\0\10\10\1\u01f3\4\10\2\0\10\10"+
    "\1\0\1\10\4\0\5\10\13\0\2\10\3\0\13\10"+
    "\1\u01f4\1\10\2\0\10\10\1\0\1\10\4\0\1\10"+
    "\1\u01ea\3\10\13\0\2\10\3\0\15\10\2\0\10\10"+
    "\1\0\1\10\4\0\5\10\13\0\2\10\3\0\14\10"+
    "\1\u01f5\2\0\10\10\1\0\1\10\4\0\2\10\1\u01f6"+
    "\2\10\13\0\2\10\3\0\15\10\2\0\10\10\1\0"+
    "\1\10\4\0\5\10\13\0\2\10\3\0\11\10\1\u01f7"+
    "\3\10\2\0\10\10\1\0\1\10\4\0\1\u01df\4\10"+
    "\13\0\2\10\3\0\15\10\2\0\10\10\1\0\1\10"+
    "\4\0\2\10\1\u01cb\2\10\13\0\2\10\3\0\15\10"+
    "\2\0\10\10\1\0\1\10\4\0\5\10\13\0\2\10"+
    "\3\0\11\10\1\u01f8\3\10\2\0\10\10\1\0\1\10"+
    "\4\0\3\10\1\u01f9\1\10\13\0\2\10\3\0\15\10"+
    "\2\0\10\10\1\0\1\10\4\0\2\10\1\u01fa\2\10"+
    "\13\0\2\10\3\0\15\10\2\0\10\10\1\0\1\10"+
    "\4\0\2\10\1\u01fb\2\10\13\0\2\10\3\0\15\10"+
    "\2\0\10\10\1\0\1\10\4\0\5\10\13\0\2\10"+
    "\3\0\10\10\1\u01fc\4\10\2\0\10\10\1\0\1\10"+
    "\4\0\3\10\1\u01fd\1\10\13\0\2\10\3\0\15\10"+
    "\2\0\10\10\1\0\1\10\4\0\3\10\1\u01fe\1\10"+
    "\13\0\2\10\3\0\15\10\2\0\10\10\1\0\1\10"+
    "\4\0\5\10\13\0\2\10\3\0\14\10\1\u01e9\2\0"+
    "\10\10\1\0\1\10\4\0\5\10\13\0\2\10\3\0"+
    "\10\10\1\u01ff\4\10\2\0\10\10\1\0\1\10\4\0"+
    "\5\10\13\0\2\10\3\0\10\10\1\u0200\4\10\2\0"+
    "\10\10\1\0\1\10\4\0\5\10\13\0\2\10\3\0"+
    "\14\10\1\u01e7\2\0\10\10\1\0\1\10\4\0\5\10"+
    "\13\0\2\10\3\0\14\10\1\u01f3\2\0\10\10\1\0"+
    "\1\10\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[23050];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\10\1\1\11\1\1\1\11"+
    "\1\1\2\11\1\1\1\11\1\1\3\11\12\1\1\11"+
    "\6\1\1\11\1\1\2\11\15\1\2\0\1\11\1\0"+
    "\64\1\1\11\1\0\70\1\1\0\64\1\1\0\u011e\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 162) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return ERROR;
            } 
            // fall through
          case 55: break;
          case 2: 
            { return OCOMPARACION;
            } 
            // fall through
          case 56: break;
          case 3: 
            { return OPERADORARITMETICORESTA;
            } 
            // fall through
          case 57: break;
          case 4: 
            { return IDENTIFICADOR;
            } 
            // fall through
          case 58: break;
          case 5: 
            { return OPERADORNEGACION;
            } 
            // fall through
          case 59: break;
          case 6: 
            { return OPERADORARITMETICO;
            } 
            // fall through
          case 60: break;
          case 7: 
            { return OPERADORARITMETICOSUMA;
            } 
            // fall through
          case 61: break;
          case 8: 
            { return SEPARADOR;
            } 
            // fall through
          case 62: break;
          case 9: 
            { return PUNTOYCOMA;
            } 
            // fall through
          case 63: break;
          case 10: 
            { return SALTOLINEA;
            } 
            // fall through
          case 64: break;
          case 11: 
            { return NUMERO;
            } 
            // fall through
          case 65: break;
          case 12: 
            { return LLAVEABRE;
            } 
            // fall through
          case 66: break;
          case 13: 
            { return LLAVECIERRA;
            } 
            // fall through
          case 67: break;
          case 14: 
            { return PARENTESISABRE;
            } 
            // fall through
          case 68: break;
          case 15: 
            { return PARENTESISCIERRA;
            } 
            // fall through
          case 69: break;
          case 16: 
            { /* Blanco */
            } 
            // fall through
          case 70: break;
          case 17: 
            { return DOSPUNTOS;
            } 
            // fall through
          case 71: break;
          case 18: 
            { return OPERADORASIGNACION;
            } 
            // fall through
          case 72: break;
          case 19: 
            { return OLOGICO;
            } 
            // fall through
          case 73: break;
          case 20: 
            { return HACER;
            } 
            // fall through
          case 74: break;
          case 21: 
            { return CADENA;
            } 
            // fall through
          case 75: break;
          case 22: 
            { return SI;
            } 
            // fall through
          case 76: break;
          case 23: 
            { return COLORES;
            } 
            // fall through
          case 77: break;
          case 24: 
            { return COMENTARIO;
            } 
            // fall through
          case 78: break;
          case 25: 
            { return PARA;
            } 
            // fall through
          case 79: break;
          case 26: 
            { return FIN;
            } 
            // fall through
          case 80: break;
          case 27: 
            { return VARIABLE;
            } 
            // fall through
          case 81: break;
          case 28: 
            { return AVANZAR;
            } 
            // fall through
          case 82: break;
          case 29: 
            { return PROGRAMA;
            } 
            // fall through
          case 83: break;
          case 30: 
            { return CASO;
            } 
            // fall through
          case 84: break;
          case 31: 
            { return BOOLEANO;
            } 
            // fall through
          case 85: break;
          case 32: 
            { return SINO;
            } 
            // fall through
          case 86: break;
          case 33: 
            { return ESPERA;
            } 
            // fall through
          case 87: break;
          case 34: 
            { return IMPRIMIRCADENA;
            } 
            // fall through
          case 88: break;
          case 35: 
            { return REPITE;
            } 
            // fall through
          case 89: break;
          case 36: 
            { return RANDOM;
            } 
            // fall through
          case 90: break;
          case 37: 
            { return TERMINARBLOQUE;
            } 
            // fall through
          case 91: break;
          case 38: 
            { return SINOSI;
            } 
            // fall through
          case 92: break;
          case 39: 
            { return REPITEHASTA;
            } 
            // fall through
          case 93: break;
          case 40: 
            { return DEFAULT;
            } 
            // fall through
          case 94: break;
          case 41: 
            { return TOMAR;
            } 
            // fall through
          case 95: break;
          case 42: 
            { return COMPARAR;
            } 
            // fall through
          case 96: break;
          case 43: 
            { return SOLTAR;
            } 
            // fall through
          case 97: break;
          case 44: 
            { return IMPRIMIRVARIABLE;
            } 
            // fall through
          case 98: break;
          case 45: 
            { return IZQUIERDA;
            } 
            // fall through
          case 99: break;
          case 46: 
            { return DERECHA;
            } 
            // fall through
          case 100: break;
          case 47: 
            { return PINTAR;
            } 
            // fall through
          case 101: break;
          case 48: 
            { return QUETENGODELANTE;
            } 
            // fall through
          case 102: break;
          case 49: 
            { return DESACTIVARKABOOM;
            } 
            // fall through
          case 103: break;
          case 50: 
            { return ELIMINAR;
            } 
            // fall through
          case 104: break;
          case 51: 
            { return KABOOMDEFRENTE;
            } 
            // fall through
          case 105: break;
          case 52: 
            { return MURODELANTE;
            } 
            // fall through
          case 106: break;
          case 53: 
            { return DEJAPINTAR;
            } 
            // fall through
          case 107: break;
          case 54: 
            { return OBJETODELANTE;
            } 
            // fall through
          case 108: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
