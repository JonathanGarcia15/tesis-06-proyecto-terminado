/* The following code was generated by JFlex 1.7.0 */

package Compilador.ES.Compiler;
import java_cup.runtime.Symbol;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>C:/Users/JoGarWeb/IdeaProjects/Tesis/src/Compilador/ES/CodigoFuente/LexerCup.flex</tt>
 */
class LexerCup implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\41\1\22\1\57\1\57\1\41\22\0\1\41\1\11\1\16"+
    "\5\0\1\27\1\40\1\13\1\15\1\17\1\2\1\21\1\14\12\23"+
    "\1\55\1\20\1\1\1\10\1\12\2\0\32\24\4\0\1\45\1\0"+
    "\1\5\1\35\1\50\1\7\1\37\1\54\1\31\1\51\1\34\1\53"+
    "\1\56\1\36\1\32\1\6\1\3\1\30\1\46\1\4\1\44\1\52"+
    "\1\47\1\33\3\24\1\43\1\25\1\42\1\26\7\0\1\57\u1fa2\0"+
    "\1\57\1\57\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\5\4\1\1\1\5\1\2"+
    "\2\6\1\7\1\1\1\10\1\11\1\1\1\12\1\13"+
    "\1\14\1\15\1\16\6\4\1\17\1\20\6\4\1\21"+
    "\1\22\1\2\1\23\10\4\2\0\1\24\1\0\13\4"+
    "\1\25\21\4\1\26\1\0\5\4\1\27\16\4\1\30"+
    "\1\31\10\4\1\0\1\4\1\32\14\4\1\33\15\4"+
    "\1\0\13\4\1\34\1\4\1\35\3\4\1\36\21\4"+
    "\1\37\1\4\1\40\5\4\1\41\4\4\1\42\26\4"+
    "\1\43\3\4\1\44\1\27\1\45\2\4\1\46\1\4"+
    "\1\47\5\4\1\50\47\4\1\51\4\4\1\52\4\4"+
    "\1\53\1\54\1\4\1\55\5\4\1\56\6\4\1\57"+
    "\6\4\1\60\7\4\1\61\1\4\1\62\3\4\1\63"+
    "\5\4\1\55\4\4\1\64\2\4\1\65\1\66";

  private static int [] zzUnpackAction() {
    int [] result = new int[336];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\60\0\220\0\300\0\360\0\u0120"+
    "\0\u0150\0\u0180\0\u0180\0\u0180\0\60\0\u01b0\0\60\0\u01e0"+
    "\0\60\0\60\0\u0210\0\60\0\u0240\0\60\0\60\0\60"+
    "\0\u0270\0\u02a0\0\u02d0\0\u0300\0\u0330\0\u0360\0\60\0\u0390"+
    "\0\u03c0\0\u03f0\0\u0420\0\u0450\0\u0480\0\u04b0\0\60\0\60"+
    "\0\60\0\u0120\0\u04e0\0\u0510\0\u0540\0\u0570\0\u05a0\0\u05d0"+
    "\0\u0600\0\u0630\0\u0660\0\u01e0\0\60\0\u0690\0\u06c0\0\u06f0"+
    "\0\u0720\0\u0750\0\u0780\0\u07b0\0\u07e0\0\u0810\0\u0840\0\u0870"+
    "\0\u08a0\0\u08d0\0\u0900\0\u0930\0\u0960\0\u0990\0\u09c0\0\u09f0"+
    "\0\u0a20\0\u0a50\0\u0a80\0\u0ab0\0\u0ae0\0\u0b10\0\u0b40\0\u0b70"+
    "\0\u0ba0\0\u0bd0\0\u0c00\0\60\0\u0c30\0\u0c60\0\u0c90\0\u0cc0"+
    "\0\u0cf0\0\u0d20\0\u0d50\0\u0d80\0\u0db0\0\u0de0\0\u0e10\0\u0e40"+
    "\0\u0e70\0\u0ea0\0\u0ed0\0\u0f00\0\u0f30\0\u0f60\0\u0f90\0\u0fc0"+
    "\0\u0ff0\0\u0120\0\u0120\0\u1020\0\u1050\0\u1080\0\u10b0\0\u10e0"+
    "\0\u1110\0\u1140\0\u1170\0\u11a0\0\u11d0\0\u0120\0\u1200\0\u1230"+
    "\0\u1260\0\u1290\0\u12c0\0\u12f0\0\u1320\0\u1350\0\u1380\0\u13b0"+
    "\0\u13e0\0\u1410\0\u0120\0\u1440\0\u1470\0\u14a0\0\u14d0\0\u1500"+
    "\0\u1530\0\u1560\0\u1590\0\u15c0\0\u15f0\0\u1620\0\u1650\0\u1680"+
    "\0\u16b0\0\u16e0\0\u1710\0\u1740\0\u1770\0\u17a0\0\u17d0\0\u1800"+
    "\0\u1830\0\u1860\0\u1890\0\u18c0\0\u0120\0\u18f0\0\u0120\0\u1920"+
    "\0\u1950\0\u1980\0\u0120\0\u19b0\0\u19e0\0\u1a10\0\u1a40\0\u1a70"+
    "\0\u1aa0\0\u1ad0\0\u1b00\0\u1b30\0\u1b60\0\u1b90\0\u1bc0\0\u1bf0"+
    "\0\u1c20\0\u1c50\0\u1c80\0\u1cb0\0\u0120\0\u1ce0\0\u0120\0\u1d10"+
    "\0\u1d40\0\u1d70\0\u1da0\0\u1dd0\0\u0120\0\u1e00\0\u1e30\0\u1e60"+
    "\0\u1e90\0\u0120\0\u1ec0\0\u1ef0\0\u1f20\0\u1f50\0\u1f80\0\u1fb0"+
    "\0\u1fe0\0\u2010\0\u2040\0\u2070\0\u20a0\0\u20d0\0\u2100\0\u2130"+
    "\0\u2160\0\u2190\0\u21c0\0\u21f0\0\u2220\0\u2250\0\u2280\0\u22b0"+
    "\0\u0120\0\u22e0\0\u2310\0\u2340\0\u0120\0\u0120\0\u2370\0\u23a0"+
    "\0\u23d0\0\u0120\0\u2400\0\u0120\0\u2430\0\u2460\0\u2490\0\u24c0"+
    "\0\u24f0\0\u0120\0\u2520\0\u2550\0\u2580\0\u25b0\0\u25e0\0\u2610"+
    "\0\u2640\0\u2670\0\u26a0\0\u26d0\0\u2700\0\u2730\0\u2760\0\u2790"+
    "\0\u27c0\0\u27f0\0\u2820\0\u2850\0\u2880\0\u28b0\0\u28e0\0\u2910"+
    "\0\u2940\0\u2970\0\u29a0\0\u29d0\0\u2a00\0\u2a30\0\u2a60\0\u2a90"+
    "\0\u2ac0\0\u2af0\0\u2b20\0\u2b50\0\u2b80\0\u2bb0\0\u2be0\0\u2c10"+
    "\0\u2c40\0\u0120\0\u2c70\0\u2ca0\0\u2cd0\0\u2d00\0\u0120\0\u2d30"+
    "\0\u2d60\0\u2d90\0\u2dc0\0\u0120\0\u0120\0\u2df0\0\u2e20\0\u2e50"+
    "\0\u2e80\0\u2eb0\0\u2ee0\0\u2f10\0\u0120\0\u2f40\0\u2f70\0\u2fa0"+
    "\0\u2fd0\0\u3000\0\u3030\0\u0120\0\u3060\0\u3090\0\u30c0\0\u30f0"+
    "\0\u3120\0\u3150\0\u0120\0\u3180\0\u31b0\0\u31e0\0\u3210\0\u3240"+
    "\0\u3270\0\u32a0\0\u0120\0\u32d0\0\u0120\0\u3300\0\u3330\0\u3360"+
    "\0\u0120\0\u3390\0\u33c0\0\u33f0\0\u3420\0\u3450\0\u0120\0\u3480"+
    "\0\u34b0\0\u34e0\0\u3510\0\u0120\0\u3540\0\u3570\0\u0120\0\u0120";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[336];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\10\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\2\10\1\36\1\37"+
    "\1\40\1\41\1\10\1\42\3\10\1\43\1\44\1\45"+
    "\1\10\1\46\1\47\1\10\63\0\1\50\5\0\1\51"+
    "\52\0\1\10\1\52\3\10\13\0\2\10\3\0\10\10"+
    "\2\0\13\10\1\0\1\10\4\0\1\53\4\10\13\0"+
    "\2\10\3\0\7\10\1\54\2\0\13\10\1\0\1\10"+
    "\4\0\3\10\1\55\1\10\13\0\2\10\3\0\2\10"+
    "\1\56\1\57\2\10\1\60\1\10\2\0\1\10\1\61"+
    "\11\10\1\0\1\10\4\0\5\10\13\0\2\10\3\0"+
    "\10\10\2\0\13\10\1\0\1\10\4\0\5\10\13\0"+
    "\2\10\3\0\7\10\1\62\2\0\13\10\1\0\1\10"+
    "\11\0\1\51\63\0\1\63\43\0\16\64\1\65\41\64"+
    "\21\0\1\66\61\0\1\25\37\0\1\10\1\67\1\70"+
    "\2\10\13\0\2\10\3\0\4\10\1\71\3\10\2\0"+
    "\13\10\1\0\1\10\4\0\5\10\13\0\2\10\3\0"+
    "\4\10\1\72\3\10\2\0\13\10\1\0\1\10\4\0"+
    "\5\10\13\0\2\10\3\0\4\10\1\73\3\10\2\0"+
    "\13\10\1\0\1\10\4\0\2\10\1\74\2\10\13\0"+
    "\2\10\3\0\7\10\1\75\2\0\13\10\1\0\1\10"+
    "\4\0\5\10\13\0\2\10\3\0\2\10\1\76\5\10"+
    "\2\0\13\10\1\0\1\10\4\0\5\10\13\0\2\10"+
    "\3\0\6\10\1\77\1\10\2\0\2\10\1\100\10\10"+
    "\1\0\1\10\42\0\2\40\20\0\5\10\13\0\2\10"+
    "\3\0\10\10\1\0\1\40\1\41\12\10\1\0\1\10"+
    "\4\0\1\101\4\10\13\0\2\10\3\0\4\10\1\102"+
    "\3\10\2\0\13\10\1\0\1\10\4\0\1\103\1\10"+
    "\1\104\2\10\13\0\2\10\3\0\10\10\2\0\13\10"+
    "\1\0\1\10\4\0\2\10\1\105\2\10\13\0\2\10"+
    "\3\0\10\10\2\0\13\10\1\0\1\10\4\0\1\106"+
    "\4\10\13\0\2\10\3\0\7\10\1\107\2\0\13\10"+
    "\1\0\1\10\4\0\2\10\1\110\2\10\13\0\2\10"+
    "\3\0\4\10\1\111\3\10\2\0\13\10\1\0\1\10"+
    "\4\0\5\10\13\0\2\10\3\0\10\10\2\0\11\10"+
    "\1\112\1\10\1\0\1\10\4\0\5\10\13\0\2\10"+
    "\3\0\1\113\7\10\2\0\13\10\1\0\1\10\4\0"+
    "\4\10\1\52\13\0\2\10\3\0\10\10\2\0\13\10"+
    "\1\0\1\10\4\0\2\10\1\114\2\10\13\0\2\10"+
    "\3\0\10\10\2\0\13\10\1\0\1\10\4\0\2\10"+
    "\1\115\2\10\13\0\2\10\3\0\10\10\2\0\13\10"+
    "\1\0\1\10\4\0\5\10\13\0\2\10\3\0\7\10"+
    "\1\116\2\0\13\10\1\0\1\10\4\0\5\10\13\0"+
    "\2\10\3\0\10\10\2\0\5\10\1\117\5\10\1\0"+
    "\1\10\4\0\5\10\13\0\2\10\3\0\6\10\1\120"+
    "\1\10\2\0\2\10\1\121\6\10\1\122\1\123\1\0"+
    "\1\10\1\0\22\63\1\124\35\63\21\0\1\125\41\0"+
    "\1\126\4\10\13\0\2\10\3\0\10\10\2\0\13\10"+
    "\1\0\1\10\4\0\1\10\1\127\3\10\13\0\2\10"+
    "\3\0\10\10\2\0\13\10\1\0\1\10\4\0\3\10"+
    "\1\130\1\10\13\0\2\10\3\0\10\10\2\0\13\10"+
    "\1\0\1\10\4\0\1\10\1\131\3\10\13\0\2\10"+
    "\3\0\10\10\2\0\13\10\1\0\1\10\4\0\5\10"+
    "\13\0\2\10\3\0\7\10\1\132\2\0\13\10\1\0"+
    "\1\10\4\0\1\10\1\133\3\10\13\0\2\10\3\0"+
    "\10\10\2\0\13\10\1\0\1\10\4\0\1\10\1\134"+
    "\3\10\13\0\2\10\3\0\10\10\2\0\13\10\1\0"+
    "\1\10\4\0\5\10\13\0\2\10\3\0\1\135\7\10"+
    "\2\0\13\10\1\0\1\10\4\0\5\10\13\0\2\10"+
    "\3\0\4\10\1\136\3\10\2\0\13\10\1\0\1\10"+
    "\4\0\5\10\13\0\2\10\3\0\1\137\7\10\2\0"+
    "\13\10\1\0\1\10\4\0\5\10\13\0\2\10\3\0"+
    "\6\10\1\140\1\10\2\0\13\10\1\0\1\10\4\0"+
    "\3\10\1\141\1\10\13\0\2\10\3\0\10\10\2\0"+
    "\3\10\1\142\7\10\1\0\1\10\4\0\5\10\13\0"+
    "\2\10\3\0\2\10\1\143\5\10\2\0\13\10\1\0"+
    "\1\10\4\0\5\10\13\0\2\10\3\0\10\10\2\0"+
    "\2\10\1\144\10\10\1\0\1\10\4\0\5\10\13\0"+
    "\2\10\3\0\10\10\2\0\6\10\1\145\4\10\1\0"+
    "\1\10\4\0\5\10\13\0\2\10\3\0\2\10\1\146"+
    "\5\10\2\0\13\10\1\0\1\10\4\0\1\10\1\147"+
    "\1\10\1\150\1\10\13\0\2\10\3\0\10\10\2\0"+
    "\13\10\1\0\1\10\4\0\5\10\13\0\2\10\3\0"+
    "\6\10\1\151\1\10\2\0\13\10\1\0\1\10\4\0"+
    "\3\10\1\152\1\10\13\0\2\10\3\0\10\10\2\0"+
    "\13\10\1\0\1\10\4\0\1\153\4\10\13\0\2\10"+
    "\3\0\10\10\2\0\13\10\1\0\1\10\4\0\5\10"+
    "\13\0\2\10\3\0\4\10\1\154\3\10\2\0\13\10"+
    "\1\0\1\10\4\0\1\10\1\155\3\10\13\0\2\10"+
    "\3\0\10\10\2\0\13\10\1\0\1\10\4\0\3\10"+
    "\1\156\1\10\13\0\2\10\3\0\10\10\2\0\13\10"+
    "\1\0\1\10\4\0\2\10\1\157\2\10\13\0\2\10"+
    "\3\0\10\10\2\0\13\10\1\0\1\10\4\0\5\10"+
    "\13\0\2\10\3\0\6\10\1\153\1\10\2\0\13\10"+
    "\1\0\1\10\4\0\2\10\1\160\2\10\13\0\2\10"+
    "\3\0\10\10\2\0\13\10\1\0\1\10\4\0\2\10"+
    "\1\161\2\10\13\0\2\10\3\0\10\10\2\0\13\10"+
    "\1\0\1\10\4\0\2\10\1\162\2\10\13\0\2\10"+
    "\3\0\10\10\2\0\13\10\1\0\1\10\4\0\2\10"+
    "\1\163\2\10\13\0\2\10\3\0\10\10\2\0\13\10"+
    "\1\0\1\10\1\0\21\125\1\164\36\125\3\0\5\10"+
    "\13\0\2\10\3\0\1\10\1\165\6\10\2\0\13\10"+
    "\1\0\1\10\4\0\2\10\1\166\2\10\13\0\2\10"+
    "\3\0\10\10\2\0\13\10\1\0\1\10\4\0\5\10"+
    "\13\0\2\10\3\0\10\10\2\0\10\10\1\167\2\10"+
    "\1\0\1\10\4\0\2\10\1\170\2\10\13\0\2\10"+
    "\3\0\10\10\2\0\13\10\1\0\1\10\4\0\3\10"+
    "\1\171\1\10\13\0\2\10\3\0\10\10\2\0\13\10"+
    "\1\0\1\10\4\0\5\10\13\0\2\10\3\0\4\10"+
    "\1\172\3\10\2\0\13\10\1\0\1\10\4\0\4\10"+
    "\1\173\13\0\2\10\3\0\10\10\2\0\13\10\1\0"+
    "\1\10\4\0\1\10\1\174\3\10\13\0\2\10\3\0"+
    "\10\10\2\0\13\10\1\0\1\10\4\0\5\10\13\0"+
    "\2\10\3\0\2\10\1\175\5\10\2\0\13\10\1\0"+
    "\1\10\4\0\5\10\13\0\2\10\3\0\7\10\1\176"+
    "\2\0\13\10\1\0\1\10\4\0\5\10\13\0\2\10"+
    "\3\0\10\10\2\0\10\10\1\177\2\10\1\0\1\10"+
    "\4\0\1\200\4\10\13\0\2\10\3\0\10\10\2\0"+
    "\13\10\1\0\1\10\4\0\3\10\1\201\1\10\13\0"+
    "\2\10\3\0\10\10\2\0\13\10\1\0\1\10\4\0"+
    "\5\10\13\0\2\10\3\0\1\202\7\10\2\0\13\10"+
    "\1\0\1\10\4\0\1\203\4\10\13\0\2\10\3\0"+
    "\10\10\2\0\13\10\1\0\1\10\4\0\5\10\13\0"+
    "\2\10\3\0\7\10\1\204\2\0\13\10\1\0\1\10"+
    "\4\0\2\10\1\205\2\10\13\0\2\10\3\0\10\10"+
    "\2\0\13\10\1\0\1\10\4\0\5\10\13\0\2\10"+
    "\3\0\2\10\1\206\5\10\2\0\13\10\1\0\1\10"+
    "\4\0\5\10\13\0\2\10\3\0\1\10\1\207\6\10"+
    "\2\0\13\10\1\0\1\10\4\0\5\10\13\0\2\10"+
    "\3\0\10\10\2\0\2\10\1\210\10\10\1\0\1\10"+
    "\4\0\5\10\13\0\2\10\3\0\10\10\2\0\10\10"+
    "\1\211\2\10\1\0\1\10\4\0\5\10\13\0\2\10"+
    "\3\0\4\10\1\212\3\10\2\0\13\10\1\0\1\10"+
    "\4\0\5\10\13\0\2\10\3\0\10\10\2\0\1\10"+
    "\1\213\11\10\1\0\1\10\4\0\5\10\13\0\2\10"+
    "\3\0\10\10\2\0\10\10\1\214\2\10\1\0\1\10"+
    "\4\0\3\10\1\215\1\10\13\0\2\10\3\0\10\10"+
    "\2\0\13\10\1\0\1\10\4\0\5\10\13\0\2\10"+
    "\3\0\10\10\2\0\6\10\1\216\4\10\1\0\1\10"+
    "\4\0\1\10\1\217\3\10\13\0\2\10\3\0\10\10"+
    "\2\0\13\10\1\0\1\10\4\0\5\10\13\0\2\10"+
    "\3\0\10\10\2\0\5\10\1\220\5\10\1\0\1\10"+
    "\22\0\1\221\41\0\1\10\1\222\3\10\13\0\2\10"+
    "\3\0\10\10\2\0\13\10\1\0\1\10\4\0\2\10"+
    "\1\223\2\10\13\0\2\10\3\0\10\10\2\0\13\10"+
    "\1\0\1\10\4\0\5\10\13\0\2\10\3\0\10\10"+
    "\2\0\3\10\1\224\7\10\1\0\1\10\4\0\5\10"+
    "\13\0\2\10\3\0\10\10\2\0\10\10\1\225\2\10"+
    "\1\0\1\10\4\0\2\10\1\226\2\10\13\0\2\10"+
    "\3\0\10\10\2\0\13\10\1\0\1\10\4\0\2\10"+
    "\1\227\2\10\13\0\2\10\3\0\7\10\1\153\2\0"+
    "\13\10\1\0\1\10\4\0\5\10\13\0\2\10\3\0"+
    "\4\10\1\230\3\10\2\0\13\10\1\0\1\10\4\0"+
    "\5\10\13\0\2\10\3\0\4\10\1\231\3\10\2\0"+
    "\13\10\1\0\1\10\4\0\1\10\1\232\3\10\13\0"+
    "\2\10\3\0\10\10\2\0\13\10\1\0\1\10\4\0"+
    "\2\10\1\233\2\10\13\0\2\10\3\0\10\10\2\0"+
    "\13\10\1\0\1\10\4\0\5\10\13\0\2\10\3\0"+
    "\10\10\2\0\2\10\1\234\10\10\1\0\1\10\4\0"+
    "\1\235\4\10\13\0\2\10\3\0\10\10\2\0\13\10"+
    "\1\0\1\10\4\0\2\10\1\236\2\10\13\0\2\10"+
    "\3\0\10\10\2\0\13\10\1\0\1\10\4\0\1\10"+
    "\1\237\3\10\13\0\2\10\3\0\10\10\2\0\13\10"+
    "\1\0\1\10\4\0\5\10\13\0\2\10\3\0\10\10"+
    "\2\0\3\10\1\240\7\10\1\0\1\10\4\0\5\10"+
    "\13\0\2\10\3\0\4\10\1\241\3\10\2\0\13\10"+
    "\1\0\1\10\4\0\1\242\4\10\13\0\2\10\3\0"+
    "\10\10\2\0\13\10\1\0\1\10\4\0\1\243\4\10"+
    "\13\0\2\10\3\0\10\10\2\0\13\10\1\0\1\10"+
    "\4\0\5\10\13\0\2\10\3\0\7\10\1\244\2\0"+
    "\13\10\1\0\1\10\4\0\5\10\13\0\2\10\3\0"+
    "\6\10\1\245\1\10\2\0\13\10\1\0\1\10\4\0"+
    "\2\10\1\246\2\10\13\0\2\10\3\0\10\10\2\0"+
    "\13\10\1\0\1\10\4\0\1\247\4\10\13\0\2\10"+
    "\3\0\10\10\2\0\13\10\1\0\1\10\4\0\5\10"+
    "\13\0\2\10\3\0\10\10\2\0\10\10\1\250\2\10"+
    "\1\0\1\10\4\0\5\10\13\0\2\10\3\0\10\10"+
    "\2\0\10\10\1\251\2\10\1\0\1\10\4\0\5\10"+
    "\13\0\2\10\3\0\10\10\2\0\3\10\1\252\7\10"+
    "\1\0\1\10\4\0\5\10\13\0\2\10\3\0\6\10"+
    "\1\253\1\10\2\0\13\10\1\0\1\10\22\0\1\124"+
    "\41\0\2\10\1\254\2\10\13\0\2\10\3\0\10\10"+
    "\2\0\13\10\1\0\1\10\4\0\1\10\1\255\3\10"+
    "\13\0\2\10\3\0\10\10\2\0\13\10\1\0\1\10"+
    "\4\0\4\10\1\256\13\0\2\10\3\0\4\10\1\257"+
    "\3\10\2\0\13\10\1\0\1\10\4\0\1\10\1\260"+
    "\3\10\13\0\2\10\3\0\10\10\2\0\13\10\1\0"+
    "\1\10\4\0\5\10\13\0\2\10\3\0\5\10\1\261"+
    "\2\10\2\0\13\10\1\0\1\10\4\0\4\10\1\262"+
    "\13\0\2\10\3\0\10\10\2\0\13\10\1\0\1\10"+
    "\4\0\5\10\13\0\2\10\3\0\2\10\1\263\5\10"+
    "\2\0\13\10\1\0\1\10\4\0\3\10\1\264\1\10"+
    "\13\0\2\10\3\0\10\10\2\0\13\10\1\0\1\10"+
    "\4\0\2\10\1\265\2\10\13\0\2\10\3\0\10\10"+
    "\2\0\13\10\1\0\1\10\4\0\1\10\1\266\3\10"+
    "\13\0\2\10\3\0\10\10\2\0\13\10\1\0\1\10"+
    "\4\0\5\10\13\0\2\10\3\0\4\10\1\267\3\10"+
    "\2\0\13\10\1\0\1\10\4\0\1\10\1\270\3\10"+
    "\13\0\2\10\3\0\10\10\2\0\13\10\1\0\1\10"+
    "\4\0\1\271\4\10\13\0\2\10\3\0\10\10\2\0"+
    "\13\10\1\0\1\10\4\0\3\10\1\272\1\10\13\0"+
    "\2\10\3\0\10\10\2\0\13\10\1\0\1\10\4\0"+
    "\5\10\13\0\2\10\3\0\10\10\2\0\3\10\1\273"+
    "\7\10\1\0\1\10\4\0\5\10\13\0\2\10\3\0"+
    "\10\10\2\0\3\10\1\274\7\10\1\0\1\10\4\0"+
    "\5\10\13\0\2\10\3\0\6\10\1\112\1\10\2\0"+
    "\13\10\1\0\1\10\4\0\1\10\1\275\3\10\13\0"+
    "\2\10\3\0\10\10\2\0\13\10\1\0\1\10\4\0"+
    "\1\10\1\276\3\10\13\0\2\10\3\0\10\10\2\0"+
    "\13\10\1\0\1\10\4\0\5\10\13\0\2\10\3\0"+
    "\7\10\1\277\2\0\13\10\1\0\1\10\4\0\5\10"+
    "\13\0\2\10\3\0\4\10\1\300\3\10\2\0\13\10"+
    "\1\0\1\10\4\0\4\10\1\301\13\0\2\10\3\0"+
    "\10\10\2\0\13\10\1\0\1\10\4\0\5\10\13\0"+
    "\2\10\3\0\10\10\2\0\10\10\1\302\2\10\1\0"+
    "\1\10\4\0\5\10\13\0\2\10\3\0\2\10\1\303"+
    "\5\10\2\0\13\10\1\0\1\10\4\0\5\10\13\0"+
    "\2\10\3\0\10\10\2\0\3\10\1\304\7\10\1\0"+
    "\1\10\4\0\5\10\13\0\2\10\3\0\7\10\1\305"+
    "\2\0\13\10\1\0\1\10\4\0\5\10\13\0\2\10"+
    "\3\0\10\10\2\0\1\10\1\306\11\10\1\0\1\10"+
    "\4\0\2\10\1\307\2\10\13\0\2\10\3\0\10\10"+
    "\2\0\13\10\1\0\1\10\4\0\5\10\13\0\2\10"+
    "\3\0\6\10\1\310\1\10\2\0\13\10\1\0\1\10"+
    "\4\0\5\10\13\0\2\10\3\0\7\10\1\311\2\0"+
    "\13\10\1\0\1\10\4\0\5\10\13\0\2\10\3\0"+
    "\4\10\1\312\3\10\2\0\13\10\1\0\1\10\4\0"+
    "\2\10\1\313\2\10\13\0\2\10\3\0\10\10\2\0"+
    "\13\10\1\0\1\10\4\0\5\10\13\0\2\10\3\0"+
    "\10\10\2\0\3\10\1\314\7\10\1\0\1\10\4\0"+
    "\2\10\1\315\2\10\13\0\2\10\3\0\10\10\2\0"+
    "\13\10\1\0\1\10\4\0\5\10\13\0\2\10\3\0"+
    "\5\10\1\316\2\10\2\0\13\10\1\0\1\10\4\0"+
    "\2\10\1\317\2\10\13\0\2\10\3\0\10\10\2\0"+
    "\13\10\1\0\1\10\4\0\1\320\4\10\13\0\2\10"+
    "\3\0\2\10\1\321\2\10\1\322\2\10\2\0\13\10"+
    "\1\0\1\323\4\0\5\10\13\0\2\10\3\0\10\10"+
    "\2\0\7\10\1\324\3\10\1\0\1\10\4\0\5\10"+
    "\13\0\2\10\3\0\4\10\1\325\3\10\2\0\13\10"+
    "\1\0\1\10\4\0\5\10\13\0\2\10\3\0\10\10"+
    "\2\0\3\10\1\326\7\10\1\0\1\10\4\0\5\10"+
    "\13\0\2\10\3\0\3\10\1\327\4\10\2\0\13\10"+
    "\1\0\1\10\4\0\5\10\13\0\2\10\3\0\7\10"+
    "\1\330\2\0\13\10\1\0\1\10\4\0\2\10\1\331"+
    "\2\10\13\0\2\10\3\0\10\10\2\0\13\10\1\0"+
    "\1\10\4\0\5\10\13\0\2\10\3\0\10\10\2\0"+
    "\2\10\1\332\10\10\1\0\1\10\4\0\1\10\1\333"+
    "\3\10\13\0\2\10\3\0\10\10\2\0\13\10\1\0"+
    "\1\10\4\0\5\10\13\0\2\10\3\0\10\10\2\0"+
    "\4\10\1\334\6\10\1\0\1\10\4\0\5\10\13\0"+
    "\2\10\3\0\10\10\2\0\2\10\1\335\10\10\1\0"+
    "\1\10\4\0\5\10\13\0\2\10\3\0\7\10\1\336"+
    "\2\0\13\10\1\0\1\10\4\0\1\10\1\210\3\10"+
    "\13\0\2\10\3\0\10\10\2\0\13\10\1\0\1\10"+
    "\4\0\1\10\1\337\3\10\13\0\2\10\3\0\10\10"+
    "\2\0\13\10\1\0\1\10\4\0\1\10\1\340\3\10"+
    "\13\0\2\10\3\0\10\10\2\0\13\10\1\0\1\10"+
    "\4\0\1\341\4\10\13\0\2\10\3\0\10\10\2\0"+
    "\13\10\1\0\1\10\4\0\1\10\1\342\3\10\13\0"+
    "\2\10\3\0\10\10\2\0\13\10\1\0\1\10\4\0"+
    "\5\10\13\0\2\10\3\0\10\10\2\0\11\10\1\343"+
    "\1\10\1\0\1\10\4\0\1\10\1\344\3\10\13\0"+
    "\2\10\3\0\10\10\2\0\13\10\1\0\1\10\4\0"+
    "\5\10\13\0\2\10\3\0\5\10\1\345\2\10\2\0"+
    "\13\10\1\0\1\10\4\0\5\10\13\0\2\10\3\0"+
    "\10\10\2\0\5\10\1\346\5\10\1\0\1\10\4\0"+
    "\1\347\4\10\13\0\2\10\3\0\10\10\2\0\13\10"+
    "\1\0\1\10\4\0\2\10\1\350\2\10\13\0\2\10"+
    "\3\0\10\10\2\0\13\10\1\0\1\10\4\0\2\10"+
    "\1\351\2\10\13\0\2\10\3\0\10\10\2\0\13\10"+
    "\1\0\1\10\4\0\1\352\4\10\13\0\2\10\3\0"+
    "\10\10\2\0\13\10\1\0\1\10\4\0\4\10\1\353"+
    "\13\0\2\10\3\0\10\10\2\0\13\10\1\0\1\10"+
    "\4\0\2\10\1\354\2\10\13\0\2\10\3\0\10\10"+
    "\2\0\13\10\1\0\1\10\4\0\5\10\13\0\2\10"+
    "\3\0\10\10\2\0\3\10\1\355\7\10\1\0\1\10"+
    "\4\0\5\10\13\0\2\10\3\0\10\10\2\0\5\10"+
    "\1\356\5\10\1\0\1\10\4\0\5\10\13\0\2\10"+
    "\3\0\7\10\1\357\2\0\13\10\1\0\1\10\4\0"+
    "\5\10\13\0\2\10\3\0\10\10\2\0\5\10\1\360"+
    "\5\10\1\0\1\10\4\0\5\10\13\0\2\10\3\0"+
    "\10\10\2\0\3\10\1\361\7\10\1\0\1\10\4\0"+
    "\5\10\13\0\2\10\3\0\10\10\2\0\3\10\1\362"+
    "\7\10\1\0\1\10\4\0\5\10\13\0\2\10\3\0"+
    "\5\10\1\363\2\10\2\0\13\10\1\0\1\10\4\0"+
    "\5\10\13\0\2\10\3\0\7\10\1\364\2\0\13\10"+
    "\1\0\1\10\4\0\5\10\13\0\2\10\3\0\10\10"+
    "\2\0\11\10\1\365\1\10\1\0\1\10\4\0\1\10"+
    "\1\366\3\10\13\0\2\10\3\0\10\10\2\0\13\10"+
    "\1\0\1\10\4\0\5\10\13\0\2\10\3\0\2\10"+
    "\1\367\5\10\2\0\13\10\1\0\1\10\4\0\5\10"+
    "\13\0\2\10\3\0\5\10\1\370\2\10\2\0\13\10"+
    "\1\0\1\10\4\0\5\10\13\0\2\10\3\0\10\10"+
    "\2\0\2\10\1\371\10\10\1\0\1\10\4\0\5\10"+
    "\13\0\2\10\3\0\7\10\1\372\2\0\13\10\1\0"+
    "\1\10\4\0\1\10\1\373\3\10\13\0\2\10\3\0"+
    "\10\10\2\0\13\10\1\0\1\10\4\0\5\10\13\0"+
    "\2\10\3\0\1\374\7\10\2\0\13\10\1\0\1\10"+
    "\4\0\5\10\13\0\2\10\3\0\7\10\1\375\2\0"+
    "\13\10\1\0\1\10\4\0\5\10\13\0\2\10\3\0"+
    "\10\10\2\0\6\10\1\376\4\10\1\0\1\10\4\0"+
    "\5\10\13\0\2\10\3\0\4\10\1\377\3\10\2\0"+
    "\13\10\1\0\1\10\4\0\5\10\13\0\2\10\3\0"+
    "\3\10\1\u0100\4\10\2\0\13\10\1\0\1\10\4\0"+
    "\1\u0101\4\10\13\0\2\10\3\0\10\10\2\0\13\10"+
    "\1\0\1\10\4\0\5\10\13\0\2\10\3\0\10\10"+
    "\2\0\11\10\1\u0102\1\10\1\0\1\10\4\0\5\10"+
    "\13\0\2\10\3\0\10\10\2\0\10\10\1\u0103\2\10"+
    "\1\0\1\10\4\0\5\10\13\0\2\10\3\0\7\10"+
    "\1\u0104\2\0\13\10\1\0\1\10\4\0\1\u0105\4\10"+
    "\13\0\2\10\3\0\10\10\2\0\13\10\1\0\1\10"+
    "\4\0\5\10\13\0\2\10\3\0\5\10\1\u0106\2\10"+
    "\2\0\13\10\1\0\1\10\4\0\1\u0107\4\10\13\0"+
    "\2\10\3\0\10\10\2\0\13\10\1\0\1\10\4\0"+
    "\5\10\13\0\2\10\3\0\10\10\2\0\10\10\1\u0108"+
    "\2\10\1\0\1\10\4\0\5\10\13\0\2\10\3\0"+
    "\10\10\2\0\3\10\1\u0109\7\10\1\0\1\10\4\0"+
    "\5\10\13\0\2\10\3\0\10\10\2\0\3\10\1\u010a"+
    "\7\10\1\0\1\10\4\0\5\10\13\0\2\10\3\0"+
    "\4\10\1\u010b\3\10\2\0\13\10\1\0\1\10\4\0"+
    "\5\10\13\0\2\10\3\0\6\10\1\u010c\1\10\2\0"+
    "\13\10\1\0\1\10\4\0\5\10\13\0\2\10\3\0"+
    "\10\10\2\0\7\10\1\u010d\3\10\1\0\1\10\4\0"+
    "\5\10\13\0\2\10\3\0\7\10\1\u010e\2\0\13\10"+
    "\1\0\1\10\4\0\2\10\1\u010f\2\10\13\0\2\10"+
    "\3\0\10\10\2\0\13\10\1\0\1\10\4\0\5\10"+
    "\13\0\2\10\3\0\5\10\1\u0110\2\10\2\0\13\10"+
    "\1\0\1\10\4\0\5\10\13\0\2\10\3\0\7\10"+
    "\1\u0111\2\0\13\10\1\0\1\10\4\0\1\u0112\4\10"+
    "\13\0\2\10\3\0\10\10\2\0\13\10\1\0\1\10"+
    "\4\0\5\10\13\0\2\10\3\0\10\10\2\0\10\10"+
    "\1\u0113\2\10\1\0\1\10\4\0\5\10\13\0\2\10"+
    "\3\0\10\10\2\0\3\10\1\u0114\7\10\1\0\1\10"+
    "\4\0\2\10\1\u0115\2\10\13\0\2\10\3\0\10\10"+
    "\2\0\13\10\1\0\1\10\4\0\1\u0116\4\10\13\0"+
    "\2\10\3\0\10\10\2\0\13\10\1\0\1\10\4\0"+
    "\2\10\1\u0117\2\10\13\0\2\10\3\0\10\10\2\0"+
    "\13\10\1\0\1\10\4\0\5\10\13\0\2\10\3\0"+
    "\2\10\1\u0118\5\10\2\0\13\10\1\0\1\10\4\0"+
    "\5\10\13\0\2\10\3\0\5\10\1\u0119\2\10\2\0"+
    "\13\10\1\0\1\u011a\4\0\3\10\1\u011b\1\10\13\0"+
    "\2\10\3\0\10\10\2\0\13\10\1\0\1\10\4\0"+
    "\1\u011c\4\10\13\0\2\10\3\0\10\10\2\0\13\10"+
    "\1\0\1\10\4\0\2\10\1\u011d\2\10\13\0\2\10"+
    "\3\0\10\10\2\0\13\10\1\0\1\10\4\0\1\10"+
    "\1\u011e\3\10\13\0\2\10\3\0\10\10\2\0\13\10"+
    "\1\0\1\10\4\0\1\10\1\u011f\3\10\13\0\2\10"+
    "\3\0\10\10\2\0\13\10\1\0\1\10\4\0\5\10"+
    "\13\0\2\10\3\0\10\10\2\0\11\10\1\u0120\1\10"+
    "\1\0\1\10\4\0\5\10\13\0\2\10\3\0\10\10"+
    "\2\0\10\10\1\u0121\2\10\1\0\1\10\4\0\1\u0122"+
    "\4\10\13\0\2\10\3\0\10\10\2\0\13\10\1\0"+
    "\1\10\4\0\4\10\1\u0123\13\0\2\10\3\0\10\10"+
    "\2\0\13\10\1\0\1\10\4\0\5\10\13\0\2\10"+
    "\3\0\10\10\2\0\3\10\1\u0124\7\10\1\0\1\10"+
    "\4\0\5\10\13\0\2\10\3\0\2\10\1\u0115\5\10"+
    "\2\0\13\10\1\0\1\10\4\0\5\10\13\0\2\10"+
    "\3\0\4\10\1\u0125\3\10\2\0\13\10\1\0\1\10"+
    "\4\0\1\u0126\4\10\13\0\2\10\3\0\10\10\2\0"+
    "\13\10\1\0\1\10\4\0\2\10\1\u0127\2\10\13\0"+
    "\2\10\3\0\10\10\2\0\13\10\1\0\1\10\4\0"+
    "\5\10\13\0\2\10\3\0\10\10\2\0\10\10\1\u0128"+
    "\2\10\1\0\1\10\4\0\4\10\1\u0129\13\0\2\10"+
    "\3\0\10\10\2\0\13\10\1\0\1\10\4\0\5\10"+
    "\13\0\2\10\3\0\4\10\1\u012a\3\10\2\0\13\10"+
    "\1\0\1\10\4\0\5\10\13\0\2\10\3\0\7\10"+
    "\1\u012b\2\0\13\10\1\0\1\10\4\0\1\u012c\4\10"+
    "\13\0\2\10\3\0\10\10\2\0\13\10\1\0\1\10"+
    "\4\0\5\10\13\0\2\10\3\0\10\10\2\0\3\10"+
    "\1\u012d\7\10\1\0\1\10\4\0\5\10\13\0\2\10"+
    "\3\0\7\10\1\u012e\2\0\13\10\1\0\1\10\4\0"+
    "\4\10\1\u012f\13\0\2\10\3\0\10\10\2\0\13\10"+
    "\1\0\1\10\4\0\5\10\13\0\2\10\3\0\2\10"+
    "\1\u0130\5\10\2\0\13\10\1\0\1\10\4\0\5\10"+
    "\13\0\2\10\3\0\5\10\1\u0131\2\10\2\0\13\10"+
    "\1\0\1\10\4\0\2\10\1\u0132\2\10\13\0\2\10"+
    "\3\0\10\10\2\0\13\10\1\0\1\10\4\0\2\10"+
    "\1\u0133\2\10\13\0\2\10\3\0\10\10\2\0\13\10"+
    "\1\0\1\10\4\0\2\10\1\u0134\2\10\13\0\2\10"+
    "\3\0\10\10\2\0\13\10\1\0\1\10\4\0\5\10"+
    "\13\0\2\10\3\0\10\10\2\0\10\10\1\u0135\2\10"+
    "\1\0\1\10\4\0\4\10\1\u0136\13\0\2\10\3\0"+
    "\10\10\2\0\13\10\1\0\1\10\4\0\5\10\13\0"+
    "\2\10\3\0\6\10\1\u0137\1\10\2\0\13\10\1\0"+
    "\1\10\4\0\5\10\13\0\2\10\3\0\7\10\1\u0138"+
    "\2\0\13\10\1\0\1\10\4\0\5\10\13\0\2\10"+
    "\3\0\5\10\1\u0139\2\10\2\0\13\10\1\0\1\10"+
    "\4\0\1\u013a\4\10\13\0\2\10\3\0\10\10\2\0"+
    "\13\10\1\0\1\10\4\0\1\10\1\u013b\3\10\13\0"+
    "\2\10\3\0\10\10\2\0\13\10\1\0\1\10\4\0"+
    "\5\10\13\0\2\10\3\0\5\10\1\u013c\2\10\2\0"+
    "\13\10\1\0\1\10\4\0\1\u013d\4\10\13\0\2\10"+
    "\3\0\10\10\2\0\13\10\1\0\1\10\4\0\5\10"+
    "\13\0\2\10\3\0\7\10\1\u013e\2\0\13\10\1\0"+
    "\1\10\4\0\2\10\1\u013f\2\10\13\0\2\10\3\0"+
    "\10\10\2\0\13\10\1\0\1\10\4\0\5\10\13\0"+
    "\2\10\3\0\6\10\1\u0140\1\10\2\0\13\10\1\0"+
    "\1\10\4\0\2\10\1\u0141\2\10\13\0\2\10\3\0"+
    "\10\10\2\0\13\10\1\0\1\10\4\0\1\u0142\4\10"+
    "\13\0\2\10\3\0\10\10\2\0\13\10\1\0\1\10"+
    "\4\0\5\10\13\0\2\10\3\0\6\10\1\u0143\1\10"+
    "\2\0\13\10\1\0\1\10\4\0\5\10\13\0\2\10"+
    "\3\0\6\10\1\u0144\1\10\2\0\13\10\1\0\1\10"+
    "\4\0\3\10\1\u0145\1\10\13\0\2\10\3\0\10\10"+
    "\2\0\13\10\1\0\1\10\4\0\2\10\1\u0146\2\10"+
    "\13\0\2\10\3\0\10\10\2\0\13\10\1\0\1\10"+
    "\4\0\5\10\13\0\2\10\3\0\2\10\1\u0141\5\10"+
    "\2\0\13\10\1\0\1\10\4\0\5\10\13\0\2\10"+
    "\3\0\7\10\1\u0147\2\0\13\10\1\0\1\10\4\0"+
    "\2\10\1\u0148\2\10\13\0\2\10\3\0\10\10\2\0"+
    "\13\10\1\0\1\10\4\0\5\10\13\0\2\10\3\0"+
    "\10\10\2\0\10\10\1\u0149\2\10\1\0\1\10\4\0"+
    "\3\10\1\u014a\1\10\13\0\2\10\3\0\10\10\2\0"+
    "\13\10\1\0\1\10\4\0\3\10\1\u014b\1\10\13\0"+
    "\2\10\3\0\10\10\2\0\13\10\1\0\1\10\4\0"+
    "\5\10\13\0\2\10\3\0\7\10\1\u014c\2\0\13\10"+
    "\1\0\1\10\4\0\5\10\13\0\2\10\3\0\10\10"+
    "\2\0\10\10\1\u014d\2\10\1\0\1\10\4\0\5\10"+
    "\13\0\2\10\3\0\10\10\2\0\10\10\1\u014e\2\10"+
    "\1\0\1\10\4\0\5\10\13\0\2\10\3\0\7\10"+
    "\1\u014f\2\0\13\10\1\0\1\10\4\0\5\10\13\0"+
    "\2\10\3\0\7\10\1\u0150\2\0\13\10\1\0\1\10"+
    "\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13728];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\10\1\1\11\1\1\1\11"+
    "\1\1\2\11\1\1\1\11\1\1\3\11\6\1\1\11"+
    "\7\1\3\11\11\1\2\0\1\11\1\0\35\1\1\11"+
    "\1\0\36\1\1\0\34\1\1\0\277\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[336];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    private Symbol symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn, value);
    }
    private Symbol symbol(int type){
        return new Symbol(type, yyline, yycolumn);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexerCup(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 158) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return new Symbol(sym.ERROR, yychar, yyline, yytext());
            } 
            // fall through
          case 55: break;
          case 2: 
            { return new Symbol(sym.OPERADORDECOMPARACION, yychar, yyline, yytext());
            } 
            // fall through
          case 56: break;
          case 3: 
            { return new Symbol(sym.OPERADORARITMETICORESTA, yychar, yyline, yytext());
            } 
            // fall through
          case 57: break;
          case 4: 
            { return new Symbol(sym.IDENTIFICADOR, yychar, yyline, yytext());
            } 
            // fall through
          case 58: break;
          case 5: 
            { return new Symbol(sym.OPERADORNEGACION, yychar, yyline, yytext());
            } 
            // fall through
          case 59: break;
          case 6: 
            { return new Symbol(sym.OPERADORARITMETICO, yychar, yyline, yytext());
            } 
            // fall through
          case 60: break;
          case 7: 
            { return new Symbol(sym.OPERADORARITMETICOSUMA, yychar, yyline, yytext());
            } 
            // fall through
          case 61: break;
          case 8: 
            { return new Symbol(sym.SEPARADOR, yychar, yyline, yytext());
            } 
            // fall through
          case 62: break;
          case 9: 
            { return new Symbol(sym.PUNTOYCOMA, yychar, yyline, yytext());
            } 
            // fall through
          case 63: break;
          case 10: 
            { /* Se ignoran los saltos de Línea */
            } 
            // fall through
          case 64: break;
          case 11: 
            { return new Symbol(sym.NUMERO, yychar, yyline, yytext());
            } 
            // fall through
          case 65: break;
          case 12: 
            { return new Symbol(sym.LLAVEABRE, yychar, yyline, yytext());
            } 
            // fall through
          case 66: break;
          case 13: 
            { return new Symbol(sym.LLAVECIERRA, yychar, yyline, yytext());
            } 
            // fall through
          case 67: break;
          case 14: 
            { return new Symbol(sym.PARENTESISABRE, yychar, yyline, yytext());
            } 
            // fall through
          case 68: break;
          case 15: 
            { return new Symbol(sym.PARENTESISCIERRA, yychar, yyline, yytext());
            } 
            // fall through
          case 69: break;
          case 16: 
            { /* Se ignoran los espacios en Blanco */
            } 
            // fall through
          case 70: break;
          case 17: 
            { return new Symbol(sym.DOSPUNTOS, yychar, yyline, yytext());
            } 
            // fall through
          case 71: break;
          case 18: 
            { return new Symbol(sym.OPERADORASIGNACION, yychar, yyline, yytext());
            } 
            // fall through
          case 72: break;
          case 19: 
            { return new Symbol(sym.OPERADORLOGICO, yychar, yyline, yytext());
            } 
            // fall through
          case 73: break;
          case 20: 
            { return new Symbol(sym.CADENA, yychar, yyline, yytext());
            } 
            // fall through
          case 74: break;
          case 21: 
            { return new Symbol(sym.SI, yychar, yyline, yytext());
            } 
            // fall through
          case 75: break;
          case 22: 
            { /* Se ignoran los comentarios */
            } 
            // fall through
          case 76: break;
          case 23: 
            { return new Symbol(sym.VARIABLE, yychar, yyline, yytext());
            } 
            // fall through
          case 77: break;
          case 24: 
            { return new Symbol(sym.FIN, yychar, yyline, yytext());
            } 
            // fall through
          case 78: break;
          case 25: 
            { return new Symbol(sym.COLORES, yychar, yyline, yytext());
            } 
            // fall through
          case 79: break;
          case 26: 
            { return new Symbol(sym.PARA, yychar, yyline, yytext());
            } 
            // fall through
          case 80: break;
          case 27: 
            { return new Symbol(sym.CASO, yychar, yyline, yytext());
            } 
            // fall through
          case 81: break;
          case 28: 
            { return new Symbol(sym.SINO, yychar, yyline, yytext());
            } 
            // fall through
          case 82: break;
          case 29: 
            { return new Symbol(sym.HACER, yychar, yyline, yytext());
            } 
            // fall through
          case 83: break;
          case 30: 
            { return new Symbol(sym.BOOLEANO, yychar, yyline, yytext());
            } 
            // fall through
          case 84: break;
          case 31: 
            { return new Symbol(sym.ESPERA, yychar, yyline, yytext());
            } 
            // fall through
          case 85: break;
          case 32: 
            { return new Symbol(sym.SINOSI, yychar, yyline, yytext());
            } 
            // fall through
          case 86: break;
          case 33: 
            { return new Symbol(sym.AVANZAR, yychar, yyline, yytext());
            } 
            // fall through
          case 87: break;
          case 34: 
            { return new Symbol(sym.DEFAULT, yychar, yyline, yytext());
            } 
            // fall through
          case 88: break;
          case 35: 
            { return new Symbol(sym.PROGRAMA, yychar, yyline, yytext());
            } 
            // fall through
          case 89: break;
          case 36: 
            { return new Symbol(sym.REPITE, yychar, yyline, yytext());
            } 
            // fall through
          case 90: break;
          case 37: 
            { return new Symbol(sym.IMPRIMIRCADENA, yychar, yyline, yytext());
            } 
            // fall through
          case 91: break;
          case 38: 
            { return new Symbol(sym.COMPARAR, yychar, yyline, yytext());
            } 
            // fall through
          case 92: break;
          case 39: 
            { return new Symbol(sym.TERMINARBLOQUE, yychar, yyline, yytext());
            } 
            // fall through
          case 93: break;
          case 40: 
            { return new Symbol(sym.RANDOM, yychar, yyline, yytext());
            } 
            // fall through
          case 94: break;
          case 41: 
            { return new Symbol(sym.TOMAR, yychar, yyline, yytext());
            } 
            // fall through
          case 95: break;
          case 42: 
            { return new Symbol(sym.REPITEHASTA, yychar, yyline, yytext());
            } 
            // fall through
          case 96: break;
          case 43: 
            { return new Symbol(sym.PINTAR, yychar, yyline, yytext());
            } 
            // fall through
          case 97: break;
          case 44: 
            { return new Symbol(sym.DERECHA, yychar, yyline, yytext());
            } 
            // fall through
          case 98: break;
          case 45: 
            { return new Symbol(sym.IMPRIMIRVARIABLE, yychar, yyline, yytext());
            } 
            // fall through
          case 99: break;
          case 46: 
            { return new Symbol(sym.QUETENGODELANTE, yychar, yyline, yytext());
            } 
            // fall through
          case 100: break;
          case 47: 
            { return new Symbol(sym.SOLTAR, yychar, yyline, yytext());
            } 
            // fall through
          case 101: break;
          case 48: 
            { return new Symbol(sym.IZQUIERDA, yychar, yyline, yytext());
            } 
            // fall through
          case 102: break;
          case 49: 
            { return new Symbol(sym.DEJAPINTAR, yychar, yyline, yytext());
            } 
            // fall through
          case 103: break;
          case 50: 
            { return new Symbol(sym.ELIMINAR, yychar, yyline, yytext());
            } 
            // fall through
          case 104: break;
          case 51: 
            { return new Symbol(sym.DESACTIVARKABOOM, yychar, yyline, yytext());
            } 
            // fall through
          case 105: break;
          case 52: 
            { return new Symbol(sym.MURODELANTE, yychar, yyline, yytext());
            } 
            // fall through
          case 106: break;
          case 53: 
            { return new Symbol(sym.KABOOMDEFRENTE, yychar, yyline, yytext());
            } 
            // fall through
          case 107: break;
          case 54: 
            { return new Symbol(sym.OBJETODELANTE, yychar, yyline, yytext());
            } 
            // fall through
          case 108: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
